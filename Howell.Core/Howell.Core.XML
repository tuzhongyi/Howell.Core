<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Howell.Core</name>
    </assembly>
    <members>
        <member name="T:System.Net.NetworkInformation.PhysicalAddressExtensions">
            <summary>
            Physical address extension functions.
            </summary>
        </member>
        <member name="M:System.Net.NetworkInformation.PhysicalAddressExtensions.ToFormattedString(System.Net.NetworkInformation.PhysicalAddress)">
            <summary>
            Convert to a formatted string containing the address contained in this instance.
            </summary>
            <param name="address">The instance of address.</param>
            <returns>Returns the formatted String representation of the address of this instance.</returns>
        </member>
        <member name="T:System.Collections.Generic.IEnumerableExtensions">
            <summary>
            IEnumerable{T} extension functions.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableExtensions.ToHexString(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Convert the instance of IEnumerable{Byte} to hex string.
            </summary>
            <param name="enumerator">The instance of IEnumerable{Byte}</param>
            <returns>returns a hex string.</returns>
        </member>
        <member name="T:Howell.IO.Serialization.IBinarySerializable">
            <summary>
            二进制序列化接口
            </summary>
        </member>
        <member name="M:Howell.IO.Serialization.IBinarySerializable.ReadBinary(System.IO.BinaryReader)">
            <summary>
            从对象的 Bit 表示形式生成该对象。
            </summary>
            <param name="reader">对象从中进行反序列化的 System.IO.BinaryWriter 流。</param>
        </member>
        <member name="M:Howell.IO.Serialization.IBinarySerializable.WriteBinary(System.IO.BinaryWriter)">
            <summary>
            将对象转换为其 Bit 表示形式。
            </summary>
            <param name="writer">对象要序列化为的 System.IO.BinaryWriter 流。</param>
        </member>
        <member name="T:Howell.IO.BitStream">
            <summary>
            位流
            </summary>
        </member>
        <member name="F:Howell.IO.BitStream._innerStream">
            <summary>
            
            </summary>
        </member>
        <member name="F:Howell.IO.BitStream._offset">
            <summary>
            0-7的偏移值
            </summary>
        </member>
        <member name="F:Howell.IO.BitStream._currentByte">
            <summary>
            
            </summary>
        </member>
        <member name="F:Howell.IO.BitStream._order">
            <summary>
            
            </summary>
        </member>
        <member name="M:Howell.IO.BitStream.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Howell.IO.BitStream.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"> 从中创建当前流的无符号字节数组。</param>
            <exception cref="T:System.ArgumentNullException">buffer 为 null。</exception>
        </member>
        <member name="M:Howell.IO.BitStream.#ctor(System.Byte[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="buffer">从中创建该流的无符号字节数组。</param>
            <param name="writable">Howell.IO.BitStream.CanWrite 属性的设置，确定流是否支持写入。</param>
            <exception cref="T:System.ArgumentNullException">buffer 为 null。</exception>
        </member>
        <member name="M:Howell.IO.BitStream.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer">从中创建该流的无符号字节数组。</param>
            <param name="index">buffer 内的索引，流从此处开始。</param>
            <param name="count">流的长度（以字节为单位）。</param>
            <exception cref="T:System.ArgumentNullException">buffer 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index 或 count 小于零。</exception>
            <exception cref="T:System.ArgumentException">index 与 count 的和大于 buffer 的长度。</exception>
        </member>
        <member name="M:Howell.IO.BitStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="buffer">从中创建该流的无符号字节数组。</param>
            <param name="index">buffer 内的索引，流从此处开始。</param>
            <param name="count">流的长度（以字节为单位）。</param>
            <param name="writable">Howell.IO.BitStream.CanWrite 属性的设置，确定流是否支持写入。</param>
            <exception cref="T:System.ArgumentNullException">buffer 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index 或 count 小于零。</exception>
            <exception cref="T:System.ArgumentException">index 与 count 的和大于 buffer 的长度。</exception>
        </member>
        <member name="M:Howell.IO.BitStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,Howell.IO.ByteOrder)">
            <summary>
            
            </summary>
            <param name="buffer">从中创建该流的无符号字节数组。</param>
            <param name="index">buffer 内的索引，流从此处开始。</param>
            <param name="count">流的长度（以字节为单位）。</param>
            <param name="writable">Howell.IO.BitStream.CanWrite 属性的设置，确定流是否支持写入。</param>
            <param name="order">字节序</param>
            <exception cref="T:System.ArgumentNullException">buffer 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index 或 count 小于零。</exception>
            <exception cref="T:System.ArgumentException">index 与 count 的和大于 buffer 的长度。</exception>
        </member>
        <member name="M:Howell.IO.BitStream.#ctor(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="M:Howell.IO.BitStream.#ctor(System.IO.Stream,Howell.IO.ByteOrder)">
            <summary>
            
            </summary>
            <param name="stream">流</param>
            <param name="order">字节序</param>
        </member>
        <member name="M:Howell.IO.BitStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            将当前流中的位置设置为指定值。
            </summary>
            <param name="offset"> 流内的新位置。它是相对于 loc 参数的位置，而且可正可负。</param>
            <param name="origin">类型 System.IO.SeekOrigin 的值，它用作查找参考点。</param>
            <returns>流内的新位置，通过将初始参考点和偏移量合并计算而得。</returns>
        </member>
        <member name="M:Howell.IO.BitStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从当前流中读取字节块并将数据写入 buffer 中。
            </summary>
            <param name="buffer">当此方法返回时，包含指定的字节数组，该数组中从 offset 到 (offset + count -1) 之间的值由从当前流中读取的字符替换。</param>
            <param name="offset">buffer 中的字节偏移量，从此处开始读取。</param>
            <param name="count">最多读取的字节数。</param>
            <returns>写入缓冲区中的总字节数。如果当前可用字节数不到所请求的字节数，则这一总字节数可能小于所请求的字节数，或者如果在读取任何字节前已到达流的末尾，则为零。</returns>
        </member>
        <member name="M:Howell.IO.BitStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            使用从缓冲区读取的数据将字节块写入当前流。
            </summary>
            <param name="buffer">从中写入数据的缓冲区。</param>
            <param name="offset"> buffer 中的字节偏移量，从此处开始写入。</param>
            <param name="count">最多写入的字节数。</param>
        </member>
        <member name="M:Howell.IO.BitStream.ReadBit">
            <summary>
            从当前流中读取一个位。
            </summary>
            <returns> 强制转换为 System.Boolean  的位；或者如果已到达流的末尾，则为 null。</returns>
        </member>
        <member name="M:Howell.IO.BitStream.WriteBit(System.Boolean)">
            <summary>
            将一个位写入当前流中的当前位置。
            </summary>
            <param name="value">写入的位。</param>
        </member>
        <member name="M:Howell.IO.BitStream.Read(System.Boolean[],System.Int32,System.Int32)">
            <summary>
            从当前流中读取位块并将数据写入 buffer 中。
            </summary>
            <param name="buffer">当此方法返回时，包含指定的字节数组，该数组中从 offset 到 (offset + count -1) 之间的值由从当前流中读取的字符替换。</param>
            <param name="offset">buffer 中的字节偏移量，从此处开始读取。</param>
            <param name="count">最多读取的位数。</param>
            <returns>写入缓冲区中的总位数。如果当前可用字节数不到所请求的位数，则这一总位数可能小于所请求的位数，或者如果在读取任何位前已到达流的末尾，则为零。</returns>
        </member>
        <member name="M:Howell.IO.BitStream.Write(System.Boolean[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Howell.IO.BitStream.Flush">
            <summary>
            重写 System.IO.Stream.Flush() 以便不执行任何操作。
            </summary>
        </member>
        <member name="M:Howell.IO.BitStream.SetLength(System.Int64)">
            <summary>
            将当前流的长度设为指定值。
            </summary>
            <param name="value">值，通过该值设置长度。</param>
            <exception cref="T:System.NotSupportedException">当前流无法调整大小，而且 value 大于当前容量。- 或 -当前流不支持写入。</exception>
        </member>
        <member name="M:Howell.IO.BitStream.Close">
            <summary>
            关闭流
            </summary>
        </member>
        <member name="M:Howell.IO.BitStream.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Howell.IO.BitStream.ToArray">
            <summary>
            将流转换为数组
            </summary>
            <returns></returns>
        </member>
        <member name="P:Howell.IO.BitStream.CanRead">
            <summary>
            获取一个值，该值指示当前流是否支持读取。
            </summary>
            <returns>如果流是打开的，则为 true。</returns>
        </member>
        <member name="P:Howell.IO.BitStream.CanSeek">
            <summary>
            获取一个值，该值指示当前流是否支持查找。
            </summary>
            <returns>如果流是打开的，则为 true。</returns>
        </member>
        <member name="P:Howell.IO.BitStream.CanWrite">
            <summary>
            获取一个值，该值指示当前流是否支持写入。
            </summary>
            <returns>如果流支持写入，为 true；否则为 false。</returns>
        </member>
        <member name="P:Howell.IO.BitStream.Length">
            <summary>
             获取用字节表示的流长度。
            </summary>
            <returns>流的长度（以位为单位）。</returns>
        </member>
        <member name="P:Howell.IO.BitStream.Position">
            <summary>
            当在派生类中重写时，获取或设置当前流中的位置。
            </summary>
            <returns>流中的当前位置。</returns>
        </member>
        <member name="P:Howell.IO.BitStream.IsByteAligned">
            <summary>
            判断当期的位置是否是字节对齐位
            </summary>
        </member>
        <member name="T:Howell.Drawing.D2.CircleI">
            <summary>
            圆
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.CircleI.RegularExpressionString">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.CircleI.Empty">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:Howell.Drawing.D2.CircleI.#ctor(Howell.Drawing.D2.PointI,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="center">中心点</param>
            <param name="radius">半径</param>
        </member>
        <member name="M:Howell.Drawing.D2.CircleI.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="x">中心点X轴坐标</param>
            <param name="y">中心点Y轴坐标</param>
            <param name="radius">半径</param>
        </member>
        <member name="M:Howell.Drawing.D2.CircleI.Parse(System.String)">
            <summary>
            解析圆形的字符串形式
            </summary>
            <param name="value">字符串</param>
            <returns>如果解析成功，返回CircleI类型，否则将抛出异常</returns>
            <exception cref="T:System.FormatException">非法的字符串格式。</exception>
        </member>
        <member name="M:Howell.Drawing.D2.CircleI.ToString">
            <summary>
            获取圆形的字符串形式
            </summary>
            <returns>返回圆形字符串形式</returns>
        </member>
        <member name="M:Howell.Drawing.D2.CircleI.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:Howell.Drawing.D2.CircleI"/> equal to the specified one.
            </summary>
            <param name="obj">Another point to check equalty to.</param>
            <returns>Return <see langword="true"/> if objects are equal.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.CircleI.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            <returns>Returns the hash code for this instance.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.CircleI.op_Equality(Howell.Drawing.D2.CircleI,Howell.Drawing.D2.CircleI)">
            <summary>
            equals operator - checks if two ellipse is the same.
            </summary>
            <param name="c1">Circle object 1.</param>
            <param name="c2">Circle object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.CircleI.op_Inequality(Howell.Drawing.D2.CircleI,Howell.Drawing.D2.CircleI)">
            <summary>
            equals operator - checks if two ellipse is not the same.
            </summary>
            <param name="c1">CircleI object 1.</param>
            <param name="c2">CircleI object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.CircleI.op_Implicit(Howell.Drawing.D2.CircleI)~Howell.Drawing.D2.CircleD">
            <summary>
            隐式转换 CircleI To CircleD
            </summary>
            <param name="circle"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.CircleI.Equals(Howell.Drawing.D2.CircleI)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Howell.Drawing.D2.CircleI.X">
            <summary>
            中心点X轴坐标
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.CircleI.Y">
            <summary>
            中心点Y轴坐标
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.CircleI.Center">
            <summary>
            中心点
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.CircleI.Radius">
            <summary>
            半径
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.CircleI.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="T:Howell.Conditions.ValidatorExtensions">
            <summary>
            Extension methods for <see cref="T:Howell.Conditions.ConditionValidator`1"/>.
            </summary>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInRange(Howell.Conditions.ConditionValidator{System.Int16},System.Int16,System.Int16)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInRange(Howell.Conditions.ConditionValidator{System.Int16},System.Int16,System.Int16,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInRange(Howell.Conditions.ConditionValidator{System.Int16},System.Int16,System.Int16)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInRange(Howell.Conditions.ConditionValidator{System.Int16},System.Int16,System.Int16,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterThan(Howell.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterThan(Howell.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterThan(Howell.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterThan(Howell.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessThan(Howell.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessThan(Howell.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessThan(Howell.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessThan(Howell.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessOrEqual(Howell.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessOrEqual(Howell.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessOrEqual(Howell.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessOrEqual(Howell.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEqualTo(Howell.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEqualTo(Howell.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEqualTo(Howell.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEqualTo(Howell.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInRange(Howell.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.DateTime)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInRange(Howell.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.DateTime,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInRange(Howell.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.DateTime)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInRange(Howell.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.DateTime,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterThan(Howell.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterThan(Howell.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterThan(Howell.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterThan(Howell.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterOrEqual(Howell.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterOrEqual(Howell.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Howell.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Howell.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessThan(Howell.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessThan(Howell.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessThan(Howell.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessThan(Howell.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessOrEqual(Howell.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessOrEqual(Howell.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessOrEqual(Howell.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessOrEqual(Howell.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEqualTo(Howell.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEqualTo(Howell.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEqualTo(Howell.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEqualTo(Howell.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsTrue(Howell.Conditions.ConditionValidator{System.Boolean})">
            <summary>
            Checks whether the given value is <b>true</b>. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>false</b>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>false</b>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsTrue(Howell.Conditions.ConditionValidator{System.Boolean},System.String)">
            <summary>
            Checks whether the given value is <b>true</b>. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>false</b>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>false</b>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsTrue(Howell.Conditions.ConditionValidator{System.Nullable{System.Boolean}})">
            <summary>
            Checks whether the given value is <b>true</b>. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>false</b> or null, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>false</b> or null, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsTrue(Howell.Conditions.ConditionValidator{System.Nullable{System.Boolean}},System.String)">
            <summary>
            Checks whether the given value is <b>true</b>. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>false</b> or null, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>false</b> or null, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsFalse(Howell.Conditions.ConditionValidator{System.Boolean})">
            <summary>
            Checks whether the given value is <b>false</b>. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>true</b>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>true</b>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsFalse(Howell.Conditions.ConditionValidator{System.Boolean},System.String)">
            <summary>
            Checks whether the given value is <b>false</b>. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>true</b>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>true</b>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsFalse(Howell.Conditions.ConditionValidator{System.Nullable{System.Boolean}})">
            <summary>
            Checks whether the given value is <b>false</b>. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>true</b> or null, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>true</b> or null, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsFalse(Howell.Conditions.ConditionValidator{System.Nullable{System.Boolean}},System.String)">
            <summary>
            Checks whether the given value is <b>false</b>. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>true</b> or null, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>true</b> or null, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsOfType``1(Howell.Conditions.ConditionValidator{``0},System.Type)">
            <summary>
            Checks whether the <see cref="T:System.Type"/> of the given value is of <paramref name="type"/>.
            An exception is thrown otherwise.
            When the given value is a null reference, the check will always pass, regardless of the specified
            <paramref name="type"/>. Please use the <b>IsNotNull</b> method to check for null references).
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="type">The <see cref="T:System.Type"/> that will be used to perform the check.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not of the specified <paramref name="type"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not of the specified <paramref name="type"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsOfType``1(Howell.Conditions.ConditionValidator{``0},System.Type,System.String)">
            <summary>
            Checks whether the <see cref="T:System.Type"/> of the given value is of <paramref name="type"/>.
            An exception is thrown otherwise.
            When the given value is a null reference, the check will always pass, regardless of the specified
            <paramref name="type"/>. Please use the <b>IsNotNull</b> method to check for null references).
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="type">The <see cref="T:System.Type"/> that will be used to perform the check.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not of the specified <paramref name="type"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not of the specified <paramref name="type"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotOfType``1(Howell.Conditions.ConditionValidator{``0},System.Type)">
            <summary>
            Checks whether the <see cref="T:System.Type"/> of the given value is not of <paramref name="type"/>.
            An exception is thrown otherwise.
            When the given value is a null reference, the check will always pass, regardless of the specified
            <paramref name="type"/>. Please use the <b>IsNotNull</b> method to check for null references).
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="type">The <see cref="T:System.Type"/> that will be used to perform the check.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is of the specified <paramref name="type"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is of the specified <paramref name="type"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotOfType``1(Howell.Conditions.ConditionValidator{``0},System.Type,System.String)">
            <summary>
            Checks whether the <see cref="T:System.Type"/> of the given value is not of <paramref name="type"/>.
            An exception is thrown otherwise.
            When the given value is a null reference, the check will always pass, regardless of the specified
            <paramref name="type"/>. Please use the <b>IsNotNull</b> method to check for null references).
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="type">The <see cref="T:System.Type"/> that will be used to perform the check.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is of the specified <paramref name="type"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is of the specified <paramref name="type"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>      
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInRange(Howell.Conditions.ConditionValidator{System.Int32},System.Int32,System.Int32)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInRange(Howell.Conditions.ConditionValidator{System.Int32},System.Int32,System.Int32,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInRange(Howell.Conditions.ConditionValidator{System.Int32},System.Int32,System.Int32)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInRange(Howell.Conditions.ConditionValidator{System.Int32},System.Int32,System.Int32,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterThan(Howell.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterThan(Howell.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterThan(Howell.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterThan(Howell.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessThan(Howell.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessThan(Howell.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessThan(Howell.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessThan(Howell.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessOrEqual(Howell.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessOrEqual(Howell.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessOrEqual(Howell.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessOrEqual(Howell.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEqualTo(Howell.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEqualTo(Howell.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEqualTo(Howell.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEqualTo(Howell.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEmpty``1(Howell.Conditions.ConditionValidator{``0})">
            <summary>
            Checks whether the given value contains no elements. An exception is thrown otherwise. When the 
            value is a null reference it is considered empty.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEmpty``1(Howell.Conditions.ConditionValidator{``0},System.String)">
            <summary>
            Checks whether the given value contains no elements. An exception is thrown otherwise. When the 
            value is a null reference it is considered empty.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEmpty``1(Howell.Conditions.ConditionValidator{``0})">
            <summary>
            Checks whether the given value does contain elements. An exception is thrown otherwise. When the 
            value is a null reference it is considered empty.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEmpty``1(Howell.Conditions.ConditionValidator{``0},System.String)">
            <summary>
            Checks whether the given value does contain elements. An exception is thrown otherwise. When the 
            value is a null reference it is considered empty.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.Contains``2(Howell.Conditions.ConditionValidator{``0},``1)">
            <summary>
            Checks whether the given value contains the specified <paramref name="element"/>. An exception is 
            thrown otherwise. When the value is a null reference it is considered empty and therefore won't 
            contain <paramref name="element"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="element">The element that should contain the given value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.Contains``2(Howell.Conditions.ConditionValidator{``0},``1,System.String)">
            <summary>
            Checks whether the given value contains the specified <paramref name="element"/>. An exception is 
            thrown otherwise. When the value is a null reference it is considered empty and therefore won't 
            contain <paramref name="element"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="element">The element that should contain the given value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.Contains``1(Howell.Conditions.ConditionValidator{``0},System.Object)">
            <summary>
            Checks whether the given value contains the specified <paramref name="element"/>. An exception is 
            thrown otherwise. When the value is a null reference it is considered empty and therefore won't 
            contain <paramref name="element"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="element">The element that should contain the given value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.Contains``1(Howell.Conditions.ConditionValidator{``0},System.Object,System.String)">
            <summary>
            Checks whether the given value contains the specified <paramref name="element"/>. An exception is 
            thrown otherwise. When the value is a null reference it is considered empty and therefore won't 
            contain <paramref name="element"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="element">The element that should contain the given value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotContain``2(Howell.Conditions.ConditionValidator{``0},``1)">
            <summary>
            Checks whether the given value does not contain the specified <paramref name="element"/>. An 
            exception is thrown otherwise. When the value is a null reference it is considered empty and 
            therefore won't contain <paramref name="element"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="element">The element that should contain the given value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotContain``2(Howell.Conditions.ConditionValidator{``0},``1,System.String)">
            <summary>
            Checks whether the given value does not contain the specified <paramref name="element"/>. An 
            exception is thrown otherwise. When the value is a null reference it is considered empty and 
            therefore won't contain <paramref name="element"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="element">The element that should contain the given value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotContain``1(Howell.Conditions.ConditionValidator{``0},System.Object)">
            <summary>
            Checks whether the given value does not contain the specified <paramref name="element"/>. An 
            exception is thrown otherwise. When the value is a null reference it is considered empty and 
            therefore won't contain <paramref name="element"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="element">The element that should contain the given value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotContain``1(Howell.Conditions.ConditionValidator{``0},System.Object,System.String)">
            <summary>
            Checks whether the given value does not contain the specified <paramref name="element"/>. An 
            exception is thrown otherwise. When the value is a null reference it is considered empty and 
            therefore won't contain <paramref name="element"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="element">The element that should contain the given value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.ContainsAny``2(Howell.Conditions.ConditionValidator{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Checks whether the given value contains any of the specified <paramref name="elements"/>. An 
            exception is thrown otherwise. When the value is a null reference or an empty list it won't 
            contain any <paramref name="elements"/>. When the <paramref name="elements"/> list is null or 
            empty the collection is considered to not contain any element.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain any element of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain any element of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.ContainsAny``2(Howell.Conditions.ConditionValidator{``0},System.Collections.Generic.IEnumerable{``1},System.String)">
            <summary>
            Checks whether the given value contains any of the specified <paramref name="elements"/>. An 
            exception is thrown otherwise. When the value is a null reference or an empty list it won't 
            contain any <paramref name="elements"/>. When the <paramref name="elements"/> list is null or 
            empty the collection is considered to not contain any element.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain any element of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain any element of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.ContainsAny``1(Howell.Conditions.ConditionValidator{``0},System.Collections.IEnumerable)">
            <summary>
            Checks whether the given value contains any of the specified <paramref name="elements"/>. An 
            exception is thrown otherwise. When the value is a null reference or an empty list it won't 
            contain any <paramref name="elements"/>. When the <paramref name="elements"/> list is null or 
            empty the collection is considered to not contain any element.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain any element of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain any element of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.ContainsAny``1(Howell.Conditions.ConditionValidator{``0},System.Collections.IEnumerable,System.String)">
            <summary>
            Checks whether the given value contains any of the specified <paramref name="elements"/>. An 
            exception is thrown otherwise. When the value is a null reference or an empty list it won't 
            contain any <paramref name="elements"/>. When the <paramref name="elements"/> list is null or 
            empty the collection is considered to not contain any element.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain any element of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain any element of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotContainAny``2(Howell.Conditions.ConditionValidator{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Checks whether the given value does not contains any of the specified <paramref name="elements"/>.
            An exception is thrown otherwise.
            When the value is a null reference or an empty list it won't contain any <paramref name="elements"/>.
            When the <paramref name="elements"/> list is null or empty the collection is considered to not 
            contain any element.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain one or more elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain one or more elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotContainAny``2(Howell.Conditions.ConditionValidator{``0},System.Collections.Generic.IEnumerable{``1},System.String)">
            <summary>
            Checks whether the given value does not contains any of the specified <paramref name="elements"/>.
            An exception is thrown otherwise.
            When the value is a null reference or an empty list it won't contain any <paramref name="elements"/>.
            When the <paramref name="elements"/> list is null or empty the collection is considered to not 
            contain any element.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain one or more elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain one or more elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotContainAny``1(Howell.Conditions.ConditionValidator{``0},System.Collections.IEnumerable)">
            <summary>
            Checks whether the given value does not contains any of the specified <paramref name="elements"/>.
            An exception is thrown otherwise.
            When the value is a null reference or an empty list it won't contain any <paramref name="elements"/>.
            When the <paramref name="elements"/> list is null or empty the collection is considered to not 
            contain any element.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain one or more elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain one or more elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotContainAny``1(Howell.Conditions.ConditionValidator{``0},System.Collections.IEnumerable,System.String)">
            <summary>
            Checks whether the given value does not contains any of the specified <paramref name="elements"/>.
            An exception is thrown otherwise.
            When the value is a null reference or an empty list it won't contain any <paramref name="elements"/>.
            When the <paramref name="elements"/> list is null or empty the collection is considered to not 
            contain any element.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain one or more elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain one or more elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.ContainsAll``2(Howell.Conditions.ConditionValidator{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Checks whether the given value contains all of the specified <paramref name="elements"/>. An 
            exception is thrown otherwise. When the <paramref name="elements"/> collection is a null reference 
            or an empty list, the collection is considered to contain all of the specified (even if the value 
            itself is empty). When the given value is empty and the given <paramref name="elements"/> list 
            isn't, the collection is considered to not contain all of the specified <paramref name="elements"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.ContainsAll``2(Howell.Conditions.ConditionValidator{``0},System.Collections.Generic.IEnumerable{``1},System.String)">
            <summary>
            Checks whether the given value contains all of the specified <paramref name="elements"/>. An 
            exception is thrown otherwise. When the <paramref name="elements"/> collection is a null reference 
            or an empty list, the collection is considered to contain all of the specified (even if the value 
            itself is empty). When the given value is empty and the given <paramref name="elements"/> list 
            isn't, the collection is considered to not contain all of the specified <paramref name="elements"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.ContainsAll``1(Howell.Conditions.ConditionValidator{``0},System.Collections.IEnumerable)">
            <summary>
            Checks whether the given value contains all of the specified <paramref name="elements"/>. An 
            exception is thrown otherwise. When the <paramref name="elements"/> collection is a null reference 
            or an empty list, the collection is considered to contain all of the specified (even if the value 
            itself is empty). When the given value is empty and the given <paramref name="elements"/> list 
            isn't, the collection is considered to not contain all of the specified <paramref name="elements"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.ContainsAll``1(Howell.Conditions.ConditionValidator{``0},System.Collections.IEnumerable,System.String)">
            <summary>
            Checks whether the given value contains all of the specified <paramref name="elements"/>. An 
            exception is thrown otherwise. When the <paramref name="elements"/> collection is a null reference 
            or an empty list, the collection is considered to contain all of the specified (even if the value 
            itself is empty). When the given value is empty and the given <paramref name="elements"/> list 
            isn't, the collection is considered to not contain all of the specified <paramref name="elements"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotContainAll``2(Howell.Conditions.ConditionValidator{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Checks whether the given value does not contains all of the specified <paramref name="elements"/>.
            An exception is thrown otherwise. When the <paramref name="elements"/> collection is a null 
            reference or an empty list, the collection is considered to contain all of the specified (even if 
            the value itself is empty). When the given value is empty and the given <paramref name="elements"/>
            list isn't, the collection is considered to not contain all of the specified 
            <paramref name="elements"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain all of the elements of the specified <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the specified <paramref name="elements"/> list is null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain all of the elements of the specified <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotContainAll``2(Howell.Conditions.ConditionValidator{``0},System.Collections.Generic.IEnumerable{``1},System.String)">
            <summary>
            Checks whether the given value does not contains all of the specified <paramref name="elements"/>.
            An exception is thrown otherwise. When the <paramref name="elements"/> collection is a null 
            reference or an empty list, the collection is considered to contain all of the specified (even if 
            the value itself is empty). When the given value is empty and the given <paramref name="elements"/>
            list isn't, the collection is considered to not contain all of the specified 
            <paramref name="elements"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain all of the elements of the specified <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the specified <paramref name="elements"/> list is null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain all of the elements of the specified <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotContainAll``1(Howell.Conditions.ConditionValidator{``0},System.Collections.IEnumerable)">
            <summary>
            Checks whether the given value does not contains all of the specified <paramref name="elements"/>.
            An exception is thrown otherwise. When the <paramref name="elements"/> collection is a null 
            reference or an empty list, the collection is considered to contain all of the specified (even if 
            the value itself is empty). When the given value is empty and the given <paramref name="elements"/>
            list isn't, the collection is considered to not contain all of the specified 
            <paramref name="elements"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the specified <paramref name="elements"/> list is null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotContainAll``1(Howell.Conditions.ConditionValidator{``0},System.Collections.IEnumerable,System.String)">
            <summary>
            Checks whether the given value does not contains all of the specified <paramref name="elements"/>.
            An exception is thrown otherwise. When the <paramref name="elements"/> collection is a null 
            reference or an empty list, the collection is considered to contain all of the specified (even if 
            the value itself is empty). When the given value is empty and the given <paramref name="elements"/>
            list isn't, the collection is considered to not contain all of the specified 
            <paramref name="elements"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the specified <paramref name="elements"/> list is null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.HasLength``1(Howell.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the given value has the number of elements as specified by 
            <paramref name="numberOfElements"/>. An exception is thrown otherwise. When the value is a null 
            reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The number of elements the collection should contain.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain the number of elements as specified with the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while <paramref name="numberOfElements"/> is bigger than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain the number of elements as specified with the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.HasLength``1(Howell.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the given value has the number of elements as specified by 
            <paramref name="numberOfElements"/>. An exception is thrown otherwise. When the value is a null 
            reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The number of elements the collection should contain.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain the number of elements as specified with the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while <paramref name="numberOfElements"/> is bigger than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain the number of elements as specified with the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotHaveLength``1(Howell.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is different from the specified 
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is 
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The number of elements the collection should not contain.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain the number of elements as specified with the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> equals 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain the number of elements as specified with the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotHaveLength``1(Howell.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is different from the specified 
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is 
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The number of elements the collection should not contain.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain the number of elements as specified with the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> equals 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain the number of elements as specified with the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsShorterThan``1(Howell.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is less than the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain less elements than this value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is smaller or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsShorterThan``1(Howell.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is less than the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain less elements than this value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is smaller or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotShorterThan``1(Howell.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is not less than the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or more elements than this value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is greater or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotShorterThan``1(Howell.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is not less than the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or more elements than this value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is greater or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsShorterOrEqual``1(Howell.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is less than or equal to the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or less elements than this value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more elements than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is lass than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more elements than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsShorterOrEqual``1(Howell.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is less than or equal to the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or less elements than this value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more elements than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is lass than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more elements than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception> 
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotShorterOrEqual``1(Howell.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is not less than and not equals to the 
            specified <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the
            value is a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain more elements than this value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is greater or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotShorterOrEqual``1(Howell.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is not less than and not equals to the 
            specified <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the
            value is a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain more elements than this value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is greater or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception> 
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLongerThan``1(Howell.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is more than the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or less elements than this value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is greater or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLongerThan``1(Howell.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is more than the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or less elements than this value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is greater or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLongerThan``1(Howell.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is not more than the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or less elements than this value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more elements than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is smaller than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more elements than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLongerThan``1(Howell.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is not more than the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or less elements than this value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more elements than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is smaller than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more elements than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLongerOrEqual``1(Howell.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is more than or equal to the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or more elements than this value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is greater than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLongerOrEqual``1(Howell.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is more than or equal to the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or more elements than this value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is greater than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLongerOrEqual``1(Howell.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is not more than and not equal to the 
            specified <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the
            value is a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain less elements than this value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is smaller or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLongerOrEqual``1(Howell.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is not more than and not equal to the 
            specified <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the
            value is a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain less elements than this value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is smaller or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInRange(Howell.Conditions.ConditionValidator{System.Int64},System.Int64,System.Int64)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInRange(Howell.Conditions.ConditionValidator{System.Int64},System.Int64,System.Int64,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInRange(Howell.Conditions.ConditionValidator{System.Int64},System.Int64,System.Int64)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInRange(Howell.Conditions.ConditionValidator{System.Int64},System.Int64,System.Int64,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterThan(Howell.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterThan(Howell.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterThan(Howell.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterThan(Howell.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessThan(Howell.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessThan(Howell.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessThan(Howell.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessThan(Howell.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessOrEqual(Howell.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessOrEqual(Howell.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessOrEqual(Howell.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessOrEqual(Howell.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEqualTo(Howell.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEqualTo(Howell.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEqualTo(Howell.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEqualTo(Howell.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNull``1(Howell.Conditions.ConditionValidator{``0})">
            <summary>
            Checks whether the given value is null. An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNull``1(Howell.Conditions.ConditionValidator{``0},System.String)">
            <summary>
            Checks whether the given value is null. An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNull``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}})">
            <summary>
            Checks whether the given value is null. An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNull``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.String)">
            <summary>
            Checks whether the given value is null. An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotNull``1(Howell.Conditions.ConditionValidator{``0})">
            <summary>
            Checks whether the given value is not null. An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotNull``1(Howell.Conditions.ConditionValidator{``0},System.String)">
            <summary>
            Checks whether the given value is not null. An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotNull``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}})">
            <summary>
            Checks whether the given value is not null. An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotNull``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.String)">
            <summary>
            Checks whether the given value is not null. An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNaN(Howell.Conditions.ConditionValidator{System.Double})">
            <summary>
            Checks whether the given value is a valid number. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNaN(Howell.Conditions.ConditionValidator{System.Double},System.String)">
            <summary>
            Checks whether the given value is a valid number. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotNaN(Howell.Conditions.ConditionValidator{System.Double})">
            <summary>
            Checks whether the given value is a not valid number. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotNaN(Howell.Conditions.ConditionValidator{System.Double},System.String)">
            <summary>
            Checks whether the given value is a not valid number. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInfinity(Howell.Conditions.ConditionValidator{System.Double})">
            <summary>
            Checks whether the given value is infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInfinity(Howell.Conditions.ConditionValidator{System.Double},System.String)">
            <summary>
            Checks whether the given value is infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInfinity(Howell.Conditions.ConditionValidator{System.Double})">
            <summary>
            Checks whether the given value is not infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInfinity(Howell.Conditions.ConditionValidator{System.Double},System.String)">
            <summary>
            Checks whether the given value is not infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNegativeInfinity(Howell.Conditions.ConditionValidator{System.Double})">
            <summary>
            Checks whether the given value is negative infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNegativeInfinity(Howell.Conditions.ConditionValidator{System.Double},System.String)">
            <summary>
            Checks whether the given value is negative infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotNegativeInfinity(Howell.Conditions.ConditionValidator{System.Double})">
            <summary>
            Checks whether the given value is not negative infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotNegativeInfinity(Howell.Conditions.ConditionValidator{System.Double},System.String)">
            <summary>
            Checks whether the given value is not negative infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsPositiveInfinity(Howell.Conditions.ConditionValidator{System.Double})">
            <summary>
            Checks whether the given value is positive infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsPositiveInfinity(Howell.Conditions.ConditionValidator{System.Double},System.String)">
            <summary>
            Checks whether the given value is positive infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotPositiveInfinity(Howell.Conditions.ConditionValidator{System.Double})">
            <summary>
            Checks whether the given value is not positive infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotPositiveInfinity(Howell.Conditions.ConditionValidator{System.Double},System.String)">
            <summary>
            Checks whether the given value is not positive infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInRange(Howell.Conditions.ConditionValidator{System.Double},System.Double,System.Double)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInRange(Howell.Conditions.ConditionValidator{System.Double},System.Double,System.Double,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInRange(Howell.Conditions.ConditionValidator{System.Double},System.Double,System.Double)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInRange(Howell.Conditions.ConditionValidator{System.Double},System.Double,System.Double,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterThan(Howell.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterThan(Howell.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterThan(Howell.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterThan(Howell.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessThan(Howell.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessThan(Howell.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessThan(Howell.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessThan(Howell.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessOrEqual(Howell.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessOrEqual(Howell.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessOrEqual(Howell.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessOrEqual(Howell.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEqualTo(Howell.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEqualTo(Howell.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEqualTo(Howell.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEqualTo(Howell.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNullOrWhiteSpace(Howell.Conditions.ConditionValidator{System.String})">
            <summary>
            Checks whether the given value is <b>null</b> (Nothing in Visual Basic), empty, or consists only 
            of white-space characters.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not <b>null</b>, not empty and does not consists only of white-space characters, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not <b>null</b>, not empty and does not consists only of white-space characters, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNullOrWhiteSpace(Howell.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value is <b>null</b> (Nothing in Visual Basic), empty, or consists only 
            of white-space characters.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not <b>null</b>, not empty and does not consists only of white-space characters, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not <b>null</b>, not empty and does not consists only of white-space characters, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotNullOrWhiteSpace(Howell.Conditions.ConditionValidator{System.String})">
            <summary>
            Checks whether the given value is not <b>null</b> (Nothing in Visual Basic), not empty, and does 
            not consists only of white-space characters.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty or consists only of white-space characters, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the length of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>null</b>, empty or or consists only of white-space characters, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotNullOrWhiteSpace(Howell.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value is not <b>null</b> (Nothing in Visual Basic), not empty, and does 
            not consists only of white-space characters.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty or consists only of white-space characters, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the length of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>null</b>, empty or or consists only of white-space characters, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsShorterThan(Howell.Conditions.ConditionValidator{System.String},System.Int32)">
            <summary>
            Checks whether the given value is shorter in length than <paramref name="maxLength"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxLength">The smallest invalid length.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="maxLength"/> is smaller or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the length of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal <paramref name="maxLength"/> to, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsShorterThan(Howell.Conditions.ConditionValidator{System.String},System.Int32,System.String)">
            <summary>
            Checks whether the given value is shorter in length than <paramref name="maxLength"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxLength">The smallest invalid length.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="maxLength"/> is smaller or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the length of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal <paramref name="maxLength"/> to, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsShorterOrEqual(Howell.Conditions.ConditionValidator{System.String},System.Int32)">
            <summary>
            Checks whether the given value is shorter or equal in length than <paramref name="maxLength"/>. 
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxLength">The biggest valid length.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="maxLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="maxLength"/> is smaller than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the length of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="maxLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsShorterOrEqual(Howell.Conditions.ConditionValidator{System.String},System.Int32,System.String)">
            <summary>
            Checks whether the given value is shorter or equal in length than <paramref name="maxLength"/>. 
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxLength">The biggest valid length.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="maxLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="maxLength"/> is smaller than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the length of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="maxLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLongerThan(Howell.Conditions.ConditionValidator{System.String},System.Int32)">
            <summary>
            Checks whether the given value is longer in length than <paramref name="minLength"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minLength">The biggest invalid length.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="minLength"/> is greater or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the length of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLongerThan(Howell.Conditions.ConditionValidator{System.String},System.Int32,System.String)">
            <summary>
            Checks whether the given value is longer in length than <paramref name="minLength"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minLength">The biggest invalid length.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="minLength"/> is greater or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the length of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLongerOrEqual(Howell.Conditions.ConditionValidator{System.String},System.Int32)">
            <summary>
            Checks whether the given value is longer or equal in length than <paramref name="minLength"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minLength">The smallest valid length.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="minLength"/> is greater than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the length of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLongerOrEqual(Howell.Conditions.ConditionValidator{System.String},System.Int32,System.String)">
            <summary>
            Checks whether the given value is longer or equal in length than <paramref name="minLength"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minLength">The smallest valid length.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="minLength"/> is greater than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the length of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.HasLength(Howell.Conditions.ConditionValidator{System.String},System.Int32)">
            <summary>
            Checks whether the given value is equal in length to <paramref name="length"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="length">The valid length.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> un equals <paramref name="length"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="length"/> un equals 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the length of <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> un equals <paramref name="length"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.HasLength(Howell.Conditions.ConditionValidator{System.String},System.Int32,System.String)">
            <summary>
            Checks whether the given value is equal in length to <paramref name="length"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="length">The valid length.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> un equals <paramref name="length"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="length"/> un equals 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the length of <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> un equals <paramref name="length"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotHaveLength(Howell.Conditions.ConditionValidator{System.String},System.Int32)">
            <summary>
            Checks whether the given value is unequal in length to <paramref name="length"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="length">The invalid length.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> equals <paramref name="length"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="length"/> un equals 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the length of <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> equals <paramref name="length"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotHaveLength(Howell.Conditions.ConditionValidator{System.String},System.Int32,System.String)">
            <summary>
            Checks whether the given value is unequal in length to <paramref name="length"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="length">The invalid length.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> equals <paramref name="length"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="length"/> un equals 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the length of <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> equals <paramref name="length"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNullOrEmpty(Howell.Conditions.ConditionValidator{System.String})">
            <summary>
            Checks whether the given value is null or an <see cref="F:System.String.Empty"/> string.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNullOrEmpty(Howell.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value is null or an <see cref="F:System.String.Empty"/> string.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotNullOrEmpty(Howell.Conditions.ConditionValidator{System.String})">
            <summary>
            Checks whether the given value is not null and not an <see cref="F:System.String.Empty"/> string.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <see cref="F:System.String.Empty"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotNullOrEmpty(Howell.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value is not null and not an <see cref="F:System.String.Empty"/> string.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <see cref="F:System.String.Empty"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEmpty(Howell.Conditions.ConditionValidator{System.String})">
            <summary>
            Checks whether the given value is an <see cref="F:System.String.Empty"/> string. An exception is thrown 
            otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEmpty(Howell.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value is an <see cref="F:System.String.Empty"/> string. An exception is thrown 
            otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEmpty(Howell.Conditions.ConditionValidator{System.String})">
            <summary>
            Checks whether the given value is not an <see cref="F:System.String.Empty"/> string. An exception is thrown
            otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEmpty(Howell.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value is not an <see cref="F:System.String.Empty"/> string. An exception is thrown
            otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.StartsWith(Howell.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value starts with the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.StartsWith(Howell.Conditions.ConditionValidator{System.String},System.String,System.String)">
            <summary>
            Checks whether the given value starts with the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.StartsWith(Howell.Conditions.ConditionValidator{System.String},System.String,System.StringComparison)">
            <summary>
            Checks whether the given value starts with the specified <paramref name="value"/> using the
            specified <paramref name="comparisonType"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how 
            this string and value are compared</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.StartsWith(Howell.Conditions.ConditionValidator{System.String},System.String,System.StringComparison,System.String)">
            <summary>
            Checks whether the given value starts with the specified <paramref name="value"/> using the
            specified <paramref name="comparisonType"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how 
            this string and value are compared</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotStartWith(Howell.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value does not start with the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotStartWith(Howell.Conditions.ConditionValidator{System.String},System.String,System.String)">
            <summary>
            Checks whether the given value does not start with the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotStartWith(Howell.Conditions.ConditionValidator{System.String},System.String,System.StringComparison)">
            <summary>
            Checks whether the given value does not start with the specified <paramref name="value"/> using the
            specified comparison option.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how 
            this string and value are compared</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotStartWith(Howell.Conditions.ConditionValidator{System.String},System.String,System.StringComparison,System.String)">
            <summary>
            Checks whether the given value does not start with the specified <paramref name="value"/> using the
            specified comparison option.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how 
            this string and value are compared</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.Contains(Howell.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value contains the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> contains no null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.Contains(Howell.Conditions.ConditionValidator{System.String},System.String,System.String)">
            <summary>
            Checks whether the given value contains the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> contains no null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotContain(Howell.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value does not contain the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> and <paramref name="value"/> are both null references, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotContain(Howell.Conditions.ConditionValidator{System.String},System.String,System.String)">
            <summary>
            Checks whether the given value does not contain the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> and <paramref name="value"/> are both null references, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.EndsWith(Howell.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the end of the given value matches the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not end with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not end with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.EndsWith(Howell.Conditions.ConditionValidator{System.String},System.String,System.String)">
            <summary>
            Checks whether the end of the given value matches the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not end with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not end with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.EndsWith(Howell.Conditions.ConditionValidator{System.String},System.String,System.StringComparison)">
            <summary>
            Checks whether the end of the given value matches the specified <paramref name="value"/> using the
            specified comparison option.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how 
            this string and value are compared</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not end with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not end with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.EndsWith(Howell.Conditions.ConditionValidator{System.String},System.String,System.StringComparison,System.String)">
            <summary>
            Checks whether the end of the given value matches the specified <paramref name="value"/> using the
            specified comparison option.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how 
            this string and value are compared</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not end with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not end with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotEndWith(Howell.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the end of the given value does not match the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> ends with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> ends with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotEndWith(Howell.Conditions.ConditionValidator{System.String},System.String,System.String)">
            <summary>
            Checks whether the end of the given value does not match the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> ends with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> ends with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotEndWith(Howell.Conditions.ConditionValidator{System.String},System.String,System.StringComparison)">
            <summary>
            Checks whether the end of the given value does not match the specified <paramref name="value"/> 
            using the specified comparison option.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how 
            this string and value are compared</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> ends with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> ends with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.DoesNotEndWith(Howell.Conditions.ConditionValidator{System.String},System.String,System.StringComparison,System.String)">
            <summary>
            Checks whether the end of the given value does not match the specified <paramref name="value"/> 
            using the specified comparison option.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how 
            this string and value are compared</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> ends with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> ends with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.MatchPattern(Howell.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the value does match the specified <paramref name="pattern"/>  
            using the specified regular expressions.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="pattern">The regular expression is used to compare.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> matches <paramref name="pattern"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="pattern"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> matches <paramref name="pattern"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.MatchPattern(Howell.Conditions.ConditionValidator{System.String},System.String,System.String)">
            <summary>
            Checks whether the value does match the specified <paramref name="pattern"/>  
            using the specified regular expressions.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="pattern">The regular expression is used to compare.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> matches <paramref name="pattern"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="pattern"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> matches <paramref name="pattern"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.Evaluate``1(Howell.Conditions.ConditionValidator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Checks whether the specified <paramref name="expression"/> evaluates <b>true</b> on the given value.
            An exception is thrown otherwise.
            </summary>
            <remarks>
            This method will display a string representation of the specified <paramref name="expression"/>.
            Although it can therefore give a lot of useful information in the exception message, it the
            <paramref name="expression"/> has to be compiled on each
            call. Try using the other <see cref="M:Howell.Conditions.ValidatorExtensions.Evaluate``1(Howell.Conditions.ConditionValidator{``0},System.Boolean)"/>
            overload in performance sensitive parts of your program.
            </remarks>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">
            The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.
            </param>
            <param name="expression">
            The <see cref="T:System.Linq.Expressions.Expression`1"/> that will be compiled to an <see cref="T:System.Func`2"/> and 
            executed. When the expression is a null reference (Nothing in VB) it is considered to evaluate
            <b>false</b>.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="expression"/> evaluated false or is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="expression"/> evaluated false or is a null reference and the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <paramref name="expression"/> evaluated false or is a null reference and the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum"/> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <paramref name="expression"/> evaluated false or is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.Evaluate``1(Howell.Conditions.ConditionValidator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            Checks whether the specified <paramref name="expression"/> evaluates <b>true</b> on the given value.
            An exception is thrown otherwise.
            </summary>
            <remarks>
            This method will display a string representation of the specified <paramref name="expression"/>.
            Although it can therefore give a lot of useful information in the exception message, it the
            <paramref name="expression"/> has to be compiled on each
            call. Try using the other <see cref="M:Howell.Conditions.ValidatorExtensions.Evaluate``1(Howell.Conditions.ConditionValidator{``0},System.Boolean)"/>
            overload in performance sensitive parts of your program.
            </remarks>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">
            The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.
            </param>
            <param name="expression">
            The <see cref="T:System.Linq.Expressions.Expression`1"/> that will be compiled to an <see cref="T:System.Func`2"/> and 
            executed. When the expression is a null reference (Nothing in VB) it is considered to evaluate
            <b>false</b>.</param>
            <param name="conditionDescription">Describes the condition that should hold. i.e.: 'value should 
            be valid'. When the description contains a {0} marker, that marker will be replaced with the actual
            name of the parameter. The description will be used in the message of the thrown exception.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="expression"/> evaluated false or is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="expression"/> evaluated false or is a null reference and the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <paramref name="expression"/> evaluated false or is a null reference and the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum"/> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <paramref name="expression"/> evaluated false or is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.Evaluate``1(Howell.Conditions.ConditionValidator{``0},System.Boolean)">
            <summary>
            Checks whether the specified <paramref name="condition"/> equals <b>true</b>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="condition"><b>true</b> to prevent an <see cref="T:System.Exception"/> from being thrown; otherwise, false.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="condition"/> equals false, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="condition"/> equals false and the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <paramref name="condition"/> equals false and the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum"/> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <paramref name="condition"/> equals false, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.Evaluate``1(Howell.Conditions.ConditionValidator{``0},System.Boolean,System.String)">
            <summary>
            Checks whether the specified <paramref name="condition"/> equals <b>true</b>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="condition"><b>true</b> to prevent an <see cref="T:System.Exception"/> from being thrown; otherwise, false.</param>
            <param name="conditionDescription">Describes the condition that should hold. i.e.: 'value should 
            be valid'. When the description contains a {0} marker, that marker will be replaced with the actual
            name of the parameter. The description will be used in the message of the thrown exception.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="condition"/> equals false, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="condition"/> equals false and the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <paramref name="condition"/> equals false and the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum"/> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <paramref name="condition"/> equals false, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInRange(Howell.Conditions.ConditionValidator{System.Byte},System.Byte,System.Byte)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInRange(Howell.Conditions.ConditionValidator{System.Byte},System.Byte,System.Byte,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInRange(Howell.Conditions.ConditionValidator{System.Byte},System.Byte,System.Byte)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInRange(Howell.Conditions.ConditionValidator{System.Byte},System.Byte,System.Byte,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterThan(Howell.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterThan(Howell.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterThan(Howell.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterThan(Howell.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessThan(Howell.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessThan(Howell.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessThan(Howell.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessThan(Howell.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessOrEqual(Howell.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessOrEqual(Howell.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessOrEqual(Howell.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessOrEqual(Howell.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEqualTo(Howell.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEqualTo(Howell.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEqualTo(Howell.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEqualTo(Howell.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNaN(Howell.Conditions.ConditionValidator{System.Single})">
            <summary>
            Checks whether the given value is a valid number. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNaN(Howell.Conditions.ConditionValidator{System.Single},System.String)">
            <summary>
            Checks whether the given value is a valid number. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotNaN(Howell.Conditions.ConditionValidator{System.Single})">
            <summary>
            Checks whether the given value is a not valid number. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotNaN(Howell.Conditions.ConditionValidator{System.Single},System.String)">
            <summary>
            Checks whether the given value is a not valid number. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInfinity(Howell.Conditions.ConditionValidator{System.Single})">
            <summary>
            Checks whether the given value is infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInfinity(Howell.Conditions.ConditionValidator{System.Single},System.String)">
            <summary>
            Checks whether the given value is infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInfinity(Howell.Conditions.ConditionValidator{System.Single})">
            <summary>
            Checks whether the given value is not infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInfinity(Howell.Conditions.ConditionValidator{System.Single},System.String)">
            <summary>
            Checks whether the given value is not infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNegativeInfinity(Howell.Conditions.ConditionValidator{System.Single})">
            <summary>
            Checks whether the given value is negative infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNegativeInfinity(Howell.Conditions.ConditionValidator{System.Single},System.String)">
            <summary>
            Checks whether the given value is negative infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotNegativeInfinity(Howell.Conditions.ConditionValidator{System.Single})">
            <summary>
            Checks whether the given value is not negative infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotNegativeInfinity(Howell.Conditions.ConditionValidator{System.Single},System.String)">
            <summary>
            Checks whether the given value is not negative infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsPositiveInfinity(Howell.Conditions.ConditionValidator{System.Single})">
            <summary>
            Checks whether the given value is positive infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsPositiveInfinity(Howell.Conditions.ConditionValidator{System.Single},System.String)">
            <summary>
            Checks whether the given value is positive infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotPositiveInfinity(Howell.Conditions.ConditionValidator{System.Single})">
            <summary>
            Checks whether the given value is not positive infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotPositiveInfinity(Howell.Conditions.ConditionValidator{System.Single},System.String)">
            <summary>
            Checks whether the given value is not positive infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInRange(Howell.Conditions.ConditionValidator{System.Single},System.Single,System.Single)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInRange(Howell.Conditions.ConditionValidator{System.Single},System.Single,System.Single,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInRange(Howell.Conditions.ConditionValidator{System.Single},System.Single,System.Single)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInRange(Howell.Conditions.ConditionValidator{System.Single},System.Single,System.Single,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterThan(Howell.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterThan(Howell.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterThan(Howell.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterThan(Howell.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessThan(Howell.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessThan(Howell.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessThan(Howell.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessThan(Howell.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessOrEqual(Howell.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessOrEqual(Howell.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessOrEqual(Howell.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessOrEqual(Howell.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEqualTo(Howell.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEqualTo(Howell.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEqualTo(Howell.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEqualTo(Howell.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInRange``1(Howell.Conditions.ConditionValidator{``0},``0,``0)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInRange``1(Howell.Conditions.ConditionValidator{``0},``0,``0,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInRange``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.Nullable{``0})">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInRange``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInRange``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},``0,``0)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInRange``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},``0,``0,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInRange``1(Howell.Conditions.ConditionValidator{``0},``0,``0)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range and a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInRange``1(Howell.Conditions.ConditionValidator{``0},``0,``0,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range and a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInRange``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.Nullable{``0})">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range and a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range and an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInRange``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range and a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range and an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInRange``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},``0,``0)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range and a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInRange``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},``0,``0,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range and a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterThan``1(Howell.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/> and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterThan``1(Howell.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/> and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterThan``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterThan``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterThan``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterThan``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterThan``1(Howell.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/> and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterThan``1(Howell.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/> and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception> 
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterThan``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterThan``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception> 
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterThan``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterThan``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterOrEqual``1(Howell.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/> and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterOrEqual``1(Howell.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/> and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterOrEqual``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterOrEqual``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterOrEqual``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterOrEqual``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterOrEqual``1(Howell.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/> and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterOrEqual``1(Howell.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/> and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterOrEqual``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterOrEqual``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterOrEqual``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterOrEqual``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessThan``1(Howell.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessThan``1(Howell.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessThan``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessThan``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessThan``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessThan``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessThan``1(Howell.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessThan``1(Howell.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessThan``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessThan``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessThan``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessThan``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessOrEqual``1(Howell.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessOrEqual``1(Howell.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessOrEqual``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessOrEqual``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessOrEqual``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessOrEqual``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessOrEqual``1(Howell.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessOrEqual``1(Howell.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessOrEqual``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessOrEqual``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessOrEqual``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessOrEqual``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEqualTo``1(Howell.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEqualTo``1(Howell.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEqualTo``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEqualTo``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEqualTo``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEqualTo``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEqualTo``1(Howell.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> and the <paramref name="value"/> are both null references, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/> and are of type <see cref="T:System.Enum">Enum</see>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEqualTo``1(Howell.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> and the <paramref name="value"/> are both null references, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/> and are of type <see cref="T:System.Enum">Enum</see>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEqualTo``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> and the <paramref name="value"/> are both null references, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEqualTo``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> and the <paramref name="value"/> are both null references, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEqualTo``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEqualTo``1(Howell.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInRange(Howell.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.Decimal)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsInRange(Howell.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.Decimal,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInRange(Howell.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.Decimal)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotInRange(Howell.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.Decimal,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterThan(Howell.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterThan(Howell.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterThan(Howell.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterThan(Howell.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Howell.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessThan(Howell.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessThan(Howell.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessThan(Howell.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessThan(Howell.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessOrEqual(Howell.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsLessOrEqual(Howell.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessOrEqual(Howell.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotLessOrEqual(Howell.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEqualTo(Howell.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsEqualTo(Howell.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEqualTo(Howell.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Howell.Conditions.ValidatorExtensions.IsNotEqualTo(Howell.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Howell.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Howell.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Howell.Conditions.PostconditionException">Thrown when the <see cref="F:Howell.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="T:Howell.UnixTime">
            <summary>
            Unix 时间
            </summary>
        </member>
        <member name="F:Howell.UnixTime.Origin">
            <summary>
            起点时间
            </summary>
        </member>
        <member name="M:Howell.UnixTime.#ctor(System.DateTime)">
            <summary>
            构造
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Howell.UnixTime.#ctor(System.UInt32)">
            <summary>
            构造
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Howell.UnixTime.ToUInt32">
            <summary>
            ToUInt32
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.UnixTime.ToDateTime">
            <summary>
            转换为DateTime类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.UnixTime.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.UnixTime.CompareTo(Howell.UnixTime)">
            <summary>
            CompareTo
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.UnixTime.GetHashCode">
            <summary>
            GetHashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.UnixTime.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.UnixTime.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Howell.UnixTime.Now">
            <summary>
            现在的Unix时间
            </summary>
        </member>
        <member name="T:Howell.Text.RegularExpressions.RegexHelper">
            <summary>
            正则表达式工具
            </summary>
        </member>
        <member name="M:Howell.Text.RegularExpressions.RegexHelper.IsRegex(System.String,System.String)">
            <summary>
            验证是否符合正则表达式
            </summary>
            <param name="pattern">验证格式</param>
            <param name="input">输入待验证字符串</param>
            <returns>如果符合格式返回true,否则返回false</returns>
        </member>
        <member name="M:Howell.Text.RegularExpressions.RegexHelper.IsInteger(System.String)">
            <summary>
            判断字符串是可以符合整数类型的规则。
            </summary>
            <param name="value">字符串值。</param>
            <returns>返回是可以符合整数类型的规则。</returns>
        </member>
        <member name="M:Howell.Text.RegularExpressions.RegexHelper.IsFloat(System.String)">
            <summary>
            判断字符串是可以符合浮点数类型的规则。
            </summary>
            <param name="value">字符串值。</param>
            <returns>返回是可以符合浮点数类型的规则。</returns>
        </member>
        <member name="M:Howell.Text.RegularExpressions.RegexHelper.IsIPv4Address(System.String)">
            <summary>
            判断字符串是否可以符合IPv4Address的规则。
            </summary>
            <param name="value">字符串值。</param>
            <returns>返回是可以符合IPv4Address的规则。</returns>
        </member>
        <member name="M:Howell.Text.RegularExpressions.RegexHelper.IsIPv6Address(System.String)">
            <summary>
            判断字符串是否可以符合IPv6Address的规则。
            </summary>
            <param name="value">字符串值。</param>
            <returns>返回是可以符合IPv6Address的规则。</returns>
        </member>
        <member name="M:Howell.Text.RegularExpressions.RegexHelper.IsEmailAddress(System.String)">
            <summary>
            验证是否电子邮件地址
            </summary>
            <param name="value">字符串值。</param>
            <returns>返回是可以符合电子邮件地址的规则。</returns>
        </member>
        <member name="M:Howell.Text.RegularExpressions.RegexHelper.IsMobileNumber(System.String)">
            <summary>
            验证是否中国的手机号码。
            </summary>
            <param name="value">字符串值。</param>
            <returns>如果是返回true,否则返回false</returns>
        </member>
        <member name="M:Howell.Text.RegularExpressions.RegexHelper.IsChinaMobileNumber(System.String)">
            <summary>
            验证是否是中国移动的手机号码段
            </summary>
            <param name="value">字符串值。</param>
            <returns>如果是返回true,否则返回false</returns>
        </member>
        <member name="M:Howell.Text.RegularExpressions.RegexHelper.IsChinaUnicomNumber(System.String)">
            <summary>
            验证是否是中国联通的手机号码段
            </summary>
            <param name="value">字符串值。</param>
            <returns>如果是返回true,否则返回false</returns>
        </member>
        <member name="M:Howell.Text.RegularExpressions.RegexHelper.IsChinaTelecomNumber(System.String)">
            <summary>
            验证是否是中国电信的手机号码段
            </summary>
            <param name="value">字符串值。</param>
            <returns>如果是返回true,否则返回false</returns>
        </member>
        <member name="M:Howell.Text.RegularExpressions.RegexHelper.IsPhysicalAddress(System.String)">
            <summary>
            验证是否物理地址
            </summary>
            <param name="value">字符串值。</param>
            <returns>如果是返回true,否则返回false</returns>
        </member>
        <member name="T:Howell.Text.RegularExpressions.RegexHelper.Constants">
            <summary>
            正则表达式常量
            </summary>
        </member>
        <member name="F:Howell.Text.RegularExpressions.RegexHelper.Constants.Integer">
            <summary>
            整数的正则表达式
            </summary>
        </member>
        <member name="F:Howell.Text.RegularExpressions.RegexHelper.Constants.Float">
            <summary>
            Float正则表达式
            </summary>
        </member>
        <member name="F:Howell.Text.RegularExpressions.RegexHelper.Constants.IPv4Address">
            <summary>
            IPv4地址正则表达式
            </summary>
        </member>
        <member name="F:Howell.Text.RegularExpressions.RegexHelper.Constants.IPv6Address">
            <summary>
            IPv6地址正则表达式
            </summary>
        </member>
        <member name="F:Howell.Text.RegularExpressions.RegexHelper.Constants.EmailAddress">
            <summary>
            电子邮件地址正则表达式
            </summary>
        </member>
        <member name="F:Howell.Text.RegularExpressions.RegexHelper.Constants.MobileNumber">
            <summary>
            中国的手机号码正则表达式
            </summary>
        </member>
        <member name="F:Howell.Text.RegularExpressions.RegexHelper.Constants.ChinaMobileNumber">
            <summary>
            中国移动的手机号码正则表达式
            </summary>
        </member>
        <member name="F:Howell.Text.RegularExpressions.RegexHelper.Constants.ChinaUnicomNumber">
            <summary>
            中国联通的手机号码正则表达式
            </summary>
        </member>
        <member name="F:Howell.Text.RegularExpressions.RegexHelper.Constants.ChinaTelecomNumber">
            <summary>
            中国电信的手机号码正则表达式
            </summary>
        </member>
        <member name="F:Howell.Text.RegularExpressions.RegexHelper.Constants.PhysicalAddress">
            <summary>
            
            </summary>
        </member>
        <member name="T:Howell.Numeric.Intervals">
            <summary>
            数学术语 (区间)
            </summary>
        </member>
        <member name="F:Howell.Numeric.Intervals.None">
            <summary>
            全开区间
            </summary>
        </member>
        <member name="F:Howell.Numeric.Intervals.LeftClosed">
            <summary>
            左区间闭合
            </summary>
        </member>
        <member name="F:Howell.Numeric.Intervals.RightClosed">
            <summary>
            右区间闭合
            </summary>
        </member>
        <member name="T:Howell.Math.Algorithm.LineAlgorithm">
            <summary>
            线段计算
            </summary>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.MidPoint(Howell.Drawing.D2.LineD)">
            <summary>
            计算线段L的中点 
            </summary>
            <param name="L">线段L</param>
            <returns>返回线段L的中点</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.MidPoint(Howell.Drawing.D2.LineI)">
            <summary>
            计算线段L的中点 
            </summary>
            <param name="L">线段L</param>
            <returns>返回线段L的中点</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.Position(Howell.Drawing.D2.LineD,Howell.Drawing.D2.PointD)">
            <summary>
            判断点与线的位置
            </summary>
            <param name="L">L线</param>
            <param name="R">R点</param>
            <returns>返回偏转方向</returns>
            <remarks>
            假设L线的是 P->Q PQ为线的2个顶点
            返回值 大于 0 , 则PQ在R点拐向右侧后得到QR,等同于点R在PQ线段的右侧
            返回值 小于 0 , 则PQ在R点拐向左侧后得到QR,等同于点R在PQ线段的左侧
            返回值 等于 0 , 则P,Q,R三点共线。
            </remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.Position(Howell.Drawing.D2.LineI,Howell.Drawing.D2.PointI)">
            <summary>
            判断折线的偏转方向/线段拐向
            </summary>
            <param name="L">L线段</param>
            <param name="R">R点</param>
            <returns>返回偏转方向</returns>
            <remarks>
            假设L线的是 P->Q PQ为线的2个顶点
            返回值 大于 0 , 则PQ在R点拐向右侧后得到QR,等同于点R在PQ线段的右侧
            返回值 小于 0 , 则PQ在R点拐向左侧后得到QR,等同于点R在PQ线段的左侧
            返回值 等于 0 , 则P,Q,R三点共线。
            </remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.Position(Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD)">
            <summary>
            判断点与线的位置
            </summary>
            <param name="P">P点</param>
            <param name="Q">Q点</param>
            <param name="R">R点</param>
            <returns>返回偏转方向</returns>
            <remarks>
            假设L线的是 P->Q PQ为线的2个顶点
            返回值 大于 0 , 则PQ在R点拐向右侧后得到QR,等同于点R在PQ线段的右侧
            返回值 小于 0 , 则PQ在R点拐向左侧后得到QR,等同于点R在PQ线段的左侧
            返回值 等于 0 , 则P,Q,R三点共线。
            </remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.Position(Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI)">
            <summary>
            判断点与线的位置
            </summary>
            <param name="P">P点</param>
            <param name="Q">Q点</param>
            <param name="R">R点</param>
            <returns>返回偏转方向</returns>
            <remarks>
            假设L线的是 P->Q PQ为线的2个顶点
            返回值 大于 0 , 则PQ在R点拐向右侧后得到QR,等同于点R在PQ线段的右侧
            返回值 小于 0 , 则PQ在R点拐向左侧后得到QR,等同于点R在PQ线段的左侧
            返回值 等于 0 , 则P,Q,R三点共线。
            </remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.Position(Howell.Drawing.D2.LineD,Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD)">
            <summary>
            判断点是否在线段的两侧
            </summary>
            <param name="L">L线</param>
            <param name="P1">P1点</param>
            <param name="P2">P2点</param>
            <returns>返回P1/P2与点的位置关系</returns>
            <remarks>
            返回值 小于 0 则点 P1，P2 在线段L的两侧
            返回值 等于 0 则表示点P1,P2至少有一个点与线段L共线
            返回值 大于 0 则点 P1，P2 在线段L的同侧
            </remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.Position(Howell.Drawing.D2.LineI,Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI)">
            <summary>
            判断点是否在线段的两侧
            </summary>
            <param name="L">L线</param>
            <param name="P1">P1点</param>
            <param name="P2">P2点</param>
            <returns>返回P1/P2与点的位置关系</returns>
            <remarks>
            返回值 小于 0 则点 P1，P2 在线段L的两侧
            返回值 等于 0 则表示点P1,P2至少有一个点与线段L共线
            返回值 大于 0 则点 P1，P2 在线段L的同侧
            </remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.Gradient(Howell.Drawing.D2.LineD)">
            <summary>
            计算线段的倾斜率 
            </summary>
            <param name="L">线段L</param>
            <returns>返回倾斜率</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.Gradient(Howell.Drawing.D2.LineI)">
            <summary>
            计算线段的倾斜率 (-null,null]
            </summary>
            <param name="L">线段L</param>
            <returns>返回倾斜率</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.OnLine(Howell.Drawing.D2.LineD,Howell.Drawing.D2.PointD)">
            <summary>
            判断点是否在线上
            </summary>
            <param name="L">线L</param>
            <param name="P">点P</param>
            <returns>返回True表示在线段上，否则返回False。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.OnLine(Howell.Drawing.D2.LineI,Howell.Drawing.D2.PointI)">
            <summary>
            判断点是否在线上
            </summary>
            <param name="L">线L</param>
            <param name="P">点P</param>
            <returns>返回True表示在线段上，否则返回False。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.HasIntersection(Howell.Drawing.D2.LineD,Howell.Drawing.D2.LineD)">
            <summary>
            判断L1与L2是否相交
            </summary>
            <param name="L1">线段L1</param>
            <param name="L2">线段L2</param>
            <returns>线段相交返回交点数目,否则返回0,如果有无数个交点则返回null.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.HasIntersection(Howell.Drawing.D2.LineI,Howell.Drawing.D2.LineI)">
            <summary>
            判断L1与L2是否相交
            </summary>
            <param name="L1">线段L1</param>
            <param name="L2">线段L2</param>
            <returns>线段相交返回交点数目,否则返回0,如果有无数个交点则返回null.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.HasIntersection(Howell.Drawing.D2.LineD,Howell.Drawing.D2.RectangleD)">
            <summary>
            判断线段与矩形的交点个数
            </summary>
            <param name="L">线段L</param>
            <param name="R">线段R</param>
            <returns>相交返回交点数目,否则返回0,如果有无数个交点则返回null</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.HasIntersection(Howell.Drawing.D2.LineI,Howell.Drawing.D2.RectangleI)">
            <summary>
            判断线段与矩形的交点个数
            </summary>
            <param name="L">线段L</param>
            <param name="R">线段R</param>
            <returns>相交返回交点数目,否则返回0,如果有无数个交点则返回null</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.HasIntersection(Howell.Drawing.D2.LineD,Howell.Drawing.D2.PolylineD)">
            <summary>
            判断折线PL与线段L的交点个数
            </summary>
            <param name="L">线段L</param>
            <param name="PL">折线PL</param>
            <returns>相交返回交点数目,否则返回0</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.HasIntersection(Howell.Drawing.D2.LineI,Howell.Drawing.D2.PolylineI)">
            <summary>
            判断折线PL与线段L的交点个数
            </summary>
            <param name="L">线段L</param>
            <param name="PL">折线PL</param>
            <returns>相交返回交点数目,否则返回0</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.HasIntersection(Howell.Drawing.D2.LineD,Howell.Drawing.D2.PolygonD)">
            <summary>
            判断多边形PG与线段L的交点个数
            </summary>
            <param name="L">线段L</param>
            <param name="PG">多边形PG</param>
            <returns>相交返回交点数目,否则返回0</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.HasIntersection(Howell.Drawing.D2.LineI,Howell.Drawing.D2.PolygonI)">
            <summary>
            判断多边形PG与线段L的交点个数
            </summary>
            <param name="L">线段L</param>
            <param name="PG">多边形PG</param>
            <returns>相交返回交点数目,否则返回0</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.HasIntersection(Howell.Drawing.D2.LineD,Howell.Drawing.D2.CircleD)">
            <summary>
            判断线段L与圆C的交点个数
            </summary>
            <param name="L">线段L</param>
            <param name="C">圆形C</param>
            <returns>相交返回交点数目,否则返回0</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.HasIntersection(Howell.Drawing.D2.LineI,Howell.Drawing.D2.CircleI)">
            <summary>
            判断线段L与圆C的交点个数
            </summary>
            <param name="L">线段L</param>
            <param name="C">圆形C</param>
            <returns>相交返回交点数目,否则返回0</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.Intersection(Howell.Drawing.D2.LineD,Howell.Drawing.D2.LineD)">
            <summary>
            获取两线段的交点
            </summary>
            <param name="L1">线段L1</param>
            <param name="L2">线段L2</param>
            <returns>如果线段相交返回交点，如果有无数个交点则返回null.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.Intersection(Howell.Drawing.D2.LineI,Howell.Drawing.D2.LineI)">
            <summary>
            获取两线段的交点
            </summary>
            <param name="L1">线段L1</param>
            <param name="L2">线段L2</param>
            <returns>如果线段相交返回交点，如果有无数个交点则返回null.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.Intersection(Howell.Drawing.D2.LineD,Howell.Drawing.D2.RectangleD)">
            <summary>
            获取线段L与矩形R的交点集合
            </summary>
            <param name="L">线段L</param>
            <param name="R">矩形R</param>
            <returns>返回交点集合，如果有无数个交点则返回null.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.Intersection(Howell.Drawing.D2.LineI,Howell.Drawing.D2.RectangleI)">
            <summary>
            获取线段L与矩形R的交点集合
            </summary>
            <param name="L">线段L</param>
            <param name="R">矩形R</param>
            <returns>返回交点集合，如果有无数个交点则返回null.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.Intersection(Howell.Drawing.D2.LineD,Howell.Drawing.D2.PolylineD)">
            <summary>
            获取线段L与折线PL的交点集合
            </summary>
            <param name="L">线段L</param>
            <param name="PL">折线PL</param>
            <returns>返回交点集合，如果有无数个交点则返回null.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.Intersection(Howell.Drawing.D2.LineI,Howell.Drawing.D2.PolylineI)">
            <summary>
            获取线段L与折线PL的交点集合
            </summary>
            <param name="L">线段L</param>
            <param name="PL">折线PL</param>
            <returns>返回交点集合，如果有无数个交点则返回null.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.Intersection(Howell.Drawing.D2.LineD,Howell.Drawing.D2.PolygonD)">
            <summary>
            获取线段L与多边形PG的交点集合
            </summary>
            <param name="L">线段L</param>
            <param name="PG">多边形PG</param>
            <returns>返回交点集合，如果有无数个交点则返回null.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.Intersection(Howell.Drawing.D2.LineI,Howell.Drawing.D2.PolygonI)">
            <summary>
            获取线段L与多边形PG的交点集合
            </summary>
            <param name="L">线段L</param>
            <param name="PG">多边形PG</param>
            <returns>返回交点集合，如果有无数个交点则返回null.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.Intersection(Howell.Drawing.D2.LineD,Howell.Drawing.D2.CircleD)">
            <summary>
            获取线段L与圆C的交点集合
            </summary>
            <param name="L">线段L</param>
            <param name="C">圆C</param>
            <returns>返回交点集合.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.Intersection(Howell.Drawing.D2.LineI,Howell.Drawing.D2.CircleI)">
            <summary>
            获取线段L与圆C的交点集合
            </summary>
            <param name="L">线段L</param>
            <param name="C">圆C</param>
            <returns>返回交点集合.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.Offset(Howell.Drawing.D2.LineD,Howell.Drawing.D2.PointD)">
            <summary>
            计算偏移后的线段
            </summary>
            <param name="L">线段L</param>
            <param name="velocity">偏移速度</param>
            <returns>返回偏移后的线段</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.Offset(Howell.Drawing.D2.LineI,Howell.Drawing.D2.PointI)">
            <summary>
            计算偏移后的线段
            </summary>
            <param name="L">线段L</param>
            <param name="velocity">偏移速度</param>
            <returns>返回偏移后的线段</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.IncludedAngle(Howell.Drawing.D2.LineD)">
            <summary>
            计算线段L与X轴的夹角
            </summary>
            <param name="L">线段L</param>
            <returns>返回夹角弧度</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.IncludedAngle(Howell.Drawing.D2.LineI)">
            <summary>
            计算线段L与X轴的夹角
            </summary>
            <param name="L">线段L</param>
            <returns>返回夹角弧度</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.IncludedAngle(Howell.Drawing.D2.LineD,Howell.Drawing.D2.LineD)">
            <summary>
            计算两线段所在直线的夹角
            </summary>
            <param name="L1">线段L1</param>
            <param name="L2">线段L2</param>
            <returns>返回夹角</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.LineAlgorithm.IncludedAngle(Howell.Drawing.D2.LineI,Howell.Drawing.D2.LineI)">
            <summary>
            计算两线段所在直线的夹角
            </summary>
            <param name="L1">线段L1</param>
            <param name="L2">线段L2</param>
            <returns>返回夹角</returns>
        </member>
        <member name="T:Howell.Cryptography.DESPassword">
            <summary>
            DES对称加密Password
            </summary>
        </member>
        <member name="M:Howell.Cryptography.DESPassword.#ctor(System.Byte[],System.Byte[])">
            <summary>
            构造
            </summary>
            <param name="rgbKey">DES加密算法密钥</param>
            <param name="rgbIV">DES加密算法的初始化向量</param>
        </member>
        <member name="M:Howell.Cryptography.DESPassword.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Cryptography.DESPassword.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Howell.Cryptography.DESPassword.Key">
            <summary>
            DES加密算法密钥
            </summary>
        </member>
        <member name="P:Howell.Cryptography.DESPassword.IV">
            <summary>
            DES加密算法的初始化向量 (8字节)
            </summary>
        </member>
        <member name="T:Howell.Cryptography.CRC16Algorithm">
            <summary>
            CRC16类型
            </summary>
        </member>
        <member name="F:Howell.Cryptography.CRC16Algorithm.CRC16">
            <summary>
            标准 CRC16校验 (x16 + x15 + x2 + 1)
            </summary>
        </member>
        <member name="F:Howell.Cryptography.CRC16Algorithm.CRC16_MODBUS">
            <summary>
            MODBUS CRC16校验 (x16 + x15 + x2 + 1)
            </summary>
        </member>
        <member name="F:Howell.Cryptography.CRC16Algorithm.CRC16_SICK">
            <summary>
            SICK CRC16校验
            </summary>
        </member>
        <member name="F:Howell.Cryptography.CRC16Algorithm.CRC16_CCITT_0000">
            <summary>
            CCITT CRC16校验 (x16 + x12 + x5 + 1)
            </summary>
        </member>
        <member name="F:Howell.Cryptography.CRC16Algorithm.CRC16_CCITT_FFFF">
            <summary>
            CCITT CRC16校验 (x16 + x12 + x5 + 1)
            </summary>
        </member>
        <member name="F:Howell.Cryptography.CRC16Algorithm.CRC16_CCITT_1D0F">
            <summary>
            CCITT CRC16校验 (x16 + x12 + x5 + 1)
            </summary>
        </member>
        <member name="F:Howell.Cryptography.CRC16Algorithm.CRC16_CCITT_KERMIT">
            <summary>
            KERMIT CRC16校验
            </summary>
        </member>
        <member name="F:Howell.Cryptography.CRC16Algorithm.CRC16_DNP">
            <summary>
            DNP CRC16校验 (x16 + x13 + x12 + x11 + x10 + x8 + x6 + x5 + x2 + 1)
            </summary>
        </member>
        <member name="T:Howell.Cryptography.CRC16">
            <summary>Implements a 16-bits cyclic redundancy check (CRC) hash algorithm.</summary>
            <remarks>This class is not intended to be used for security purposes. For security applications use MD5, SHA1, SHA256, SHA384, 
            or SHA512 in the System.Security.Cryptography namespace.</remarks>
        </member>
        <member name="M:Howell.Cryptography.CRC16.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Howell.Cryptography.CRC16.#ctor(Howell.Cryptography.CRC16Algorithm)">
            <summary>
            构造函数
            </summary>
            <param name="algorithm">算法</param>
        </member>
        <member name="M:Howell.Cryptography.CRC16.Compute(System.Byte[])">
            <summary>
            计算CRC16校验值
            </summary>
            <param name="buffer">校验数据</param>
            <returns>返回校验结果</returns>
        </member>
        <member name="M:Howell.Cryptography.CRC16.Compute(System.Byte[],System.Int32,System.Int32)">
            <summary>
            计算CRC16校验值
            </summary>
            <param name="buffer">校验数据</param>
            <param name="offset">数据偏移</param>
            <param name="count">数据数目</param>
            <returns>返回校验结果</returns>
        </member>
        <member name="M:Howell.Cryptography.CRC16.Compute(System.String)">
            <summary>
            计算CRC16校验值
            </summary>
            <param name="s">校验字符串</param>
            <returns>返回校验结果</returns>
        </member>
        <member name="M:Howell.Cryptography.CRC16.Dispose">
            <summary>
            销毁
            </summary>
        </member>
        <member name="P:Howell.Cryptography.CRC16.Algorithm">
            <summary>
            CRC16算法
            </summary>
        </member>
        <member name="T:Howell.Capability.FloatCap">
            <summary>
            Single 能力
            </summary>
        </member>
        <member name="T:Howell.Capability.Capabilities">
            <summary>
            类型能力
            </summary>
        </member>
        <member name="M:Howell.Capability.Capabilities.#ctor">
            <summary>
            创建Capabilities对象
            </summary>
        </member>
        <member name="M:Howell.Capability.Capabilities.#ctor(Howell.Capability.Capabilities)">
            <summary>
            Constructor
            </summary>
            <param name="val">拷贝构造对象</param>
        </member>
        <member name="P:Howell.Capability.Capabilities.AnyAttr">
            <summary>
            Any属性
            </summary>
        </member>
        <member name="P:Howell.Capability.Capabilities.def">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:Howell.Capability.Capabilities.defSpecified">
            <summary>
            是否包含def XML属性
            </summary>
        </member>
        <member name="P:Howell.Capability.Capabilities.dynamic">
            <summary>
            动态
            </summary>
        </member>
        <member name="P:Howell.Capability.Capabilities.dynamicSpecified">
            <summary>
            是否包含dynamic XML属性
            </summary>
        </member>
        <member name="P:Howell.Capability.Capabilities.max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="P:Howell.Capability.Capabilities.maxSpecified">
            <summary>
            是否包含max XML属性
            </summary>
        </member>
        <member name="P:Howell.Capability.Capabilities.min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:Howell.Capability.Capabilities.minSpecified">
            <summary>
            是否包含min XML属性
            </summary>
        </member>
        <member name="P:Howell.Capability.Capabilities.opt">
            <summary>
            可能的数值选项
            </summary>
        </member>
        <member name="P:Howell.Capability.Capabilities.optSpecified">
            <summary>
            是否包含opt XML属性
            </summary>
        </member>
        <member name="P:Howell.Capability.Capabilities.range">
            <summary>
            数值范围
            </summary>
        </member>
        <member name="P:Howell.Capability.Capabilities.rangeSpecified">
            <summary>
            是否包含range XML属性
            </summary>
        </member>
        <member name="P:Howell.Capability.Capabilities.reqReboot">
            <summary>
            设置属性是否需要重启
            </summary>
        </member>
        <member name="P:Howell.Capability.Capabilities.reqRebootSpecified">
            <summary>
            是否包含reqReboot XML属性
            </summary>
        </member>
        <member name="P:Howell.Capability.Capabilities.size">
            <summary>
            size
            </summary>
        </member>
        <member name="P:Howell.Capability.Capabilities.sizeSpecified">
            <summary>
            是否包含size XML属性
            </summary>
        </member>
        <member name="P:Howell.Capability.Capabilities.options">
            <summary>
            数值 
            </summary>
            <remarks>如果没有给出选项则返回null，否则返回字符串数组。</remarks>
        </member>
        <member name="M:Howell.Capability.FloatCap.op_Implicit(Howell.Capability.FloatCap)~System.Double">
            <summary>
            隐式转换
            </summary>
            <param name="val">转换对象</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Howell.Capability.FloatCap.op_Explicit(System.Double)~Howell.Capability.FloatCap">
            <summary>
            显式转换
            </summary>
            <param name="val">转换对象</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Howell.Capability.FloatCap.#ctor">
            <summary>
            创建 FloatCap对象
            </summary>
        </member>
        <member name="M:Howell.Capability.FloatCap.#ctor(System.Double)">
            <summary>
            创建 FloatCap对象
            </summary>
            <param name="val">数值</param>
        </member>
        <member name="M:Howell.Capability.FloatCap.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns>返回字符串。</returns>
        </member>
        <member name="P:Howell.Capability.FloatCap.Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="P:Howell.Capability.FloatCap.TextSpecified">
            <summary>
            是否包含Text XML属性
            </summary>
        </member>
        <member name="P:Howell.Capability.FloatCap.Text">
            <summary>
            文本内容
            </summary>
        </member>
        <member name="T:Howell.Capability.EnumStringCap">
            <summary>
            String 能力
            </summary>
        </member>
        <member name="M:Howell.Capability.EnumStringCap.op_Implicit(Howell.Capability.EnumStringCap)~System.String">
            <summary>
            隐式转换
            </summary>
            <param name="val">转换对象</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Howell.Capability.EnumStringCap.#ctor(System.String,System.String,System.String[])">
            <summary>
            创建 EnumStringCap对象
            </summary>
            <param name="val"></param>
            <param name="def"></param>
            <param name="options"></param>
        </member>
        <member name="M:Howell.Capability.EnumStringCap.#ctor(Howell.Capability.EnumStringCap)">
            <summary>
            拷贝构造
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Howell.Capability.EnumStringCap.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns>返回字符串。</returns>
        </member>
        <member name="P:Howell.Capability.EnumStringCap.Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="P:Howell.Capability.EnumStringCap.TextSpecified">
            <summary>
            是否包含Text XML属性
            </summary>
        </member>
        <member name="P:Howell.Capability.EnumStringCap.Text">
            <summary>
            文本内容
            </summary>
        </member>
        <member name="T:Howell.Time.ISO8601DateTimeFormats">
            <summary>
            ISO8601 日期和时间格式
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601DateTimeFormats.BasicCalendarDateAndLocalTime">
            <summary>
            基本日历日期和基本时间格式
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601DateTimeFormats.ExtendedCalendarDateAndLocalTime">
            <summary>
            扩展日历日期和基本时间格式
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601DateTimeFormats.BasicOrdinalDateAndUTCTime">
            <summary>
            基本序列日期和UTC时间格式
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601DateTimeFormats.ExtendedOrdinalDateAndUTCTime">
            <summary>
            扩展序列日期和UTC时间格式
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601DateTimeFormats.BasicWeekDateAndLocalTime">
            <summary>
            基本周日期和基本时间格式
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601DateTimeFormats.ExtendedWeekDateAndLocalTime">
            <summary>
            扩展周日期和时间格式
            </summary>
        </member>
        <member name="T:Howell.Time.ISO8601DateTime">
            <summary>
            ISO8601标准的日期和时间组合
            </summary>
        </member>
        <member name="M:Howell.Time.ISO8601DateTime.#ctor(System.DateTime)">
            <summary>
            创建ISO8601DateTime对象
            </summary>
            <param name="datetime">日期和时间数据</param>
        </member>
        <member name="M:Howell.Time.ISO8601DateTime.#ctor(System.DateTime,Howell.Time.ISO8601DateTimeFormats)">
            <summary>
            创建ISO8601DateTime对象
            </summary>
            <param name="datetime">日期和时间数据</param>
            <param name="format">格式化方式</param>
        </member>
        <member name="M:Howell.Time.ISO8601DateTime.Parse(System.String)">
            <summary>
            解析日期和时间字符串
            </summary>
            <param name="s">日期和时间字符串</param>
            <returns>返回ISO8601DateTime实例</returns>
        </member>
        <member name="M:Howell.Time.ISO8601DateTime.TryParse(System.String,Howell.Time.ISO8601DateTime@)">
            <summary>
            尝试解析日期和时间字符串
            </summary>
            <param name="s">日期和时间字符串</param>
            <param name="datetime">输出ISO8601DateTime实例</param>
            <returns>解析成功返回true,失败返回false.</returns>
        </member>
        <member name="M:Howell.Time.ISO8601DateTime.Match2DateTime(System.Text.RegularExpressions.Match,Howell.Time.ISO8601DateTimeFormats)">
            <summary>
            Regular.Match Group 2 DateTime
            </summary>
            <param name="m">Regular.Match</param>
            <param name="format">ISO8601DateTimeFormats</param>
            <returns>return DateTime</returns>
        </member>
        <member name="M:Howell.Time.ISO8601DateTime.ToString">
            <summary>
            转换为ISO8601规范的日期和时间字符串 默认格式YYYYMMDDThhmmss
            </summary>
            <returns>返回ISO8601规范的日期和时间字符串</returns>
        </member>
        <member name="P:Howell.Time.ISO8601DateTime.Value">
            <summary>
            日期和时间数值
            </summary>
        </member>
        <member name="P:Howell.Time.ISO8601DateTime.Format">
            <summary>
            日期和时间格式
            </summary>
        </member>
        <member name="T:Howell.Text.ConnectionStringBuilder">
            <summary>
            网络设备连接字符串
            </summary>
        </member>
        <member name="M:Howell.Text.ConnectionStringBuilder.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Howell.Text.ConnectionStringBuilder.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:Howell.Text.ConnectionStringBuilder.Add(System.String,System.Object)">
            <summary>
            将带有指定键和值的项添加到 Howell.Text.ConnectionStringBuilder 中。
            </summary>
            <param name="keyword">要添加到 Howell.Text.ConnectionStringBuilder 中的键。</param>
            <param name="value">指定键的值。</param>
            <exception cref="T:System.ArgumentNullException">keyword 为空引用（在 Visual Basic 中为 Nothing）。</exception>
            <exception cref="T:System.NotSupportedException">Howell.Text.ConnectionStringBuilder 为只读。- 或 -Howell.Text.ConnectionStringBuilder 具有固定大小。</exception>
        </member>
        <member name="M:Howell.Text.ConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            提供了一种有效而安全的方法，用于将项和值追加到某个现有的 System.Text.StringBuilder 对象。
            </summary>
            <param name="builder">要向其中添加键/值对的 System.Text.StringBuilder。</param>
            <param name="keyword">要添加的键。</param>
            <param name="value">提供的键的值。</param>
        </member>
        <member name="M:Howell.Text.ConnectionStringBuilder.Clear">
            <summary>
            清除 Howell.Text.ConnectionStringBuilder 实例的内容。
            </summary>
        </member>
        <member name="M:Howell.Text.ConnectionStringBuilder.ContainsKey(System.String)">
            <summary>
            确定 Howell.Text.ConnectionStringBuilder 是否包含特定键。
            </summary>
            <param name="keyword">要在 Howell.Text.ConnectionStringBuilder 中定位的键。</param>
            <returns>Howell.Text.ConnectionStringBuilder 包含具有指定键的项，则为 true；否则为 false。</returns>
            <exception cref="T:System.ArgumentNullException">keyword 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
        </member>
        <member name="M:Howell.Text.ConnectionStringBuilder.EquivalentTo(Howell.Text.ConnectionStringBuilder)">
            <summary>
            将此 Howell.Text.ConnectionStringBuilder 对象中的连接信息与提供的对象中的连接信息进行比较。
            </summary>
            <param name="connectionStringBuilder">要与此 Howell.Text.ConnectionStringBuilder 对象进行比较的 Howell.Text.ConnectionStringBuilder。</param>
            <returns>如果两个 Howell.Text.ConnectionStringBuilder 对象中的连接信息生成等效的连接字符串，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Howell.Text.ConnectionStringBuilder.ObjectToString(System.Object)">
            <summary>
            ObjectToString
            </summary>
            <param name="keyword"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Text.ConnectionStringBuilder.Remove(System.String)">
            <summary>
            移除 Howell.Text.ConnectionStringBuilder 实例中具有指定键的项。
            </summary>
            <param name="keyword">要从此 Howell.Text.ConnectionStringBuilder 中的连接字符串移除的键/值对中的键。</param>
            <returns>如果该键存在于连接字符串中并被移除，则为 true；如果该键不存在，则为 false。</returns>
        </member>
        <member name="M:Howell.Text.ConnectionStringBuilder.ShouldSerialize(System.String)">
            <summary>
            指示此 Howell.Text.ConnectionStringBuilder 实例中是否存在指定键。
            </summary>
            <param name="keyword">要在 Howell.Text.ConnectionStringBuilder 中定位的键。</param>
            <returns>如果 Howell.Text.ConnectionStringBuilder 包含具有指定键的项，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Howell.Text.ConnectionStringBuilder.ToString">
            <summary>
            返回与此 Howell.Text.ConnectionStringBuilder 关联的连接字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.Text.ConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
            <summary>
            从此 Howell.Text.ConnectionStringBuilder 中检索与所提供的键对应的值。
            </summary>
            <param name="keyword">要检索的项的键。</param>
            <param name="value">与 key 对应的值。</param>
            <returns>如果在连接字符串中找到 keyword，则为 true；否则为 false。</returns>
            <exception cref="T:System.ArgumentNullException">keyword 包含一个空值（在 Visual Basic 中为 Nothing）。</exception>
        </member>
        <member name="P:Howell.Text.ConnectionStringBuilder.ConnectionString">
            <summary>
            获取或设置与 Howell.Text.ConnectionStringBuilder 关联的连接字符串。
            </summary>
            <exception cref="T:System.ArgumentException">提供的字符串参数无效</exception>
        </member>
        <member name="P:Howell.Text.ConnectionStringBuilder.Count">
            <summary>
            获取 Howell.Text.ConnectionStringBuilder.ConnectionString 属性中当前包含的键的数目。
            </summary>
        </member>
        <member name="P:Howell.Text.ConnectionStringBuilder.IsFixedSize">
            <summary>
            获取一个值，该值指示 Howell.Text.ConnectionStringBuilder 是否具有固定大小。
            </summary>
        </member>
        <member name="P:Howell.Text.ConnectionStringBuilder.IsReadOnly">
            <summary>
            获取一个值，该值指示 Howell.Text.ConnectionStringBuilder 是否为只读
            </summary>
        </member>
        <member name="P:Howell.Text.ConnectionStringBuilder.Item(System.String)">
            <summary>
            获取或设置与指定的键相关联的值。
            </summary>
            <param name="keyword">要获取或设置的项的键。</param>
            <returns>与指定的键相关联的值。如果未找到指定的键，尝试获取它将返回空引用（在 Visual Basic 中为 Nothing），尝试设置它将使用指定的键创建新元素。
            传递空（在 Visual Basic 中为 Nothing）键将引发 System.ArgumentNullException。赋予空值将移除键/值对。</returns>
            <exception cref="T:System.ArgumentNullException">keyword 为空引用（在 Visual Basic 中为 Nothing）。</exception>
            <exception cref="T:System.NotSupportedException">
            设置该属性，而且 System.Data.Common.DbConnectionStringBuilder 为只读。
            设置该属性，集合中不存在 keyword，而且 Howell.Text.ConnectionStringBuilder 具有固定大小。
            </exception>
        </member>
        <member name="P:Howell.Text.ConnectionStringBuilder.Keys">
            <summary>
            获取包含 Howell.Text.ConnectionStringBuilder 中的键的 System.Collections.ICollection。
            </summary>
        </member>
        <member name="P:Howell.Text.ConnectionStringBuilder.Values">
            <summary>
            获取包含 Howell.Text.ConnectionStringBuilder 中的值的 System.Collections.ICollection。
            </summary>
        </member>
        <member name="T:System.ColorConsole">
            <summary>
            多色彩的控制台
            </summary>
        </member>
        <member name="M:System.ColorConsole.Beep">
            <summary>
            通过控制台扬声器播放提示音。
            </summary>
            <exception cref="T:System.Security.HostProtectionException">在不允许访问用户界面的服务器（如 SQL Server）上执行此方法。</exception>
        </member>
        <member name="M:System.ColorConsole.Beep(System.Int32,System.Int32)">
            <summary>
            通过控制台扬声器播放具有指定频率和持续时间的提示音。
            </summary>
            <param name="frequency">提示音的频率，介于 37 到 32767 赫兹之间。</param>
            <param name="duration">提示音的持续时间，以毫秒为单位。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">frequency 小于 37 或大于 32767 赫兹。- 或 -duration 小于或等于零。</exception>
            <exception cref="T:System.Security.HostProtectionException">在不允许访问控制台的服务器（如 SQL Server）上执行此方法。</exception>
        </member>
        <member name="M:System.ColorConsole.Clear">
            <summary>
            清除控制台缓冲区和相应的控制台窗口的显示信息。
            </summary>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            将屏幕缓冲区的指定源区域复制到指定的目标区域。
            </summary>
            <param name="sourceLeft">源区域最左边的列。</param>
            <param name="sourceTop">源区域最顶部的行。</param>
            <param name="sourceWidth">源区域中列的数目。</param>
            <param name="sourceHeight">源区域中的行的数目。</param>
            <param name="targetLeft">目标区域最左边的列。</param>
            <param name="targetTop">目标区域最顶部的行。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            一个或多个参数小于零。- 或 -sourceLeft 或 targetLeft 大于等于 System.Console.BufferWidth。-
            或 -sourceTop 或 targetTop 大于等于 System.Console.BufferHeight。- 或 -sourceTop
            + sourceHeight 大于等于 System.Console.BufferHeight。- 或 -sourceLeft + sourceWidth
            大于等于 System.Console.BufferWidth。
            </exception>
            <exception cref="T:System.Security.SecurityException">该用户没有执行此操作的权限。</exception>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            将屏幕缓冲区的指定源区域复制到指定的目标区域。
            </summary>
            <param name="sourceLeft">源区域最左边的列。</param>
            <param name="sourceTop">源区域最顶部的行。</param>
            <param name="sourceWidth">源区域中列的数目。</param>
            <param name="sourceHeight">源区域中的行的数目。</param>
            <param name="targetLeft">目标区域最左边的列。</param>
            <param name="targetTop">目标区域最顶部的行。</param>
            <param name="sourceChar">用于填充源区域的字符。</param>
            <param name="sourceForeColor">用于填充源区域的前景色。</param>
            <param name="sourceBackColor">用于填充源区域的背景色。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            一个或多个参数小于零。- 或 -sourceLeft 或 targetLeft 大于等于 System.Console.BufferWidth。-
            或 -sourceTop 或 targetTop 大于等于 System.Console.BufferHeight。- 或 -sourceTop
            + sourceHeight 大于等于 System.Console.BufferHeight。- 或 -sourceLeft + sourceWidth
            大于等于 System.Console.BufferWidth。
            </exception>
            <exception cref="T:System.ArgumentException">一个颜色参数不是或两个颜色参数都不是 System.ConsoleColor 枚举的成员。</exception>
            <exception cref="T:System.Security.SecurityException">该用户没有执行此操作的权限。</exception>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.OpenStandardError">
            <summary>
            获取标准错误流。
            </summary>
            <returns>标准错误流。</returns>
        </member>
        <member name="M:System.ColorConsole.OpenStandardError(System.Int32)">
            <summary>
            获取设置为指定缓冲区大小的标准错误流。
            </summary>
            <param name="bufferSize">内部流缓冲区大小。</param>
            <returns>标准错误流。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">bufferSize 小于或等于零。</exception>
        </member>
        <member name="M:System.ColorConsole.OpenStandardInput">
            <summary>
            获取标准输入流。
            </summary>
            <returns>标准输入流。</returns>
        </member>
        <member name="M:System.ColorConsole.OpenStandardInput(System.Int32)">
            <summary>
            获取设置为指定缓冲区大小的标准输入流。
            </summary>
            <param name="bufferSize">内部流缓冲区大小。</param>
            <returns>标准输入流。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">bufferSize 小于或等于零。</exception>
        </member>
        <member name="M:System.ColorConsole.OpenStandardOutput">
            <summary>
            获取标准输出流。
            </summary>
            <returns>标准输出流。</returns>
        </member>
        <member name="M:System.ColorConsole.OpenStandardOutput(System.Int32)">
            <summary>
            获取设置为指定缓冲区大小的标准输出流。
            </summary>
            <param name="bufferSize">内部流缓冲区大小。</param>
            <returns>标准输出流。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">bufferSize 小于或等于零。</exception>
        </member>
        <member name="M:System.ColorConsole.Read">
            <summary>
            从标准输入流读取下一个字符。
            </summary>
            <returns>输入流中的下一个字符；如果当前没有更多的字符可供读取，则为负一 (-1)。</returns>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.ReadKey">
            <summary>
            获取用户按下的下一个字符或功能键。按下的键显示在控制台窗口中。
            </summary>
            <returns>
            一个 System.ConsoleKeyInfo 对象，描述 System.ConsoleKey 常数和对应于按下的控制台键的 Unicode 字符（如果存在这样的字符）。System.ConsoleKeyInfo一个 System.ConsoleKeyInfo 对象，描述 System.ConsoleKey 常数和对应于按下的控制台键的 Unicode 字符（如果存在这样的字符）。System.ConsoleKeyInfo
            对象还以 System.ConsoleModifiers 值的按位组合描述是否在按下该控制台键的同时按下了 Shift、Alt 或 Ctrl 修改键中的一个或多个。
            </returns>
            <exception cref="T:System.InvalidOperationException">System.Console.In 属性是从非控制台的某种流进行重定向的。</exception>
        </member>
        <member name="M:System.ColorConsole.ReadKey(System.Boolean)">
            <summary>
            获取用户按下的下一个字符或功能键。按下的键可以选择显示在控制台窗口中。
            </summary>
            <param name="intercept">确定是否在控制台窗口中显示按下的键。如果为 true，则不显示按下的键；否则为 false。</param>
            <returns>
            一个 System.ConsoleKeyInfo 对象，描述 System.ConsoleKey 常数和对应于按下的控制台键的 Unicode 字符（如果存在这样的字符）。System.ConsoleKeyInfo
            对象还以 System.ConsoleModifiers 值的按位组合描述是否在按下该控制台键的同时按下了 Shift、Alt 或 Ctrl 修改键中的一个或多个。
            </returns>
        </member>
        <member name="M:System.ColorConsole.ReadLine">
            <summary>
            从标准输入流读取下一行字符。
            </summary>
            <returns>输入流中的下一行字符；如果没有更多的可用行，则为 null。</returns>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
            <exception cref="T:System.OutOfMemoryException">内存不足，无法为返回的字符串分配缓冲区。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">下一行字符中的字符数大于 System.Int32.MaxValue。</exception>
        </member>
        <member name="M:System.ColorConsole.ResetColor">
            <summary>
            将控制台的前景色和背景色设置为默认值。
            </summary>
            <exception cref="T:System.Security.SecurityException">该用户没有执行此操作的权限。</exception>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.SetBufferSize(System.Int32,System.Int32)">
            <summary>
            将屏幕缓冲区的高度和宽度设置为指定值。
            </summary>
            <param name="width">缓冲区的宽度，以列为单位。</param>
            <param name="height">缓冲区的高度，以行为单位。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            height 或 width 小于或等于零。- 或 -height 或 width 大于等于 System.Int16.MaxValue。- 或
            -width 小于 System.Console.WindowLeft + System.Console.WindowWidth。- 或 -height
            小于 System.Console.WindowTop + System.Console.WindowHeight。
            </exception>
            <exception cref="T:System.Security.SecurityException">该用户没有执行此操作的权限。</exception>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.SetCursorPosition(System.Int32,System.Int32)">
            <summary>
            设置光标位置。
            </summary>
            <param name="left">光标的列位置。</param>
            <param name="top">光标的行位置。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"> left 或 top 小于零。- 或 -left 大于等于 System.Console.BufferWidth。- 或 -top 大于等于 System.Console.BufferHeight。</exception>
            <exception cref="T:System.Security.SecurityException">该用户没有执行此操作的权限。</exception>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.SetError(System.IO.TextWriter)">
            <summary>
            将 System.Console.Error 属性设置为指定的 System.IO.TextWriter 对象。
            </summary>
            <param name="newError">一个 System.IO.TextWriter 流，它是新的标准错误输出。</param>
            <exception cref="T:System.ArgumentNullException">newError 为 null。</exception>
            <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        </member>
        <member name="M:System.ColorConsole.SetIn(System.IO.TextReader)">
            <summary>
            将 System.Console.In 属性设置为指定的 System.IO.TextReader 对象。
            </summary>
            <param name="newIn">一个 System.IO.TextReader 流，它是新的标准输入。</param>
            <exception cref="T:System.ArgumentNullException">newIn 为 null。</exception>
            <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        </member>
        <member name="M:System.ColorConsole.SetOut(System.IO.TextWriter)">
            <summary>
            将 System.Console.Out 属性设置为指定的 System.IO.TextWriter 对象。
            </summary>
            <param name="newOut">一个 System.IO.TextWriter 流，它是新的标准输出。</param>
            <exception cref="T:System.ArgumentNullException">newOut 为 null。</exception>
            <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        </member>
        <member name="M:System.ColorConsole.SetWindowPosition(System.Int32,System.Int32)">
            <summary>
            设置控制台窗口相对于屏幕缓冲区的位置。
            </summary>
            <param name="left">控制台窗口左上角的列位置。</param>
            <param name="top">控制台窗口左上角的行位置。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            left 或 top 小于零。- 或 -left + System.Console.WindowWidth 大于 System.Console.BufferWidth。-
            或 -top + System.Console.WindowHeight 大于 System.Console.BufferHeight。
            </exception>
            <exception cref="T:System.Security.SecurityException">该用户没有执行此操作的权限。</exception>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.SetWindowSize(System.Int32,System.Int32)">
            <summary>
            将控制台窗口的高度和宽度设置为指定值。
            </summary>
            <param name="width">控制台窗口的宽度，以列为单位。</param>
            <param name="height">控制台窗口的高度，以行为单位。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            width 或 height 小于或等于零。- 或 -width 加 System.Console.WindowLeft 或者 height 加
            System.Console.WindowTop 大于等于 System.Int16.MaxValue。- 或 -width 或 height 大于当前屏幕分辨率和控制台字体所允许的最大窗口宽度和高度。
            </exception>
            <exception cref="T:System.Security.SecurityException">该用户没有执行此操作的权限。</exception>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.Write(System.Boolean)">
            <summary>
            将指定的布尔值的文本表示形式写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.Write(System.Boolean,System.ConsoleColor)">
            <summary>
            将指定的布尔值的文本表示形式写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <param name="color">要显示的字体颜色</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.Write(System.Char)">
            <summary>
            将指定的 Unicode 字符值写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.Write(System.Char,System.ConsoleColor)">
            <summary>
            将指定的 Unicode 字符值写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <param name="color">要显示的字体颜色</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.Write(System.Char[])">
            <summary>
            将指定的 Unicode 字符数组写入标准输出流。
            </summary>
            <param name="buffer">Unicode 字符数组。</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.Write(System.Char[],System.ConsoleColor)">
            <summary>
            将指定的 Unicode 字符数组写入标准输出流。
            </summary>
            <param name="buffer">Unicode 字符数组。</param>
            <param name="color">要显示的字体颜色</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.Write(System.Decimal)">
            <summary>
            将指定的 System.Decimal 值的文本表示形式写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.Write(System.Decimal,System.ConsoleColor)">
            <summary>
            将指定的 System.Decimal 值的文本表示形式写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <param name="color">要显示的字体颜色</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.Write(System.Double)">
            <summary>
            将指定的双精度浮点值的文本表示形式写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.Write(System.Double,System.ConsoleColor)">
            <summary>
            将指定的双精度浮点值的文本表示形式写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <param name="color">要显示的字体颜色</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.Write(System.Single)">
            <summary>
            将指定的单精度浮点值的文本表示形式写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.Write(System.Single,System.ConsoleColor)">
            <summary>
            将指定的单精度浮点值的文本表示形式写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <param name="color">要显示的字体颜色</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.Write(System.Int32)">
            <summary>
            将指定的 32 位有符号整数值的文本表示写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.Write(System.Int32,System.ConsoleColor)">
            <summary>
            将指定的 32 位有符号整数值的文本表示写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <param name="color">要显示的字体颜色</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.Write(System.Int64)">
            <summary>
            将指定的 64 位有符号整数值的文本表示写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.Write(System.Int64,System.ConsoleColor)">
            <summary>
            将指定的 64 位有符号整数值的文本表示写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <param name="color">要显示的字体颜色</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.Write(System.Object)">
            <summary>
            将指定对象的文本表示形式写入标准输出流。
            </summary>
            <param name="value">要写入的值，或者为 null。</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.Write(System.Object,System.ConsoleColor)">
            <summary>
            将指定对象的文本表示形式写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <param name="color">要显示的字体颜色</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.Write(System.String)">
            <summary>
            将指定的字符串值写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.Write(System.String,System.ConsoleColor)">
            <summary>
            将指定的字符串值写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <param name="color">要显示的字体颜色</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.Write(System.UInt32)">
            <summary>
            将指定的 32 位无符号整数值的文本表示写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.Write(System.UInt32,System.ConsoleColor)">
            <summary>
            将指定的 32 位无符号整数值的文本表示写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <param name="color">要显示的字体颜色</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.Write(System.UInt64)">
            <summary>
            将指定的 64 位无符号整数值的文本表示写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.Write(System.UInt64,System.ConsoleColor)">
            <summary>
            将指定的 64 位无符号整数值的文本表示写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <param name="color">要显示的字体颜色</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine">
            <summary>
            将当前行终止符写入标准输出流。
            </summary>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine(System.Boolean)">
            <summary>
            将指定布尔值的文本表示形式（后跟当前行终止符）写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine(System.Boolean,System.ConsoleColor)">
            <summary>
            将指定布尔值的文本表示形式（后跟当前行终止符）写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <param name="color">要显示的字体颜色</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine(System.Char)">
            <summary>
            将指定的 Unicode 字符值（后跟当前行终止符）写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine(System.Char,System.ConsoleColor)">
            <summary>
            将指定的 Unicode 字符值（后跟当前行终止符）写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <param name="color">要显示的字体颜色</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine(System.Char[])">
            <summary>
            将指定的 Unicode 字符数组（后跟当前行终止符）写入标准输出流。
            </summary>
            <param name="buffer">Unicode 字符数组。</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine(System.Char[],System.ConsoleColor)">
            <summary>
            将指定的 Unicode 字符数组（后跟当前行终止符）写入标准输出流。
            </summary>
            <param name="buffer">Unicode 字符数组。</param>
            <param name="color">要显示的字体颜色</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine(System.Decimal)">
            <summary>
            将指定的 System.Decimal 值的文本表示形式（后跟当前行终止符）写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine(System.Decimal,System.ConsoleColor)">
            <summary>
            将指定的 System.Decimal 值的文本表示形式（后跟当前行终止符）写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <param name="color">要显示的字体颜色</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine(System.Double)">
            <summary>
            将指定的双精度浮点值的文本表示形式（后跟当前行终止符）写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine(System.Double,System.ConsoleColor)">
            <summary>
            将指定的双精度浮点值的文本表示形式（后跟当前行终止符）写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <param name="color">要显示的字体颜色</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine(System.Single)">
            <summary>
            将指定的单精度浮点值的文本表示形式（后跟当前行终止符）写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine(System.Single,System.ConsoleColor)">
            <summary>
            将指定的单精度浮点值的文本表示形式（后跟当前行终止符）写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <param name="color">要显示的字体颜色</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine(System.Int32)">
            <summary>
            将指定的 32 位有符号的整数值的文本表示（后跟当前行的结束符）写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine(System.Int32,System.ConsoleColor)">
            <summary>
            将指定的 32 位有符号的整数值的文本表示（后跟当前行的结束符）写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <param name="color">要显示的字体颜色</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine(System.Int64)">
            <summary>
            将指定的 64 位有符号的整数值的文本表示（后跟当前行的结束符）写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine(System.Int64,System.ConsoleColor)">
            <summary>
            将指定的 64 位有符号的整数值的文本表示（后跟当前行的结束符）写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <param name="color">要显示的字体颜色</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine(System.Object)">
            <summary>
            将指定对象的文本表示形式（后跟当前行终止符）写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine(System.Object,System.ConsoleColor)">
            <summary>
            将指定对象的文本表示形式（后跟当前行终止符）写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <param name="color">要显示的字体颜色</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine(System.String)">
            <summary>
            将指定的字符串值（后跟当前行终止符）写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine(System.String,System.ConsoleColor)">
            <summary>
            将指定的字符串值（后跟当前行终止符）写入标准输出流。
            </summary>
            <param name="value">要写入的值。</param>
            <param name="color">要显示的字体颜色</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine(System.UInt32)">
            <summary>
            将指定的 32 位无符号的整数值的文本表示（后跟当前行的结束符）写入标准输出流。
            </summary>
            <param name="value"> 要写入的值。</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine(System.UInt32,System.ConsoleColor)">
            <summary>
            将指定的 32 位无符号的整数值的文本表示（后跟当前行的结束符）写入标准输出流。
            </summary>
            <param name="value"> 要写入的值。</param>
            <param name="color">要显示的字体颜色</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine(System.UInt64)">
            <summary>
            将指定的 64 位无符号的整数值的文本表示（后跟当前行的结束符）写入标准输出流。
            </summary>
            <param name="value"> 要写入的值。</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="M:System.ColorConsole.WriteLine(System.UInt64,System.ConsoleColor)">
            <summary>
            将指定的 64 位无符号的整数值的文本表示（后跟当前行的结束符）写入标准输出流。
            </summary>
            <param name="value"> 要写入的值。</param>
            <param name="color">要显示的字体颜色</param>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="P:System.ColorConsole.BackgroundColor">
            <summary>
            获取或设置控制台的背景色。
            </summary>
            <returns> 一个 System.ConsoleColor，指定控制台的背景色；也就是显示在每个字符后面的颜色。默认为黑色。</returns>
            <exception cref="T:System.ArgumentException">在 Set 操作中指定的颜色不是 System.ConsoleColor 的有效成员。</exception>
            <exception cref="T:System.Security.SecurityException">该用户没有执行此操作的权限。</exception>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="P:System.ColorConsole.BufferHeight">
            <summary>
            获取或设置缓冲区的高度。
            </summary>
            <returns>缓冲区的当前高度，以行为单位。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Set 操作中的值小于或等于零。- 或 -Set 操作中的值大于等于 System.Int16.MaxValue。- 或 -Set 操作中的值小于
            System.Console.WindowTop + System.Console.WindowHeight。
            </exception>
            <exception cref="T:System.Security.SecurityException">该用户没有执行此操作的权限。</exception>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="P:System.ColorConsole.BufferWidth">
            <summary>
            获取或设置缓冲区的宽度。
            </summary>
            <returns>缓冲区的当前宽度，以列为单位。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Set 操作中的值小于或等于零。- 或 -Set 操作中的值大于等于 System.Int16.MaxValue。- 或 -Set 操作中的值小于
            System.Console.WindowLeft + System.Console.WindowWidth。
            </exception>
            <exception cref="T:System.Security.SecurityException">该用户没有执行此操作的权限。</exception>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="P:System.ColorConsole.CapsLock">
            <summary>
            获取一个值，该值指示 Caps Lock 键盘切换键是打开的还是关闭的。
            </summary>
            <returns>如果 Caps Lock 是打开的，则为 true；如果 Caps Lock 是关闭的，则为 false。</returns>
        </member>
        <member name="P:System.ColorConsole.CursorLeft">
            <summary>
            获取或设置光标在缓冲区中的列位置。
            </summary>
            <returns>光标的当前位置，以列为单位。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Set 操作中的值小于零。- 或 -Set 操作中的值大于等于 System.Console.BufferWidth。</exception>
            <exception cref="T:System.Security.SecurityException">该用户没有执行此操作的权限。</exception>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="P:System.ColorConsole.CursorSize">
            <summary>
            获取或设置光标在字符单元格中的高度。
            </summary>
            <returns>光标的大小，以字符单元格高度的百分比表示。属性值的范围为 1 到 100。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">在 Set 操作中指定的值小于 1 或大于 100。</exception>
            <exception cref="T:System.Security.SecurityException">该用户没有执行此操作的权限。</exception>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="P:System.ColorConsole.CursorTop">
            <summary>
            获取或设置光标在缓冲区中的行位置。
            </summary>
            <returns>光标的当前位置，以行为单位。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Set 操作中的值小于零。- 或 -Set 操作中的值大于等于 System.Console.BufferHeight。</exception>
            <exception cref="T:System.Security.SecurityException">该用户没有执行此操作的权限。</exception>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="P:System.ColorConsole.CursorVisible">
            <summary>
            获取或设置一个值，用以指示光标是否可见。
            </summary>
            <returns> 如果光标可见，则为 true；否则为 false。</returns>
            <exception cref="T:System.Security.SecurityException">该用户没有执行此操作的权限。</exception>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="P:System.ColorConsole.Error">
            <summary>
            获取标准错误输出流。
            </summary>
            <returns>表示标准错误输出流的 System.IO.TextWriter。</returns>
        </member>
        <member name="P:System.ColorConsole.ForegroundColor">
            <summary>
            获取或设置控制台的前景色。
            </summary>
            <returns>一个 System.ConsoleColor，指定控制台的前景色；也就是显示的每个字符的颜色。默认为灰色。</returns>
            <exception cref="T:System.ArgumentException">在 Set 操作中指定的颜色不是 System.ConsoleColor 的有效成员。</exception>
            <exception cref="T:System.Security.SecurityException">该用户没有执行此操作的权限。</exception>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="P:System.ColorConsole.In">
            <summary>
             获取标准输入流。
            </summary>
            <returns>表示标准输入流的 System.IO.TextReader。</returns>
        </member>
        <member name="P:System.ColorConsole.InputEncoding">
            <summary>
             获取或设置控制台用于读取输入的编码。
            </summary>
            <returns>用于读取控制台输入的编码。</returns>
            <exception cref="T:System.ArgumentNullException">Set 操作中的属性值为 null。</exception>
            <exception cref="T:System.PlatformNotSupportedException">此属性的 Set 操作在 Windows 98、Windows 98 Second Edition 或 Windows Millennium Edition上不受支持。</exception>
            <exception cref="T:System.IO.IOException">此属性的 Set 操作在 Windows 98、Windows 98 Second Edition 或 Windows Millennium Edition上不受支持。</exception>
            <exception cref="T:System.Security.SecurityException">您的应用程序不具有执行此操作的权限。</exception>
        </member>
        <member name="P:System.ColorConsole.KeyAvailable">
            <summary>
             获取一个值，该值指示按键操作在输入流中是否可用。
            </summary>
            <returns>如果按键操作可用，则为 true；否则为 false。</returns>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
            <exception cref="T:System.InvalidOperationException">标准输入重定向到文件而不是键盘。</exception>
        </member>
        <member name="P:System.ColorConsole.LargestWindowHeight">
            <summary>
            根据当前字体和屏幕分辨率获取控制台窗口可能具有的最大行数。
            </summary>
            <returns>控制台窗口可能具有的最大高度，以行为单位。</returns>
        </member>
        <member name="P:System.ColorConsole.LargestWindowWidth">
            <summary>
            根据当前字体和屏幕分辨率获取控制台窗口可能具有的最大列数。
            </summary>
            <returns>控制台窗口可能具有的最大宽度，以列为单位。</returns>
        </member>
        <member name="P:System.ColorConsole.NumberLock">
            <summary>
            获取一个值，该值指示 Num Lock 键盘切换键是打开的还是关闭的。
            </summary>
            <returns>如果 Num Lock 是打开的，则为 true；如果 Num Lock 是关闭的，则为 false。</returns>
        </member>
        <member name="P:System.ColorConsole.Out">
            <summary>
            获取标准输出流。
            </summary>
            <returns>获取标准输出流。</returns>
        </member>
        <member name="P:System.ColorConsole.OutputEncoding">
            <summary>
            获取或设置控制台用于写入输出的编码。
            </summary>
            <returns>用于写入控制台输出的编码。</returns>
            <exception cref="T:System.ArgumentNullException">Set 操作中的属性值为 null。</exception>
            <exception cref="T:System.PlatformNotSupportedException">此属性的 Set 操作在 Windows 98、Windows 98 Second Edition 或 Windows Millennium Edition上不受支持。</exception>
            <exception cref="T:System.IO.IOException">在执行此操作的过程中发生错误。</exception>
            <exception cref="T:System.Security.SecurityException">您的应用程序不具有执行此操作的权限。</exception>
        </member>
        <member name="P:System.ColorConsole.Title">
            <summary>
            获取或设置要显示在控制台标题栏中的标题。
            </summary>
            <returns>要在控制台的标题栏中显示的字符串。标题字符串的最大长度是 24500 个字符。</returns>
            <exception cref="T:System.InvalidOperationException">在 Get 操作中，检索到的标题的长度超过 24500 个字符。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">在 Set 操作中，指定标题的长度超过 24500 个字符。</exception>
            <exception cref="T:System.ArgumentNullException">在 Set 操作中，指定的标题为 null。</exception>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
        </member>
        <member name="P:System.ColorConsole.TreatControlCAsInput">
            <summary>
            获取或设置一个值，该值指示是将修改键 System.ConsoleModifiers.Control 和控制台键 System.ConsoleKey.C
            的组合 (Ctrl+C) 视为普通输入，还是视为由操作系统处理的中断。
            </summary>
            <returns>如果将 Ctrl+C 视为普通输入，则为 true；否则为 false。</returns>
            <exception cref="T:System.IO.IOException">无法获取或设置控制台输入缓冲区的输入模式。</exception>
        </member>
        <member name="P:System.ColorConsole.WindowHeight">
            <summary>
            获取或设置控制台窗口区域的高度。
            </summary>
            <returns> 控制台窗口的高度，以行为单位。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            System.Console.WindowWidth 属性值或 System.Console.WindowHeight 属性值小于或等于 0。-
            或 -System.Console.WindowHeight 属性值加上 System.Console.WindowTop 属性值大于等于 System.Int16.MaxValue。-
            或 -System.Console.WindowWidth 属性值或 System.Console.WindowHeight 属性值大于当前屏幕分辨率和控制台字体的最大可能窗口宽度或高度。
            </exception>
            <exception cref="T:System.IO.IOException">读取或写入信息时发生错误。</exception>
        </member>
        <member name="P:System.ColorConsole.WindowLeft">
            <summary>
             获取或设置控制台窗口区域的最左边相对于屏幕缓冲区的位置。
            </summary>
            <returns>控制台窗口的最左边的位置，以列为单位。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            在设置操作中，所赋的值小于零。- 或 -赋值后，System.Console.WindowLeft 加上 System.Console.WindowWidth
            将超过 System.Console.BufferWidth。
            </exception>
            <exception cref="T:System.IO.IOException">读取或写入信息时发生错误。</exception>
        </member>
        <member name="P:System.ColorConsole.WindowTop">
            <summary>
            获取或设置控制台窗口区域的最顶部相对于屏幕缓冲区的位置。
            </summary>
            <returns>控制台窗口最顶部的位置，以行为单位。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            在设置操作中，所赋的值小于零。- 或 -赋值后，System.Console.WindowTop 加上 System.Console.WindowHeight
            将超过 System.Console.BufferHeight。
            </exception>
            <exception cref="T:System.IO.IOException">读取或写入信息时发生错误。</exception>
        </member>
        <member name="P:System.ColorConsole.WindowWidth">
            <summary>
            获取或设置控制台窗口的宽度。
            </summary>
            <returns>控制台窗口的宽度，以列为单位。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            System.Console.WindowWidth 属性值或 System.Console.WindowHeight 属性值小于或等于 0。-
            或 -System.Console.WindowHeight 属性值加上 System.Console.WindowTop 属性值大于等于 System.Int16.MaxValue。-
            或 -System.Console.WindowWidth 属性值或 System.Console.WindowHeight 属性值大于当前屏幕分辨率和控制台字体的最大可能窗口宽度或高度。
            </exception>
            <exception cref="T:System.IO.IOException">读取或写入信息时发生错误。</exception>
        </member>
        <member name="E:System.ColorConsole.CancelKeyPress">
            <summary>
            在同时按下修改键 System.ConsoleModifiers.Control (Ctrl) 和控制台键 System.ConsoleKey.C
            (C)（即 Ctrl+C）时发生。
            </summary>
        </member>
        <member name="T:Howell.Schedules.ProgrammeRemindingEventArgs">
            <summary>
            节目表计划提醒事件参数对象
            </summary>
        </member>
        <member name="M:Howell.Schedules.ProgrammeRemindingEventArgs.#ctor(Howell.Schedules.ProgrammeItem)">
            <summary>
            构造
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Howell.Schedules.ProgrammeRemindingEventArgs.Item">
            <summary>
            计划信息
            </summary>
        </member>
        <member name="T:Howell.Schedules.Programme">
            <summary>
            节目表
            </summary>
        </member>
        <member name="M:Howell.Schedules.Programme.#ctor">
            <summary>
            创建Programme对象
            </summary>
        </member>
        <member name="M:Howell.Schedules.Programme.GetDateProgrammeItems(System.DateTime)">
            <summary>
            根据参考日期获取当天的计划信息
            </summary>
            <param name="date">参考日期</param>
            <returns>返回计划信息列表</returns>
        </member>
        <member name="M:Howell.Schedules.Programme.Plan_Reminding(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Howell.Schedules.Programme.Dispose">
            <summary>
            释放由 Programme 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
        </member>
        <member name="P:Howell.Schedules.Programme.Items">
            <summary>
            获取包含节目表中所有项的集合。
            </summary>
        </member>
        <member name="E:Howell.Schedules.Programme.Reminding">
            <summary>
            节目表计划提醒事件
            </summary>
        </member>
        <member name="T:Howell.Schedules.Programme.ProgrammeItemCollection">
            <summary>
            节目表子项的集合
            </summary>
        </member>
        <member name="M:Howell.Schedules.Programme.ProgrammeItemCollection.#ctor(Howell.Schedules.Programme)">
            <summary>
            
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Howell.Schedules.Programme.ProgrammeItemCollection.Add(Howell.Schedules.ProgrammeItem)">
            <summary>
             将现有的Howell.Schedules.ProgrammeItem 添加到集合中。
            </summary>
            <param name="item">要添加到集合中的 Howell.Schedules.ProgrammeItem。</param>
            <returns>已添加到集合中的 Howell.Schedules.ProgrammeItem。</returns>
        </member>
        <member name="M:Howell.Schedules.Programme.ProgrammeItemCollection.Add(System.String,Howell.Schedules.PlanTime,System.String)">
            <summary>
            将现有的Howell.Schedules.ProgrammeItem 添加到集合中。
            </summary>
            <param name="key">键值</param>
            <param name="time">节目时间</param>
            <param name="content">节目内容</param>
            <returns>已添加到集合中的 Howell.Schedules.ProgrammeItem。</returns>
        </member>
        <member name="M:Howell.Schedules.Programme.ProgrammeItemCollection.Remove(Howell.Schedules.ProgrammeItem)">
            <summary>
            从集合中移除指定的项。
            </summary>
            <param name="item">Howell.Schedules.ProgrammeItem，表示要从集合中移除的项。</param>
            <returns>如果成功移除 item，则为 true；否则为 false。如果在集合中没有找到item，该方法也会返回 false。</returns>
        </member>
        <member name="M:Howell.Schedules.Programme.ProgrammeItemCollection.RemoveByKey(System.String)">
            <summary>
            从集合中移除具有指定键的项。
            </summary>
            <param name="key">要从集合中移除的项的名称。</param>
            <returns>如果成功移除 item，则为 true；否则为 false。如果在集合中没有找到item，该方法也会返回 false。</returns>
        </member>
        <member name="M:Howell.Schedules.Programme.ProgrammeItemCollection.Clear">
            <summary>
            从集合中移除所有项。
            </summary>
        </member>
        <member name="M:Howell.Schedules.Programme.ProgrammeItemCollection.Contains(Howell.Schedules.ProgrammeItem)">
            <summary>
            确定指定项是否位于集合内。
            </summary>
            <param name="item"> Howell.Schedules.ProgrammeItem，表示要在集合中查找的项。</param>
            <returns>如果集合中包含该项，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Howell.Schedules.Programme.ProgrammeItemCollection.ContansKey(System.String)">
            <summary>
            确定集合是否包含具有指定键的项。
            </summary>
            <param name="key">要搜索的项的名称。</param>
            <returns>如果集合包含具有指定键的项，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Howell.Schedules.Programme.ProgrammeItemCollection.System#Collections#Generic#ICollection{Howell#Schedules#ProgrammeItem}#Add(Howell.Schedules.ProgrammeItem)">
            <summary>
            Add
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Howell.Schedules.Programme.ProgrammeItemCollection.CopyTo(Howell.Schedules.ProgrammeItem[],System.Int32)">
            <summary>
             将整个集合复制到现有数组中，从该数组内的指定位置开始复制。
            </summary>
            <param name="array">表示要将该集合的内容复制到的数组。</param>
            <param name="arrayIndex">集合中的项将复制到的目标数组中的位置。</param>
        </member>
        <member name="M:Howell.Schedules.Programme.ProgrammeItemCollection.System#Collections#Generic#ICollection{Howell#Schedules#ProgrammeItem}#Remove(Howell.Schedules.ProgrammeItem)">
            <summary>
            Remove
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Schedules.Programme.ProgrammeItemCollection.GetEnumerator">
            <summary>
            返回可用于循环访问选定索引集合的枚举数。
            </summary>
            <returns>一个表示选定的索引集合的 System.Collections.IEnumerator。</returns>
        </member>
        <member name="M:Howell.Schedules.Programme.ProgrammeItemCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.Schedules.Programme.ProgrammeItemCollection.ProgrammeItem_Reminding(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Howell.Schedules.Programme.ProgrammeItemCollection.Item(System.String)">
            <summary>
             检索具有指定键的项。
            </summary>
            <param name="key">要检索的项的名称。</param>
            <returns>Howell.Schedules.ProgrammeItem，其 Howell.Schedules.ProgrammeItem与指定键匹配。</returns>
        </member>
        <member name="P:Howell.Schedules.Programme.ProgrammeItemCollection.Count">
            <summary>
            获取集合中项的数目。
            </summary>
        </member>
        <member name="P:Howell.Schedules.Programme.ProgrammeItemCollection.IsReadOnly">
            <summary>
            获取一个值，该值指示集合是否为只读。
            </summary>
        </member>
        <member name="E:Howell.Schedules.Programme.ProgrammeItemCollection.ProgrammeItemReminding">
            <summary>
            节目表计划提醒事件
            </summary>
        </member>
        <member name="T:Howell.RangeInt32">
            <summary>
            限定分为的Int32值
            </summary>
        </member>
        <member name="M:Howell.RangeInt32.#ctor(System.Int32,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
        </member>
        <member name="M:Howell.RangeInt32.GetValue">
            <summary>
            获取Int32值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.RangeInt32.Decrement">
            <summary>
            递减指定变量的值并存储结果。
            </summary>
            <returns>递减的值。</returns>
        </member>
        <member name="M:Howell.RangeInt32.Increment">
            <summary>
            递增指定变量的值并存储结果。
            </summary>
            <returns>递增的值。</returns>
        </member>
        <member name="M:Howell.RangeInt32.Add(System.Int32)">
            <summary>
            添加两个 32 位整数并用两者的和替换第一个整数。
            </summary>
            <param name="value">要添加到整数中的 location 位置的值。</param>
            <returns>存储在 location 处的新值。</returns>
        </member>
        <member name="M:Howell.RangeInt32.Exchange(System.Int32)">
            <summary>
            将 32 位有符号整数设置为指定的值并返回原始值。
            </summary>
            <param name="value">location 参数被设置为的值。</param>
            <returns>location1 的原始值。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 的值不再范围内</exception>
        </member>
        <member name="M:Howell.RangeInt32.op_Implicit(Howell.RangeInt32)~System.Int32">
            <summary>
            隐式转换为Int32类型
            </summary>
            <param name="rangeInt32"></param>
            <returns></returns>
        </member>
        <member name="P:Howell.RangeInt32.MaxValue">
            <summary>
            最大值
            </summary>
        </member>
        <member name="P:Howell.RangeInt32.MinValue">
            <summary>
            最小值
            </summary>
        </member>
        <member name="T:Howell.IO.DataSizeExceededException">
            <summary>
            The exception that is thrown when maximum allowed data size has exceeded.
            </summary>
        </member>
        <member name="M:Howell.IO.DataSizeExceededException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Howell.IO.CloseableStreamWriter">
            <summary>
            实现一个 System.IO.TextWriter，使其以一种特定的编码向流中写入字符。
            </summary>
        </member>
        <member name="M:Howell.IO.CloseableStreamWriter.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Howell.IO.CloseableStreamWriter.#ctor(System.IO.Stream)">
            <summary>
            构造
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Howell.IO.CloseableStreamWriter.#ctor(System.String,System.Boolean)">
            <summary>
            构造
            </summary>
            <param name="path"></param>
            <param name="append"></param>
        </member>
        <member name="M:Howell.IO.CloseableStreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            构造
            </summary>
            <param name="stream"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Howell.IO.CloseableStreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            构造
            </summary>
            <param name="path"></param>
            <param name="append"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Howell.IO.CloseableStreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="stream"></param>
            <param name="encoding"></param>
            <param name="bufferSize"></param>
        </member>
        <member name="M:Howell.IO.CloseableStreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="path"></param>
            <param name="append"></param>
            <param name="encoding"></param>
            <param name="bufferSize"></param>
        </member>
        <member name="M:Howell.IO.CloseableStreamWriter.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Howell.IO.CloseableStreamWriter.Closeable">
            <summary>
            是否在退出时关闭Stream
            </summary>
        </member>
        <member name="T:Howell.IO.CloseableStreamReader">
            <summary>
            实现一个 System.IO.TextReader，使其以一种特定的编码从字节流中读取字符。
            </summary>
        </member>
        <member name="M:Howell.IO.CloseableStreamReader.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Howell.IO.CloseableStreamReader.#ctor(System.IO.Stream)">
            <summary>
            Constructor
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Howell.IO.CloseableStreamReader.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Constructor
            </summary>
            <param name="path"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Howell.IO.CloseableStreamReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Constructor
            </summary>
            <param name="stream"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Howell.IO.CloseableStreamReader.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Howell.IO.CloseableStreamReader.Closeable">
            <summary>
            是否在退出时关闭Stream
            </summary>
        </member>
        <member name="T:Howell.IO.BitWriter">
            <summary>
            以二进制形式将基元类型写入流，并支持用特定的编码写入字符串。
            </summary>
        </member>
        <member name="M:Howell.IO.BitWriter.#ctor(System.IO.Stream)">
            <summary>
            基于所提供的流，用 UTF-8 作为字符串编码来初始化 Howell.IO.BitWriter 类的新实例。
            </summary>
            <param name="output">输出流。</param>
        </member>
        <member name="M:Howell.IO.BitWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            基于所提供的流，用 UTF-8 作为字符串编码来初始化 Howell.IO.BitWriter 类的新实例。
            </summary>
            <param name="output">输出流。</param>
            <param name="encoding">编码格式</param>
        </member>
        <member name="M:Howell.IO.BitWriter.#ctor(System.IO.Stream,Howell.IO.ByteOrder)">
            <summary>
            基于所提供的流，用 UTF-8 作为字符串编码来初始化 Howell.IO.BitWriter 类的新实例。
            </summary>
            <param name="output">输出流。</param>
            <param name="order">字节序</param>
        </member>
        <member name="M:Howell.IO.BitWriter.#ctor(System.IO.Stream,System.Text.Encoding,Howell.IO.ByteOrder)">
            <summary>
            基于所提供的流，用 UTF-8 作为字符串编码来初始化 Howell.IO.BitWriter 类的新实例。
            </summary>
            <param name="output">输出流。</param>
            <param name="encoding">编码格式</param>
            <param name="order">字节序</param>
        </member>
        <member name="M:Howell.IO.BitWriter.Close">
            <summary>
            关闭当前的 Howell.IO.BitWriter 和基础流。
            </summary>
        </member>
        <member name="M:Howell.IO.BitWriter.Dispose">
            <summary>
            释放由 Howell.IO.BitWriter 类的当前实例占用的所有资源。
            </summary>
        </member>
        <member name="M:Howell.IO.BitWriter.WriteBit(System.Int32)">
            <summary>
            将一位数据的值写入当前流，其中 0 表示 false，1 表示 true。
            </summary>
            <param name="value">位数据的值</param>
            <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
        </member>
        <member name="M:Howell.IO.BitWriter.WriteBits(System.Int32,System.Int32)">
            <summary>
            将n位数据的值写入当前流，其中 0 表示 false，1 表示 true。
            </summary>
            <param name="value">n位数据的值</param>
            <param name="count">位的数目</param>
            <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
        </member>
        <member name="M:Howell.IO.BitWriter.WriteBits(System.Int64,System.Int32)">
            <summary>
            将n位数据的值写入当前流，其中 0 表示 false，1 表示 true。
            </summary>
            <param name="value">n位数据的值</param>
            <param name="count">位的数目</param>
            <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
        </member>
        <member name="M:Howell.IO.BitWriter.Write(System.Byte)">
            <summary>
            将一个无符号字节写入当前流，并将流的位置提升 1 个字节。
            </summary>
            <param name="value">要写入的无符号字节。</param>
            <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
        </member>
        <member name="M:Howell.IO.BitWriter.Write(System.Byte[])">
            <summary>
            将字节数组写入基础流。
            </summary>
            <param name="buffer">包含要写入的数据的字节数组。</param>
            <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
        </member>
        <member name="M:Howell.IO.BitWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将字节数组部分写入当前流。
            </summary>
            <param name="buffer">包含要写入的数据的字节数组。</param>
            <param name="index">buffer 中开始写入的起始点。</param>
            <param name="count">要写入的字节数。</param>
        </member>
        <member name="M:Howell.IO.BitWriter.Write(System.Int16)">
            <summary>
            将 2 字节带符号整数写入当前流，并将流的位置提升 2 个字节。
            </summary>
            <param name="value">要写入的 2 字节带符号整数。</param>
            <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
        </member>
        <member name="M:Howell.IO.BitWriter.Write(System.Int32)">
            <summary>
            将 4 字节带符号整数写入当前流，并将流的位置提升 4 个字节。
            </summary>
            <param name="value">要写入的 4 字节带符号整数。</param>
            <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
        </member>
        <member name="M:Howell.IO.BitWriter.Write(System.Int64)">
            <summary>
            将 8 字节带符号整数写入当前流，并将流的位置提升 8 个字节。
            </summary>
            <param name="value">要写入的 8 字节带符号整数。</param>
            <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
        </member>
        <member name="M:Howell.IO.BitWriter.Write(System.UInt16)">
            <summary>
            将 2 字节无符号整数写入当前流，并将流的位置提升 2 个字节。
            </summary>
            <param name="value">要写入的 2 字节无符号整数。</param>
            <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
        </member>
        <member name="M:Howell.IO.BitWriter.Write(System.UInt32)">
            <summary>
            将 4 字节无符号整数写入当前流，并将流的位置提升 4 个字节。
            </summary>
            <param name="value">要写入的 4 字节无符号整数。</param>
            <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
        </member>
        <member name="M:Howell.IO.BitWriter.Write(System.UInt64)">
            <summary>
            将 8 字节无符号整数写入当前流，并将流的位置提升 8 个字节。
            </summary>
            <param name="value">要写入的 8 字节无符号整数。</param>
            <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
        </member>
        <member name="M:Howell.IO.BitWriter.Write(System.String)">
            <summary>
            将字符串写入当前流
            </summary>
            <param name="value">字符串值</param>
        </member>
        <member name="M:Howell.IO.BitWriter.Write(System.String,System.Int32)">
            <summary>
            将字符串写入当前流
            </summary>
            <param name="value">字符串值</param>
            <param name="length">字符串长度</param>
        </member>
        <member name="M:Howell.IO.BitWriter.WriteGolombUE32(System.UInt32)">
            <summary>
            写入无符号指数哥伦布编码
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Howell.IO.BitWriter.WriteGolombSE32(System.Int32)">
            <summary>
            写入有符号指数哥伦布编码
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Howell.IO.BitWriter.BaseStream">
            <summary>
            公开对 Howell.IO.BitWriter 的基础流的访问。
            </summary>
        </member>
        <member name="P:Howell.IO.BitWriter.Encoding">
            <summary>
            公开的编码格式
            </summary>
        </member>
        <member name="T:Howell.IO.BitReader">
            <summary>
            位数据阅读器
            </summary>    
        </member>
        <member name="M:Howell.IO.BitReader.#ctor(System.IO.Stream)">
            <summary>
            基于所提供的流，用 System.Text.UTF8Encoding 初始化 Howell.IO.BitReader 类的新实例。
            </summary>
            <param name="input">流</param>
        </member>
        <member name="M:Howell.IO.BitReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            基于所提供的流，用 System.Text.UTF8Encoding 初始化 Howell.IO.BitReader 类的新实例。
            </summary>
            <param name="input">流</param>
            <param name="encoding">编码格式</param>
        </member>
        <member name="M:Howell.IO.BitReader.Close">
            <summary>
            关闭当前阅读器及基础流。
            </summary>
        </member>
        <member name="M:Howell.IO.BitReader.Dispose">
            <summary>
            释放由 Howell.IO.BitReader 类的当前实例占用的所有资源。
            </summary>
        </member>
        <member name="M:Howell.IO.BitReader.ReadBit">
            <summary>
            读取一位数据
            </summary>
            <returns>转换为 Int32 的无符号字节 0 或 1；如果到达流的末尾，则为 -1。</returns>
            <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
            <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
        </member>
        <member name="M:Howell.IO.BitReader.ReadBits(System.Int32)">
            <summary>
            读取一位数据
            </summary>
            <param name="count">位数目[1-32]</param>
            <returns>转换为 Int32 的无符号字节 0 或 1。</returns>
            <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
            <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
        </member>
        <member name="M:Howell.IO.BitReader.ReadBits64(System.Int32)">
            <summary>
            读取一位数据
            </summary>
            <param name="count">位数目[1-64]</param>
            <returns>转换为 Int64 的无符号字节 0 或 1。</returns>
            <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
            <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
        </member>
        <member name="M:Howell.IO.BitReader.ReadByte">
            <summary>
            读取一个字节的数据
            </summary>
            <returns>转换为 Byte 的无符号字节。</returns>
            <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
            <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
        </member>
        <member name="M:Howell.IO.BitReader.ReadBytes(System.Int32)">
            <summary>
             从当前流中读取指定的字节数以写入字节数组中，并将当前位置前移相应的字节数。
            </summary>
            <param name="count">要读取的字节数。</param>
            <returns>包含从基础流中读取的数据的字节数组。如果到达了流的末尾，则该字节数组可能小于所请求的字节数。</returns>
            <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
            <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
        </member>
        <member name="M:Howell.IO.BitReader.ReadInt16">
            <summary>
            从当前流中读取 2 字节有符号整数，并使流的当前位置提升 2 个字节。
            </summary>
            <returns>从当前流中读取的 2 字节有符号整数。</returns>
            <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
            <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
        </member>
        <member name="M:Howell.IO.BitReader.ReadInt32">
            <summary>
            从当前流中读取 4 字节有符号整数，并使流的当前位置提升 4 个字节。
            </summary>
            <returns>从当前流中读取的 4 字节有符号整数。</returns>
            <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
            <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
        </member>
        <member name="M:Howell.IO.BitReader.ReadInt64">
            <summary>
            从当前流中读取 8 字节有符号整数，并使流的当前位置向前移动 8 个字节。
            </summary>
            <returns>从当前流中读取的 8 字节有符号整数。</returns>
            <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
            <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
        </member>
        <member name="M:Howell.IO.BitReader.ReadUInt16">
            <summary>
            从当前流中读取 2 字节无符号整数，并使流的当前位置提升 2 个字节。
            </summary>
            <returns>从当前流中读取的 2 字节无符号整数。</returns>
            <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
            <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
        </member>
        <member name="M:Howell.IO.BitReader.ReadUInt32">
            <summary>
            从当前流中读取 4 字节无符号整数，并使流的当前位置提升 4 个字节。
            </summary>
            <returns>从当前流中读取的 4 字节无符号整数。</returns>
            <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
            <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
        </member>
        <member name="M:Howell.IO.BitReader.ReadUInt64">
            <summary>
            从当前流中读取 8 字节无符号整数，并使流的当前位置提升 8 个字节。
            </summary>
            <returns>从当前流中读取的 8 字节无符号整数。</returns>
            <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
            <exception cref="T:System.IO.EndOfStreamException">已到达流的末尾。</exception>
        </member>
        <member name="M:Howell.IO.BitReader.ReadString(System.Int32)">
            <summary>
            从当前流中读取指定长度的字符串
            </summary>
            <param name="count">字符串字节数</param>
            <returns>返回指定长度的字符串，如果到达文件尾不，返回的字符串长度可能小于实际的需求。</returns>
        </member>
        <member name="M:Howell.IO.BitReader.ReadGolombUE32">
            <summary>
            读取无符号指数哥伦布编码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.IO.BitReader.ReadGolombSE32">
            <summary>
            读取有符号指数哥伦布编码
            </summary>
            <returns></returns>
        </member>
        <member name="P:Howell.IO.BitReader.BaseStream">
            <summary>
            公开对 Howell.IO.BitReader 的基础流的访问。
            </summary>
        </member>
        <member name="P:Howell.IO.BitReader.Encoding">
            <summary>
            公开的编码格式
            </summary>
        </member>
        <member name="T:Howell.Interops.LibFunctionAttribute">
            <summary>
            LibHowellFunction Attribute
            </summary>
        </member>
        <member name="M:Howell.Interops.LibFunctionAttribute.#ctor(System.String)">
            <summary>
            Construction
            </summary>
            <param name="functionName">function name</param>
        </member>
        <member name="M:Howell.Interops.LibFunctionAttribute.#ctor(System.String,System.String)">
            <summary>
            Construction
            </summary>
            <param name="functionName">function name</param>
            <param name="minVersion">min version supported</param>
        </member>
        <member name="M:Howell.Interops.LibFunctionAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Construction
            </summary>
            <param name="functionName">function name</param>
            <param name="minVersion">min version supported</param>
            <param name="maxVersion">max version supported</param>
        </member>
        <member name="P:Howell.Interops.LibFunctionAttribute.FunctionName">
            <summary>
            Function Name
            </summary>
        </member>
        <member name="P:Howell.Interops.LibFunctionAttribute.MinVersion">
            <summary>
            MinVersion Supported
            </summary>
        </member>
        <member name="P:Howell.Interops.LibFunctionAttribute.MaxVersion">
            <summary>
            MaxVersion Supported
            </summary>
        </member>
        <member name="T:Howell.Interops.InteropsManager">
            <summary>
            互操作管理工具 抽象类型
            </summary>
        </member>
        <member name="M:Howell.Interops.InteropsManager.#ctor">
            <summary>
            Initializes a new instance of the InteropsManager class.
            </summary>
        </member>
        <member name="M:Howell.Interops.InteropsManager.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InteropsManager class.
            </summary>
            <param name="dllDirectory">The path to lib.dll</param>
        </member>
        <member name="M:Howell.Interops.InteropsManager.ChangeEnvironment(System.String)">
            <summary>
            修改系统的环境变量
            </summary>
            <param name="libDllsDirectory">dll所在的文件路径</param>
        </member>
        <member name="M:Howell.Interops.InteropsManager.Load">
            <summary>
            开始加载互操作库
            </summary>
        </member>
        <member name="M:Howell.Interops.InteropsManager.Free">
            <summary>
            释放互操作库
            </summary>
        </member>
        <member name="P:Howell.Interops.InteropsManager.DllDirectory">
            <summary>
            动态库路径
            </summary>
        </member>
        <member name="P:Howell.Interops.InteropsManager.LibVersion">
            <summary>
            LIB版本号
            </summary>
        </member>
        <member name="T:Howell.Drawing.Picture">
            <summary>
            Windows标准图片对象
            </summary>
        </member>
        <member name="M:Howell.Drawing.Picture.#ctor(System.Byte[])">
            <summary>
            创建Windows标准图片对象
            </summary>
            <param name="bytes">图片的二进制数据</param>
        </member>
        <member name="M:Howell.Drawing.Picture.#ctor(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            创建Windows标准图片对象
            </summary>
            <param name="image">图片对象</param>
            <param name="format">图片格式</param>
        </member>
        <member name="M:Howell.Drawing.Picture.ToArray">
            <summary>
            将图片对象转换为可以被存储的二进制数据
            </summary>
            <returns>返回图片的二进制数据.</returns>
        </member>
        <member name="M:Howell.Drawing.Picture.Equals(System.Object)">
            <summary>
            Equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.Picture.GetHashCode">
            <summary>
            GetHashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.Picture.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="P:Howell.Drawing.Picture.Image">
            <summary>
            图片对象
            </summary>
        </member>
        <member name="P:Howell.Drawing.Picture.ImageFormat">
            <summary>
            图片格式
            </summary>
        </member>
        <member name="T:Howell.Drawing.Imaging.ImageFormatExtensions">
            <summary>
            System.Drawing.Imaging.ImageFormat对象的扩展函数
            </summary>
        </member>
        <member name="M:Howell.Drawing.Imaging.ImageFormatExtensions.FormBinaryData(System.Byte[])">
            <summary>
            将二进制文件数据转换为System.Drawing.Imaging.ImageFormat对象
            </summary>
            <param name="binaryData">二进制文件数据</param>
            <returns>如果成功返回System.Drawing.Imaging.ImageFormat对象，否则将抛出异常。</returns>        
        </member>
        <member name="T:Howell.Industry.ArmType">
            <summary>
            布防类型
            </summary>
        </member>
        <member name="F:Howell.Industry.ArmType.Disarm">
            <summary>
            撤防
            </summary>
        </member>
        <member name="F:Howell.Industry.ArmType.Arm">
            <summary>
            布防
            </summary>
        </member>
        <member name="F:Howell.Industry.ArmType.Bypass">
            <summary>
            旁路
            </summary>
        </member>
        <member name="T:Howell.Conditions.PostconditionException">
            <summary>
            The exception that is thrown when a method's postcondition is not valid.
            </summary>
        </member>
        <member name="M:Howell.Conditions.PostconditionException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Howell.Conditions.PostconditionException"/> class.</summary>
        </member>
        <member name="M:Howell.Conditions.PostconditionException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Howell.Conditions.PostconditionException"/> class with a
            specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Howell.Conditions.PostconditionException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Howell.Conditions.PostconditionException"/> class.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Howell.Conditions.PostconditionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the PostconditionException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about
            the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information 
            about the source or destination.</param>
        </member>
        <member name="T:Howell.Conditions.Condition">
            <summary>
            Entry point methods to start validating pre- and postconditions.
            </summary>
        </member>
        <member name="M:Howell.Conditions.Condition.Requires``1(``0)">
            <summary>
            Returns a new <see cref="T:Howell.Conditions.ConditionValidator`1">ConditionValidator</see> that allows you to
            validate the preconditions of the given argument, given it a default ArgumentName of 'value'.
            </summary>
            <typeparam name="T">The type of the argument to validate.</typeparam>
            <param name="value">The value of the argument to validate.</param>
            <returns>A new <see cref="T:Howell.Conditions.ConditionValidator`1">ConditionValidator</see> containing the 
            <paramref name="value"/> and "value" as argument name.</returns>
            <example>
            The following example shows how to use the <b>Requires</b> method.
            <code><![CDATA[
            using Howell.Conditions;
            
            public class Person
            {
                private int age;
                
                public int Age
                {
                    get { return this.age; }
                    set
                    {
                        // Throws an ArgumentOutOfRangeException when value is less than 0
                        Condition.Requires(value).IsGreaterOrEqual(0);
                        this.age = value;
                    }
                }
            }
            ]]></code>
            See the <see cref="T:Howell.Conditions.ConditionValidator`1"/> class for more code examples.
            </example>
        </member>
        <member name="M:Howell.Conditions.Condition.Requires``1(``0,System.String)">
            <summary>
            Returns a new <see cref="T:Howell.Conditions.ConditionValidator`1">ConditionValidator</see> that allows you to
            validate the preconditions of the given argument.
            </summary>
            <typeparam name="T">The type of the argument to validate.</typeparam>
            <param name="value">The value of the argument to validate.</param>
            <param name="argumentName">The name of the argument to validate</param>
            <returns>A new <see cref="T:Howell.Conditions.ConditionValidator`1">ConditionValidator</see> containing the 
            <paramref name="value"/> and <paramref name="argumentName"/>.</returns>
            <example>
            The following example shows how to use the <b>Requires</b> method.
            <code><![CDATA[
            using Howell.Conditions;
            
            public class Point
            {
                private readonly int x;
                private readonly int y;
                
                public Point(int x, int y)
                {
                    // Throws an ArgumentOutOfRangeException when x is less than 0
                    Condition.Requires(x, "x").IsGreaterOrEqual(0);
                    
                    // Throws an ArgumentOutOfRangeException when y is less than 0
                    Condition.Requires(y, "y").IsGreaterOrEqual(0);
                    
                    this.x = x;
                    this.y = y;
                }
                
                public int X { get { return this.x; } }
                public int Y { get { return this.y; } }
            }
            ]]></code>
            See the <see cref="T:Howell.Conditions.ConditionValidator`1"/> class for more code examples.
            </example>
        </member>
        <member name="M:Howell.Conditions.Condition.Ensures``1(``0)">
            <summary>
            Returns a new <see cref="T:Howell.Conditions.ConditionValidator`1">ConditionValidator</see> that allows you to 
            validate the given argument, given it a default ArgumentName of 'value'.
            </summary>
            <typeparam name="T">The type of the argument to validate.</typeparam>
            <param name="value">The value of the argument to validate.</param>
            <returns>A new <see cref="T:Howell.Conditions.ConditionValidator`1">ConditionValidator</see> containing the 
            <paramref name="value"/> and "value" as argument name.</returns>
            <example>
            For an example of the usage of <b>Ensures</b> see the <see cref="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)"/> 
            overload.
            </example>
        </member>
        <member name="M:Howell.Conditions.Condition.Ensures``1(``0,System.String)">
             <summary>
             Returns a new <see cref="T:Howell.Conditions.ConditionValidator`1">ConditionValidator</see> that allows you to 
             validate the postconditions of the given object.
             </summary>
             <typeparam name="T">The type of the object to validate.</typeparam>
             <param name="value">The object to validate.</param>
             <param name="argumentName">The name of the argument to validate</param>
             <returns>A new <see cref="T:Howell.Conditions.ConditionValidator`1">ConditionValidator</see> containing the 
             <paramref name="value"/> and <paramref name="argumentName"/>.</returns>
             <example>
             The following example shows a way to use the <b>Ensures</b> method. Shown is an 
             <b>IObjectBuilder</b> interface which contract states that the <b>BuildObject</b> method should 
             never return <b>null</b>. That contract, however, is not enforced by the compiler or the runtime.
             To allow this contract to be validated, the <b>ObjectBuilderValidator</b> class is a decorator for
             objects implementing the <b>IObjectBuilder</b> interface and it <i>ensures</i> that the given
             contract is fulfilled, by checking the return value of the called <b>BuildObject</b> of the 
             wrapped <b>IObjectBuilder</b>.
             <code><![CDATA[
             using Howell.Conditions;
             
             public interface IObjectBuilder
             {
                 /// <summary>Builds an object.</summary>
                 /// <returns>Returns a newly built object. Will not return null.</returns>
                 object BuildObject();
             }
             
             public class ObjectBuilderValidator : IObjectBuilder
             {
                 public object BuildObject()
                 {
                     object obj = wrappedObjectBuilder.BuildObject();
             
                     // When obj == null, a PostconditionException is thrown, with the following message:
                     // "Postcondition 'the value returned by IObjectBuilder.BuildObject() should not be null'
                     // failed."
                     Conditions.Ensures(obj, "the value returned by IObjectBuilder.BuildObject()")
                         .IsNotNull();
             
                     return obj;
                 }
             
                 private readonly IObjectBuilder wrappedObjectBuilder;
            
                 /// <summary>
                 /// Initializes a new instance of the <see cref="ObjectBuilderValidator"/> class.
                 /// </summary>
                 /// <param name="objectBuilder">The object builder.</param>
                 /// <exception cref="ArgumentNullException">
                 /// Thrown when <paramref name="objectBuilder"/> is a null reference.
                 /// </exception>
                 public ObjectBuilderWrapper(IObjectBuilder objectBuilder)
                 {
                     // Throws a ArgumentNullException when objectBuilder == null.
                     Condition.Requires(objectBuilder, "objectBuilder").IsNotNull();
             
                     this.wrappedObjectBuilder = objectBuilder;
                 }
             }
             ]]></code>
             See the <see cref="T:Howell.Conditions.ConditionValidator`1"/> class for more code examples.
             </example>
        </member>
        <member name="M:Howell.Conditions.Condition.WithExceptionOnFailure``1">
            <summary>
            Returns a new <see cref="T:Howell.Conditions.AlternativeExceptionCondition"/> that allows you to specify the exception
            type that has to be thrown in case a a validation fails.
            </summary>
            <typeparam name="TException">The type of the exception to throw.</typeparam>
            <returns>A new <see cref="T:Howell.Conditions.AlternativeExceptionCondition"/>.</returns>
            <example>
            The following example shows how to use the <b>WithExceptionOnFailure</b> method.
            <code><![CDATA[
            using Howell.Conditions;
            
            public class Point
            {
                private readonly int x;
                private readonly int y;
                
                public Point(int x, int y)
                {
                    // Throws an InvalidOperationException when x is less than 0
                    Condition.WithExceptionOnFailure<InvalidOperationException>().Requires(x, "x")
                        .IsGreaterOrEqual(0)
                        .IsLessThan(100);
                    
                    this.x = x;
                    this.y = y;
                }
                
                public int X { get { return this.x; } }
                public int Y { get { return this.y; } }
            }
            ]]></code>
            See the <see cref="T:Howell.Conditions.ConditionValidator`1"/> class for more code examples.
            </example>
            <exception cref="T:System.ArgumentException">
            Thrown when the supplied <typeparamref name="TException"/> is abstract or does not contain a
            public constructor with a single parameter of type <see cref="T:System.String"/>.</exception>
        </member>
        <member name="T:Howell.Collections.Generic.SynchronizedDictionary`2">
            <summary>
            Dictionary that uses ReaderWriterLockSlim to syncronize all read and writes to the underlying Dictionary
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="capacity"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.EnterReadLock">
            <summary>
            
            </summary>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.ExitReadLock">
            <summary>
            
            </summary>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.EnterWriteLock">
            <summary>
            
            </summary>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.ExitWriteLock">
            <summary>
            
            </summary>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.EnterUpgradeableReadLock">
            <summary>
            
            </summary>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.ExitUpgradeableReadLock">
            <summary>
            
            </summary>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.GetAdd(`0,System.Func{`1})">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="addfunction"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.Add(`0,`1)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.Add(`0,`1,System.Boolean)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="throwOnNotFound"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.ContainsKey(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.KeysToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.Remove(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.ValuesToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedDictionary`2.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Howell.Collections.Generic.SynchronizedDictionary`2.Lock">
            <summary>
            
            </summary>
        </member>
        <member name="P:Howell.Collections.Generic.SynchronizedDictionary`2.Dictionary">
            <summary>
            
            </summary>
        </member>
        <member name="P:Howell.Collections.Generic.SynchronizedDictionary`2.Keys">
            <summary>
            
            </summary>
        </member>
        <member name="P:Howell.Collections.Generic.SynchronizedDictionary`2.Values">
            <summary>
            
            </summary>
        </member>
        <member name="P:Howell.Collections.Generic.SynchronizedDictionary`2.Item(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Howell.Collections.Generic.SynchronizedDictionary`2.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Howell.Collections.Generic.SynchronizedDictionary`2.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:Howell.Collections.Generic.SynchronizedDictionary`2.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:Howell.Collections.Generic.SynchronizedDictionary`2.IsDisposed">
            <summary>
            
            </summary>
        </member>
        <member name="T:Howell.VersionMismatchedException">
            <summary>
            表示运行时发生的版本不匹配的错误
            </summary>
        </member>
        <member name="M:Howell.VersionMismatchedException.#ctor">
            <summary>
            初始化 Howell.VersionMismatchedException 类实例
            </summary>
        </member>
        <member name="M:Howell.VersionMismatchedException.#ctor(System.String)">
            <summary>
            使用指定的错误消息初始化 Howell.VersionMismatchedException 类的新实例。
            </summary>
            <param name="message">描述错误的消息。</param>
        </member>
        <member name="M:Howell.VersionMismatchedException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 Howell.VersionMismatchedException 类的新实例。
            </summary>
            <param name="message">描述错误的消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
        </member>
        <member name="M:Howell.VersionMismatchedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 Howell.VersionMismatchedException 类的新实例。
            </summary>
            <param name="info">System.Runtime.Serialization.SerializationInfo，它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context">System.Runtime.Serialization.StreamingContext，它包含有关源或目标的上下文信息。</param>
            <exception cref="T:System.ArgumentNullException"> info 参数为 null。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">类名为 null 或 System.Exception.HResult 为零 (0)。</exception>
        </member>
        <member name="T:Howell.Schedules.WorkSheetItemEndingEventArgs">
            <summary>
            工作表项结束事件参数
            </summary>
        </member>
        <member name="M:Howell.Schedules.WorkSheetItemEndingEventArgs.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="index">工作表项索引</param>
        </member>
        <member name="P:Howell.Schedules.WorkSheetItemEndingEventArgs.Index">
            <summary>
            工作表项索引
            </summary>
        </member>
        <member name="T:Howell.Schedules.WorkSheetItemBeginningEventArgs">
            <summary>
            工作表项开始事件参数
            </summary>
        </member>
        <member name="M:Howell.Schedules.WorkSheetItemBeginningEventArgs.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="index">工作表项索引</param>
        </member>
        <member name="P:Howell.Schedules.WorkSheetItemBeginningEventArgs.Index">
            <summary>
            工作表项索引
            </summary>
        </member>
        <member name="T:Howell.Schedules.WorkSheetItem">
            <summary>
            工作表项
            </summary>
        </member>
        <member name="M:Howell.Schedules.WorkSheetItem.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Howell.Schedules.WorkSheetItem.#ctor(Howell.Schedules.PlanTime,Howell.Schedules.PlanTime)">
            <summary>
            创建Howell.Schedules.WorkSheetItem对象
            </summary>
            <param name="beginTime">工作表项的开始时间</param>
            <param name="endTime">工作表项的结束时间</param>
        </member>
        <member name="M:Howell.Schedules.WorkSheetItem.#ctor(Howell.Schedules.PlanTime,Howell.Schedules.PlanTime,System.String,System.Boolean)">
            <summary>
            创建Howell.Schedules.WorkSheetItem对象
            </summary>
            <param name="beginTime">工作表项的开始时间</param>
            <param name="endTime">工作表项的结束时间</param>
            <param name="content">工作表项的内容</param>
            <param name="enabled">是否启用提示功能</param>
        </member>
        <member name="M:Howell.Schedules.WorkSheetItem.RaiseBeginning">
            <summary>
            触发开始事件
            </summary>
        </member>
        <member name="M:Howell.Schedules.WorkSheetItem.RaiseEnding">
            <summary>
            触发结束事件
            </summary>
        </member>
        <member name="M:Howell.Schedules.WorkSheetItem.System#IDisposable#Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Howell.Schedules.WorkSheetItem.BeginTime">
            <summary>
            工作表项的开始时间
            </summary>
        </member>
        <member name="P:Howell.Schedules.WorkSheetItem.EndTime">
            <summary>
            工作表项的结束时间
            </summary>
        </member>
        <member name="P:Howell.Schedules.WorkSheetItem.Content">
            <summary>
            工作表项的内容
            </summary>
        </member>
        <member name="P:Howell.Schedules.WorkSheetItem.Enabled">
            <summary>
            是否启用提示功能
            </summary>
        </member>
        <member name="P:Howell.Schedules.WorkSheetItem.Id">
            <summary>
            唯一ID
            </summary>
        </member>
        <member name="E:Howell.Schedules.WorkSheetItem.Beginning">
            <summary>
            时间段计划开始提示
            </summary>
        </member>
        <member name="E:Howell.Schedules.WorkSheetItem.Ending">
            <summary>
            时间段计划结束提示
            </summary>
        </member>
        <member name="T:Howell.Schedules.DayOfWeekWorkSheetItem">
            <summary>
            星期几的工作表项对象
            </summary>
        </member>
        <member name="M:Howell.Schedules.DayOfWeekWorkSheetItem.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DayOfWeek)">
            <summary>
            创建 Howell.Schedules.DayOfWeekWorkSheetItem 对象
            </summary>
            <param name="beginHour">开始时间的小时值</param>
            <param name="beginMinute">开始时间的分钟值</param>
            <param name="beginSecond">开始时间的秒值</param>
            <param name="endHour">结束时间的小时值</param>
            <param name="endMinute">结束时间的分钟值</param>
            <param name="endSecond">结束时间的秒值</param>
            <param name="dayOfWeek">星期几</param>
        </member>
        <member name="M:Howell.Schedules.DayOfWeekWorkSheetItem.RaiseBeginning">
            <summary>
            触发开始事件
            </summary>
        </member>
        <member name="M:Howell.Schedules.DayOfWeekWorkSheetItem.RaiseEnding">
            <summary>
            触发结束事件
            </summary>
        </member>
        <member name="M:Howell.Schedules.DayOfWeekWorkSheetItem.System#IDisposable#Dispose">
            <summary>
            销毁 Howell.Schedules.DayOfWeekWorkSheetItem 对象
            </summary>
        </member>
        <member name="P:Howell.Schedules.DayOfWeekWorkSheetItem.BeginTime">
            <summary>
            开始时间段
            </summary>
        </member>
        <member name="P:Howell.Schedules.DayOfWeekWorkSheetItem.EndTime">
            <summary>
            结束时间段
            </summary>
        </member>
        <member name="P:Howell.Schedules.DayOfWeekWorkSheetItem.Content">
            <summary>
            时间段内容
            </summary>
        </member>
        <member name="P:Howell.Schedules.DayOfWeekWorkSheetItem.Enabled">
            <summary>
            是否启用该工作表项
            </summary>
        </member>
        <member name="P:Howell.Schedules.DayOfWeekWorkSheetItem.Id">
            <summary>
            唯一ID
            </summary>
        </member>
        <member name="E:Howell.Schedules.DayOfWeekWorkSheetItem.Beginning">
            <summary>
            时间段计划开始提示
            </summary>
        </member>
        <member name="E:Howell.Schedules.DayOfWeekWorkSheetItem.Ending">
            <summary>
            时间段计划结束提示
            </summary>
        </member>
        <member name="T:Howell.Security.IExpiration">
            <summary>
            期满特性的数据接口
            </summary>
        </member>
        <member name="M:Howell.Security.IExpiration.IsExpired">
            <summary>
            判断对象是否已期满
            </summary>
            <returns>期满返回true,否则返回false。</returns>
        </member>
        <member name="M:Howell.Security.IExpiration.Renewal">
            <summary>
            续订
            </summary>
        </member>
        <member name="T:Howell.IO.PathExtensions">
            <summary>
            System.IO.Path的扩展函数
            </summary>
        </member>
        <member name="M:Howell.IO.PathExtensions.GetParentPath(System.String)">
            <summary>
            获取当前目录的父目录
            </summary>
            <param name="path">当前目录路径</param>
            <returns>返回父目录路径</returns>
            <exception cref="T:System.ArgumentNullException">path can not be null.</exception>
            <exception cref="T:System.ArgumentException">path is illegal.</exception>
        </member>
        <member name="M:Howell.IO.PathExtensions.GetCurrentDirectoryName(System.String)">
            <summary>
            获取当前目录名称
            </summary>
            <param name="path">当前目录路径</param>
            <returns>返回目录名称</returns>
            <exception cref="T:System.ArgumentNullException">path can not be null.</exception>
        </member>
        <member name="T:Howell.Math.Algorithm.DoubleAlgorithm">
            <summary>
            Double 运算类
            </summary>
        </member>
        <member name="F:Howell.Math.Algorithm.DoubleAlgorithm.Epsilon">
            <summary>
            表示大于零的最小正 System.Double 值。此字段为常数
            </summary>
        </member>
        <member name="M:Howell.Math.Algorithm.DoubleAlgorithm.Equals(System.Double,System.Double)">
            <summary>
            Equals
            </summary>
            <param name="value1">数值1</param>
            <param name="value2">数值2</param>
            <returns>如果相同返回true,否则返回false.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.DoubleAlgorithm.Equals(System.Double,System.Double,System.Double)">
            <summary>
            Equals
            </summary>
            <param name="value1">数值1</param>
            <param name="value2">数值2</param>
            <param name="ep">表示大于零的最小正 System.Double 值</param>
            <returns>如果相同返回true,否则返回false.</returns>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveReferenceActionDelegate`1">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="TRef">此委托封装的方法的第一个引用参数类型。</typeparam>
            <param name="progressPercentage">引用参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
            <param name="refArg">此委托封装的方法的第一个引用参数。</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveReferenceActionDelegate`2">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="TRef">此委托封装的方法的第一个引用参数类型。</typeparam>
            <param name="arg">此委托封装的方法的第一个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
            <param name="refArg">此委托封装的方法的第一个引用参数。</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveReferenceActionDelegate`3">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="TRef">此委托封装的方法的第一个引用参数类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
            <param name="refArg">此委托封装的方法的第一个引用参数。</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveReferenceActionDelegate`4">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="TRef">此委托封装的方法的第一个引用参数类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
            <param name="refArg">此委托封装的方法的第一个引用参数。</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveReferenceActionDelegate`5">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="TRef">此委托封装的方法的第一个引用参数类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
            <param name="refArg">此委托封装的方法的第一个引用参数。</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveReferenceActionDelegate`6">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数类型。</typeparam>
            <typeparam name="TRef">此委托封装的方法的第一个引用参数类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
            <param name="refArg">此委托封装的方法的第一个引用参数。</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveReferenceActionDelegate`7">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数类型。</typeparam>
            <typeparam name="TRef">此委托封装的方法的第一个引用参数类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
            <param name="refArg">此委托封装的方法的第一个引用参数。</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveReferenceActionDelegate`8">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数类型。</typeparam>
            <typeparam name="TRef">此委托封装的方法的第一个引用参数类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
            <param name="refArg">此委托封装的方法的第一个引用参数。</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveReferenceActionDelegate`9">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数类型。</typeparam>
            <typeparam name="TRef">此委托封装的方法的第一个引用参数类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
            <param name="refArg">此委托封装的方法的第一个引用参数。</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveReferenceActionDelegate`10">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数类型。</typeparam>
            <typeparam name="TRef">此委托封装的方法的第一个引用参数类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
            <param name="refArg">此委托封装的方法的第一个引用参数。</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveReferenceActionDelegate`11">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数类型。</typeparam>
            <typeparam name="TRef">此委托封装的方法的第一个引用参数类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
            <param name="refArg">此委托封装的方法的第一个引用参数。</param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncProgressiveReferenceActionEventBased`3">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="TProgressChangedEventArgs"></typeparam>
            <typeparam name="TRef"></typeparam>
        </member>
        <member name="T:Howell.ComponentModel.AsyncProgressiveOperationEventBasedSkeleton`2">
            <summary>
            事件模型的异步步进操作实现类型 抽象类
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="TProgressChangedEventArgs"></typeparam>
        </member>
        <member name="T:Howell.ComponentModel.AsyncOperationEventBasedSkeleton`1">
            <summary>
            事件模型的异步操作实现类型 抽象类
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
        </member>
        <member name="F:Howell.ComponentModel.AsyncOperationEventBasedSkeleton`1._taskIdToLifetime">
            <summary>
            TaskIds
            </summary>
        </member>
        <member name="F:Howell.ComponentModel.AsyncOperationEventBasedSkeleton`1._onCompletedDelegate">
            <summary>
            Completed Delegate
            </summary>
        </member>
        <member name="M:Howell.ComponentModel.AsyncOperationEventBasedSkeleton`1.#ctor">
            <summary>
            默认构造
            </summary>
        </member>
        <member name="M:Howell.ComponentModel.AsyncOperationEventBasedSkeleton`1.Completion(System.Exception,System.Boolean,System.ComponentModel.AsyncOperation,System.Object[])">
            <summary>
            Completion
            </summary>
            <param name="exception"></param>
            <param name="canceled"></param>
            <param name="asyncOp"></param>
            <param name="args"></param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncOperationEventBasedSkeleton`1.IsCancelled(System.Object)">
            <summary>
            打开操作被取消
            </summary>
            <param name="taskId"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.ComponentModel.AsyncOperationEventBasedSkeleton`1.WorkerFunction(System.ComponentModel.AsyncOperation,System.Action,System.Object[])">
            <summary>
            未使用
            </summary>
            <param name="asyncOp"></param>
            <param name="action"></param>
            <param name="args"></param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncOperationEventBasedSkeleton`1.OnCompleted(System.Object)">
            <summary>
            OnCompleted
            </summary>
            <param name="operationState"></param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncOperationEventBasedSkeleton`1.CreateConstructedFunctionSignature(System.Type[])">
            <summary>
            构造函数签名创建工具
            </summary>
            <param name="types">参数类型表</param>
            <returns></returns>
        </member>
        <member name="M:Howell.ComponentModel.AsyncOperationEventBasedSkeleton`1.ValidateCompletedEventArgs(System.String,System.Object[])">
            <summary>
            验证泛型构造的有效性
            </summary>
            <param name="signature">构造函数签名</param>
            <param name="args">构造参数列表</param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncOperationEventBasedSkeleton`1.BeginAsync(System.Object)">
            <summary>
            开始异步操作
            </summary>
            <param name="taskId"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.ComponentModel.AsyncOperationEventBasedSkeleton`1.CancelAsync(System.Object)">
            <summary>
            取消异步操作
            </summary>
            <param name="taskId"></param>
        </member>
        <member name="E:Howell.ComponentModel.AsyncOperationEventBasedSkeleton`1.Completed">
            <summary>
            异步操作完成事件
            </summary>
        </member>
        <member name="F:Howell.ComponentModel.AsyncProgressiveOperationEventBasedSkeleton`2._onProgressChangedDelegate">
            <summary>
            ProgressChanged Delegate
            </summary>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveOperationEventBasedSkeleton`2.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveOperationEventBasedSkeleton`2.ReportProgress(System.Int32,System.ComponentModel.AsyncOperation,System.Object[])">
            <summary>
            报告异步操作进度函数
            </summary>
            <param name="progressPercentage"></param>
            <param name="asyncOp"></param>
            <param name="args"></param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveOperationEventBasedSkeleton`2.OnProgressChanged(System.Object)">
            <summary>
            OnProgressChanged
            </summary>
            <param name="operationState"></param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveOperationEventBasedSkeleton`2.ValidateProgressChangedEventArgs(System.String,System.Object[])">
            <summary>
            验证泛型构造的有效性
            </summary>
            <param name="signature"></param>
            <param name="args">构造参数列表</param>        
        </member>
        <member name="E:Howell.ComponentModel.AsyncProgressiveOperationEventBasedSkeleton`2.ProgressChanged">
            <summary>
            异步操作进度改变事件
            </summary>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveReferenceActionEventBased`3.#ctor(Howell.ComponentModel.ProgressiveReferenceActionDelegate{System.Object,System.Func{System.Object,System.Boolean},`2})">
            <summary>
            构造事件模型的异步进度操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled,ref progressPercentage);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveReferenceActionEventBased`3.Async(System.Object)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncProgressiveReferenceActionEventBased`4">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="TProgressChangedEventArgs"></typeparam>
            <typeparam name="T"></typeparam>
            <typeparam name="TRef"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveReferenceActionEventBased`4.#ctor(Howell.ComponentModel.ProgressiveReferenceActionDelegate{System.Object,System.Func{System.Object,System.Boolean},`2,`3})">
            <summary>
            构造事件模型的异步进度操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled,ref progressPercentage);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveReferenceActionEventBased`4.Async(System.Object,`2)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
            <param name="arg"></param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncProgressiveReferenceActionEventBased`5">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="TProgressChangedEventArgs"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TRef"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveReferenceActionEventBased`5.#ctor(Howell.ComponentModel.ProgressiveReferenceActionDelegate{System.Object,System.Func{System.Object,System.Boolean},`2,`3,`4})">
            <summary>
            构造事件模型的异步进度操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled,ref progressPercentage);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveReferenceActionEventBased`5.Async(System.Object,`2,`3)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncProgressiveReferenceActionEventBased`6">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="TProgressChangedEventArgs"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TRef"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveReferenceActionEventBased`6.#ctor(Howell.ComponentModel.ProgressiveReferenceActionDelegate{System.Object,System.Func{System.Object,System.Boolean},`2,`3,`4,`5})">
            <summary>
            构造事件模型的异步进度操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled,ref progressPercentage);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveReferenceActionEventBased`6.Async(System.Object,`2,`3,`4)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncProgressiveActionEventBased`7">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="TProgressChangedEventArgs"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TRef"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveActionEventBased`7.#ctor(Howell.ComponentModel.ProgressiveReferenceActionDelegate{System.Object,System.Func{System.Object,System.Boolean},`2,`3,`4,`5,`6})">
            <summary>
            构造事件模型的异步进度操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled,ref progressPercentage);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveActionEventBased`7.Async(System.Object,`2,`3,`4,`5)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
        </member>
        <member name="T:Howell.Capability.PhysAddressCap">
            <summary>
            PhysAddress 能力
            </summary>
        </member>
        <member name="T:Howell.Capability.StringCap">
            <summary>
            String 能力
            </summary>
        </member>
        <member name="M:Howell.Capability.StringCap.op_Implicit(Howell.Capability.StringCap)~System.String">
            <summary>
            隐式转换
            </summary>
            <param name="val">转换对象</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Howell.Capability.StringCap.op_Explicit(System.String)~Howell.Capability.StringCap">
            <summary>
            显式转换
            </summary>
            <param name="val">转换对象</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Howell.Capability.StringCap.#ctor">
            <summary>
            创建 StringCap对象
            </summary>
        </member>
        <member name="M:Howell.Capability.StringCap.#ctor(System.String)">
            <summary>
            创建 StringCap对象
            </summary>
            <param name="val">数值</param>
        </member>
        <member name="M:Howell.Capability.StringCap.#ctor(System.String,System.String)">
            <summary>
            创建 StringCap对象
            </summary>
            <param name="val"></param>
            <param name="def"></param>
        </member>
        <member name="M:Howell.Capability.StringCap.#ctor(System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            创建 StringCap对象
            </summary>
            <param name="val"></param>
            <param name="def"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Howell.Capability.StringCap.#ctor(Howell.Capability.StringCap)">
            <summary>
            拷贝构造
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Howell.Capability.StringCap.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns>返回字符串。</returns>
        </member>
        <member name="P:Howell.Capability.StringCap.Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="P:Howell.Capability.StringCap.TextSpecified">
            <summary>
            是否包含Text XML属性
            </summary>
        </member>
        <member name="P:Howell.Capability.StringCap.Text">
            <summary>
            文本内容
            </summary>
        </member>
        <member name="F:Howell.Capability.PhysAddressCap.Default">
            <summary>
            空MAC地址
            </summary>
        </member>
        <member name="M:Howell.Capability.PhysAddressCap.op_Implicit(Howell.Capability.PhysAddressCap)~System.String">
            <summary>
            隐式转换
            </summary>
            <param name="val">转换对象</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Howell.Capability.PhysAddressCap.op_Explicit(System.String)~Howell.Capability.PhysAddressCap">
            <summary>
            显式转换
            </summary>
            <param name="val">转换对象</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Howell.Capability.PhysAddressCap.#ctor">
            <summary>
            创建 MACCap对象
            </summary>
        </member>
        <member name="M:Howell.Capability.PhysAddressCap.#ctor(System.String)">
            <summary>
            创建 MACCap对象
            </summary>
            <param name="val">数值</param>
        </member>
        <member name="M:Howell.Capability.PhysAddressCap.#ctor(Howell.Capability.PhysAddressCap)">
            <summary>
            拷贝构造
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:Howell.Time.RemoteDateTime">
            <summary>
            Virtual DateTime 是一个根据构造函数传入的远端时间模拟其在本地的变换
            </summary>
            <remarks>
            如： IP摄像机的时间
            </remarks>
        </member>
        <member name="M:Howell.Time.RemoteDateTime.#ctor(System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="remoteNow"></param>
        </member>
        <member name="P:Howell.Time.RemoteDateTime.RemoteNow">
            <summary>
            获取远端的现在时间
            </summary>
        </member>
        <member name="T:Howell.SR">
            <summary>
            String Resource helper class
            </summary>
        </member>
        <member name="T:Howell.HexadecimalString">
            <summary>
            16进制的字符串对象, 如果16进制字符串的值为FF0C,那么该方法将返回的数组为 byte[0]=255, byte[1]=12.
            </summary>
            <example>
            The following example shows how to use the <b>HexadecimalString</b> method.
            <code>
            <![CDATA[
            using Howell;
            
            HexadecimalString hexString = HexadecimalString.Parse("FF0C");
            Byte[] bytes = hexString.GetBytes();
            String info = String.Format("hexString:{0}=", hexString.ToString());
            for (int i = 0; i < bytes.Length; ++i)
            {
                info += bytes[i].ToString("X2");
            }
            info += " Bytes";
            Console.WriteLine(info);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Howell.HexadecimalString.#ctor(System.Byte[])">
            <summary>
            创建16进制的字符串对象
            </summary>
            <param name="buffer">字节数组</param>
        </member>
        <member name="M:Howell.HexadecimalString.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            创建16进制的字符串对象
            </summary>
            <param name="buffer">字节数组</param>
            <param name="offset">数组偏移量</param>
            <param name="length">数组长度</param>
        </member>
        <member name="M:Howell.HexadecimalString.GetBytes">
            <summary>
            获取10进制的字节数组，如果16进制字符串的值为FF0C,那么该方法将返回的数组为 byte[0]=255, byte[1]=12.
            </summary>
            <returns>返回10进制的字节数组</returns>
        </member>
        <member name="M:Howell.HexadecimalString.ToString">
            <summary>
            转换为16进制的字符串
            </summary>
            <returns>返回16进制的字符串。</returns>
        </member>
        <member name="M:Howell.HexadecimalString.Parse(System.String)">
            <summary>
            解析16进制字符串
            </summary>
            <param name="hexString">16进制字符串实例对象。</param>
            <returns>返回具体的16进制字符串类型</returns>
        </member>
        <member name="T:Howell.Drawing.D2.PolygonD">
            <summary>
            多边形
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.PolygonD.RegularExpressionString">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.PolygonD.Empty">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:Howell.Drawing.D2.PolygonD.#ctor(System.Collections.Generic.IList{Howell.Drawing.D2.PointD})">
            <summary>
            Constructor
            </summary>
            <param name="vertex">多边形的顶点</param>        
        </member>
        <member name="M:Howell.Drawing.D2.PolygonD.#ctor(Howell.Drawing.D2.PointD[])">
            <summary>
            Constructor
            </summary>
            <param name="vertex">多边形的顶点</param>        
        </member>
        <member name="M:Howell.Drawing.D2.PolygonD.Parse(System.String)">
            <summary>
            解析多边形的字符串形式
            </summary>
            <param name="value">字符串</param>
            <returns>如果解析成功，返回PolygonD类型，否则将抛出异常</returns>
            <exception cref="T:System.FormatException">非法的字符串格式。</exception>
        </member>
        <member name="M:Howell.Drawing.D2.PolygonD.ToString">
            <summary>
            获取多边形类型的字符串型式
            </summary>
            <returns>返回多边形类型的字符串型式。</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolygonD.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:Howell.Drawing.D2.PolygonD"/> equal to the specified one.
            </summary>
            <param name="obj">Another point to check equalty to.</param>
            <returns>Return <see langword="true"/> if objects are equal.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolygonD.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            <returns>Returns the hash code for this instance.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolygonD.op_Equality(Howell.Drawing.D2.PolygonD,Howell.Drawing.D2.PolygonD)">
            <summary>
            equals operator - checks if two polygon is the same.
            </summary>
            <param name="p1">Polygon object 1.</param>
            <param name="p2">Polygon object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolygonD.op_Inequality(Howell.Drawing.D2.PolygonD,Howell.Drawing.D2.PolygonD)">
            <summary>
            equals operator - checks if two polygon is not the same.
            </summary>
            <param name="p1">Polygon2D object 1.</param>
            <param name="p2">Polygon2D object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolygonD.op_Explicit(Howell.Drawing.D2.PolygonD)~Howell.Drawing.D2.PolygonI">
            <summary>
            显式转换PolygonD To PolygonI
            </summary>
            <param name="polygon">多边形</param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolygonD.Equals(Howell.Drawing.D2.PolygonD)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolygonD.GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolygonD.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="P:Howell.Drawing.D2.PolygonD.Vertex">
            <summary>
            多边形顶点
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.PolygonD.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="T:Howell.Math.Algorithm.PolylineAlgorithm">
            <summary>
            多线段计算
            </summary>
        </member>
        <member name="M:Howell.Math.Algorithm.PolylineAlgorithm.DeflectingDirection(Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD)">
            <summary>
            判断折线的偏转方向/线段拐向
            </summary>
            <param name="P">P点</param>
            <param name="Q">Q点</param>
            <param name="R">R点</param>
            <returns>返回偏转方向</returns>
            <remarks>
            返回值 大于 0 , 则PQ在R点拐向右侧后得到QR,等同于点R在PQ线段的右侧
            返回值 小于 0 , 则PQ在R点拐向左侧后得到QR,等同于点R在PQ线段的左侧
            返回值 等于 0 , 则P,Q,R三点共线。
            </remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.PolylineAlgorithm.DeflectingDirection(Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI)">
            <summary>
            判断折线的偏转方向/线段拐向
            </summary>
            <param name="P">P点</param>
            <param name="Q">Q点</param>
            <param name="R">R点</param>
            <returns>返回偏转方向</returns>
            <remarks>
            返回值 大于 0 , 则PQ在R点拐向右侧后得到QR,等同于点R在PQ线段的右侧
            返回值 小于 0 , 则PQ在R点拐向左侧后得到QR,等同于点R在PQ线段的左侧
            返回值 等于 0 , 则P,Q,R三点共线。
            </remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.PolylineAlgorithm.Offset(Howell.Drawing.D2.PolylineD,Howell.Drawing.D2.PointD)">
            <summary>
            计算偏移折线PL
            </summary>
            <param name="PL">折线PL</param>
            <param name="velocity">偏移速度</param>
            <returns>返回偏移折线</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PolylineAlgorithm.Offset(Howell.Drawing.D2.PolylineI,Howell.Drawing.D2.PointI)">
            <summary>
            计算偏移折线PL
            </summary>
            <param name="PL">折线PL</param>
            <param name="velocity">偏移速度</param>
            <returns>返回偏移折线</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PolylineAlgorithm.GetValidatePolyline(Howell.Drawing.D2.PolylineD)">
            <summary>
            获取有效的折线
            </summary>
            <param name="PL">折线PL</param>
            <returns>返回折线</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PolylineAlgorithm.GetValidatePolyline(Howell.Drawing.D2.PolylineI)">
            <summary>
            获取有效的折线
            </summary>
            <param name="PL">折线PL</param>
            <returns>返回折线</returns>
        </member>
        <member name="T:Howell.Conditions.ConstraintViolationType">
            <summary>
            This enumeration is used to determine the type of exception the validator should throw.
            </summary>
        </member>
        <member name="F:Howell.Conditions.ConstraintViolationType.Default">
            <summary>Lets the Validator to throw the default exception for that instance.</summary>
        </member>
        <member name="F:Howell.Conditions.ConstraintViolationType.OutOfRangeViolation">
            <summary>
            Lets the Validator optionally throw an exception type appropriate for values that are out of range.
            </summary>
        </member>
        <member name="F:Howell.Conditions.ConstraintViolationType.InvalidEnumViolation">
            <summary>
            Lets the Validator optionally throw an <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/>.
            </summary>
        </member>
        <member name="T:Howell.Capability.TimeCap">
            <summary>
            Time 能力
            </summary>
            <remarks>Format xs:time : 17:30:08+08:00 </remarks>
        </member>
        <member name="M:Howell.Capability.TimeCap.op_Implicit(Howell.Capability.TimeCap)~System.DateTime">
            <summary>
            隐式转换
            </summary>
            <param name="val">转换对象</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Howell.Capability.TimeCap.op_Explicit(System.DateTime)~Howell.Capability.TimeCap">
            <summary>
            显式转换
            </summary>
            <param name="val">转换对象</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Howell.Capability.TimeCap.#ctor">
            <summary>
            创建 TimeCap对象
            </summary>
        </member>
        <member name="M:Howell.Capability.TimeCap.#ctor(System.DateTime)">
            <summary>
            创建 TimeCap对象
            </summary>
            <param name="val">数值</param>
        </member>
        <member name="M:Howell.Capability.TimeCap.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns>返回字符串。</returns>
        </member>
        <member name="P:Howell.Capability.TimeCap.Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="P:Howell.Capability.TimeCap.TextSpecified">
            <summary>
            是否包含Text XML属性
            </summary>
        </member>
        <member name="P:Howell.Capability.TimeCap.Text">
            <summary>
            文本内容
            </summary>
        </member>
        <member name="T:Howell.Time.ISO8601TimeIntervalFormats">
            <summary>
            ISO8601 时间段格式
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeIntervalFormats.BasicDateByStartAndEndInSameYear">
            <summary>
            跨度在同一年中的基本日历格式
            （开始和结束日期）
            YYYYMMDD/MMDD
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeIntervalFormats.ExtendedDateByStartAndEndInSameYear">
            <summary>
            跨度在同一年中的扩展日历格式
            （开始和结束日期）
            YYYY-MM-DD/MM-DD
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeIntervalFormats.BasicDateTimeByStartAndEnd">
            <summary>
            基本日历和时间格式
            （开始和结束日期和时间）
            YYYYMMDDThhmmss/YYYYMMDDThhmmss
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeIntervalFormats.ExtendedDateTimeByStartAndEnd">
            <summary>
            扩展日历和时间格式
            （开始和结束日期和时间）
            YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeIntervalFormats.SymbolicDateTimeByDuration">
            <summary>
            日期和时间格式（符号表示）
            （时间段）
            例：跨度为2年10月15天10小时20分30秒
              ：P2Y10M15DT10H20M30S
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeIntervalFormats.BasicDateTimeByDuration">
            <summary>
            基本日历和时间格式
            （时间段）
            PYYYYMMDDThhmmss
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeIntervalFormats.ExtendedDateTimeByDuration">
            <summary>
            扩展日历和时间格式
            （时间段）
            PYYYY-MM-DDThh:mm:ss
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeIntervalFormats.BasicDateTimeByStartAndDuration">
            <summary>
            基本日历和时间格式
            （开始和持续时间）
            例：1990年3月15日5时6分57秒开始持续2年10个月15天10小时20分钟30秒
              ：19900315T050657/P2Y10M15DT10H20M30S
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeIntervalFormats.ExtendedDateTimeByStartAndDuration">
            <summary>
            扩展日历和时间格式
            （开始和持续时间）
            例：1990年3月15日5时6分57秒开始持续2年10个月15天10小时20分钟30秒
              ：1990-03-15T05:06:57/P2Y10M15DT10H20M30S
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeIntervalFormats.BasicDateTimeByDurationAndEnd">
            <summary>
            基本日历和时间格式
            （持续时间和结束时间）
            例：持续2年10个月15天10小时20分钟30秒至1990年3月15日5时6分57秒结束
              ：P2Y10M15DT10H20M30S/19900315T050657
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeIntervalFormats.ExtendedDateTimeByDurationAndEnd">
            <summary>
            扩展日历和时间格式
            （持续时间结束时间）
            例：持续2年10个月15天10小时20分钟30秒至1990年3月15日5时6分57秒结束
              ：P2Y10M15DT10H20M30S/1990-03-15T05:06:57
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeIntervalFormats.ExtendedDateByDuration">
            <summary>
            扩展日期格式
            （时间段）
            例：持续2年6个月
              ：P0002-06
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeIntervalFormats.SymbolicHourByDuration">
            <summary>
            时间格式（符号表示）
            （时间段）
            例：持续72小时
              ：PT72H
            </summary>
        </member>
        <member name="T:Howell.Time.ISO8601TimeInterval">
            <summary>
            ISO8601标准的时长
            </summary>
        </member>
        <member name="M:Howell.Time.ISO8601TimeInterval.#ctor(System.TimeSpan)">
            <summary>
            创建ISO8601TimeInterval对象
            </summary>
            <param name="interval">时间段</param>
        </member>
        <member name="M:Howell.Time.ISO8601TimeInterval.#ctor(System.TimeSpan,Howell.Time.ISO8601TimeIntervalFormats)">
            <summary>
            创建ISO8601TimeInterval对象
            </summary>
            <param name="interval">时间段</param>
            <param name="format">ISO8601TimeInterval格式</param>
        </member>
        <member name="M:Howell.Time.ISO8601TimeInterval.#ctor(System.TimeSpan,System.DateTime)">
            <summary>
            创建ISO8601TimeInterval对象
            默认格式：YYYYMMDDThhmmss
            </summary>
            <param name="interval">时间段</param>
            <param name="end">结束时间</param>
        </member>
        <member name="M:Howell.Time.ISO8601TimeInterval.#ctor(System.TimeSpan,System.DateTime,Howell.Time.ISO8601TimeIntervalFormats)">
            <summary>
            创建ISO8601TimeInterval对象
            </summary>
            <param name="interval">时间段</param>
            <param name="end">结束时间</param>
            <param name="format">ISO8601TimeInterval格式</param>
        </member>
        <member name="M:Howell.Time.ISO8601TimeInterval.#ctor(System.DateTime,System.DateTime)">
            <summary>
            创建ISO8601TimeInterval对象
            默认格式：YYYYMMDDThhmmss
            </summary>
            <param name="start">开始时间</param>
            <param name="end">结束时间</param>
        </member>
        <member name="M:Howell.Time.ISO8601TimeInterval.#ctor(System.DateTime,System.DateTime,Howell.Time.ISO8601TimeIntervalFormats)">
            <summary>
            创建ISO8601TimeInterval对象
            </summary>
            <param name="start">开始时间</param>
            <param name="end">结束时间</param>
            <param name="format">ISO8601TimeInterval格式</param>
        </member>
        <member name="M:Howell.Time.ISO8601TimeInterval.#ctor(System.DateTime,System.TimeSpan)">
            <summary>
            创建ISO8601TimeInterval对象
            默认格式：YYYYMMDDThhmmss
            </summary>
            <param name="start">开始时间</param>
            <param name="interval">时间段</param>
        </member>
        <member name="M:Howell.Time.ISO8601TimeInterval.#ctor(System.DateTime,System.TimeSpan,Howell.Time.ISO8601TimeIntervalFormats)">
            <summary>
            创建ISO8601TimeInterval对象
            </summary>
            <param name="start">开始时间</param>
            <param name="interval">时间段</param>
            <param name="format">ISO8601TimeInterval格式</param>
        </member>
        <member name="M:Howell.Time.ISO8601TimeInterval.#ctor(System.DateTime,System.TimeSpan,System.DateTime,Howell.Time.ISO8601TimeIntervalFormats)">
            <summary>
            创建ISO8601TimeInterval对象
            </summary>
            <param name="start">开始时间</param>
            <param name="interval">时间段</param>
            <param name="end">结束时间</param>
            <param name="format">ISO8601TimeInterval格式</param>
        </member>
        <member name="M:Howell.Time.ISO8601TimeInterval.Parse(System.String)">
            <summary>
            解析时间段字符串
            </summary>
            <param name="s">时间段字符串</param>
            <returns>ISO8601TimeInterval实例</returns>
        </member>
        <member name="M:Howell.Time.ISO8601TimeInterval.TryParse(System.String,Howell.Time.ISO8601TimeInterval@)">
            <summary>
            尝试解析时间段字符串
            </summary>
            <param name="s">时间段字符串</param>
            <param name="timeInterval">输出ISO8601TimeInterval实例</param>
            <returns>解析成功返回true,失败返回false.</returns>
        </member>
        <member name="M:Howell.Time.ISO8601TimeInterval.Match2DateTime(System.Text.RegularExpressions.Match,Howell.Time.ISO8601TimeIntervalFormats,System.DateTime@,System.DateTime@)">
            <summary>
            生成由正则表达式解析的数据
            </summary>
            <param name="m">正则表达式解析类</param>
            <param name="format">ISO8601TimeInterval格式</param>
            <param name="start">所需要时间段的开始时间</param>
            <param name="end">所需要时间段的结束时间</param>
            <returns>时间段</returns>
        </member>
        <member name="M:Howell.Time.ISO8601TimeInterval.ToString">
            <summary>
            转换为ISO8601规范的时间段字符串 默认格式YYYYMMDD
            </summary>
            <returns>返回ISO8601规范的时间段字符串</returns>
        </member>
        <member name="M:Howell.Time.ISO8601TimeInterval.op_Addition(System.DateTime,Howell.Time.ISO8601TimeInterval)">
            <summary>
            开始时间+标准格式的持续时间
            </summary>
            <param name="start">开始时间</param>
            <param name="interval">时间段</param>
            <returns>带开始时间的时间段</returns>
        </member>
        <member name="M:Howell.Time.ISO8601TimeInterval.op_Subtraction(System.DateTime,Howell.Time.ISO8601TimeInterval)">
            <summary>
            结束时间-标准格式的持续时间
            </summary>
            <param name="end">结束时间</param>
            <param name="interval">时间段</param>
            <returns>带结束时间的时间段</returns>
        </member>
        <member name="P:Howell.Time.ISO8601TimeInterval.StartValue">
            <summary>
            起始日期
            </summary>
        </member>
        <member name="P:Howell.Time.ISO8601TimeInterval.EndValue">
            <summary>
            结束日期
            </summary>
        </member>
        <member name="P:Howell.Time.ISO8601TimeInterval.IntervalValue">
            <summary>
            间隔时间
            </summary>
        </member>
        <member name="P:Howell.Time.ISO8601TimeInterval.Format">
            <summary>
            时间间隔的格式
            </summary>
        </member>
        <member name="T:Howell.Time.ISO8601DateTimeHelper">
            <summary>
            ISO8601规范的日期时间数据工具
            </summary>
            <remarks>
            ISO8601 标准中 每周的第一天是Mon,最后一天是Sun
            Mon=1, Sun = 7    
            </remarks>
        </member>
        <member name="M:Howell.Time.ISO8601DateTimeHelper.GetDayOfWeek(System.DayOfWeek)">
            <summary>
            将星期几转换为整型
            </summary>
            <param name="dayofweek">星期几</param>
            <returns>返回1-7的整型1-Mon 2-Sun</returns>
        </member>
        <member name="M:Howell.Time.ISO8601DateTimeHelper.IsFirstDayOfWeek(System.DayOfWeek)">
            <summary>
            是否是一周的第一天
            </summary>
            <param name="dayofweek">星期几</param>
            <returns>如果是一周的第一天返回true,否则返回false.</returns>
        </member>
        <member name="M:Howell.Time.ISO8601DateTimeHelper.IsLastDayOfWeek(System.DayOfWeek)">
            <summary>
            是否是一周的最后一天
            </summary>
            <param name="dayofweek">星期几</param>
            <returns>如果是一周的最后一天返回true,否则返回false.</returns>
        </member>
        <member name="M:Howell.Time.ISO8601DateTimeHelper.GetWeekOfYear(System.DateTime)">
            <summary>
            获取一年中的第几周 1-53
            </summary>
            <param name="datetime">日期时间数据</param>
            <returns>返回一年中的第几周1-53</returns>
        </member>
        <member name="M:Howell.Time.ISO8601DateTimeHelper.GetDayOfYearByWeek(System.Int32,System.Int32,System.DayOfWeek)">
            <summary>
            获取一年的中第几天
            </summary>
            <param name="year">年份</param>
            <param name="weekofyear">第几周</param>
            <param name="dayofweek">星期几</param>
            <returns>一年的中第几天</returns>
        </member>
        <member name="M:Howell.Time.ISO8601DateTimeHelper.GetDayOfYearByWeek(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取一年的中第几天
            </summary>
            <param name="year">年份</param>
            <param name="weekofyear">第几周</param>
            <param name="dayofweek">星期几 1-Monday 7-Sunday</param>
            <returns>一年的中第几天</returns>
        </member>
        <member name="T:Howell.Threading.InvalidWaitHandle">
            <summary>
            无效的等待句柄
            </summary>
            <remarks>用于System.Threading.Timer.Dispose(WaitHandle)的方法</remarks>
        </member>
        <member name="M:Howell.Threading.InvalidWaitHandle.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Howell.Schedules.Plan">
            <summary>
            .NET 计划对象
            </summary>
        </member>
        <member name="M:Howell.Schedules.Plan.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:Howell.Schedules.Plan.SystemEvents_TimeChanged(System.Object,System.EventArgs)">
            <summary>
            系统时间被修改后触发的事件，主要用于修改系统时间后会出现计划任务时间不正确的问题
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Howell.Schedules.Plan.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            创建每日重复计划
            </summary>
            <param name="hour">时</param>
            <param name="minute">分</param>
            <param name="second">秒</param>
        </member>
        <member name="M:Howell.Schedules.Plan.#ctor(System.Int32,System.Int32,System.Int32,System.DayOfWeek)">
            <summary>
            创建每周重复计划
            </summary>
            <param name="hour">时</param>
            <param name="minute">分</param>
            <param name="second">秒</param>
            <param name="dayOfWeek">星期几</param>
        </member>
        <member name="M:Howell.Schedules.Plan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            创建一次性的计划
            </summary>
            <param name="year">年</param>
            <param name="month">月</param>
            <param name="day">日</param>
            <param name="hour">时</param>
            <param name="minute">分</param>
            <param name="second">秒</param>
        </member>
        <member name="M:Howell.Schedules.Plan.#ctor(Howell.Schedules.PlanTime)">
            <summary>
             创建计划
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Howell.Schedules.Plan.#ctor(System.DateTime)">
            <summary>
            创建一次性的计划
            </summary>
            <param name="time">一次性的计划触发时间</param>
        </member>
        <member name="M:Howell.Schedules.Plan.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.Nullable{System.DayOfWeek})">
            <summary>
            创建PlanTime对象
            </summary>
            <param name="year">年</param>
            <param name="month">月</param>
            <param name="day">日</param>
            <param name="hour">时</param>
            <param name="minute">分</param>
            <param name="second">秒</param>
            <param name="dayOfWeek">星期几</param>
        </member>
        <member name="M:Howell.Schedules.Plan.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.Nullable{System.DayOfWeek},System.Int32,System.TimeSpan,System.Boolean)">
            <summary>
            创建PlanTime对象
            </summary>
            <param name="year">年</param>
            <param name="month">月</param>
            <param name="day">日</param>
            <param name="hour">时</param>
            <param name="minute">分</param>
            <param name="second">秒</param>
            <param name="dayOfWeek">星期几</param>
            <param name="repeatTimes">重复提示次数,取值范围：[1,5]，默认为1次</param>
            <param name="repeatInterval">重复提示的间隔时间,取值范围: (5秒至30分钟)，默认为30秒.</param>
            <param name="enabled">是否启用计划，注意：如果在提示期间Enabled的值被修改，将不再继续RepeatTimes的后续提示，而是转而等待下次计划的触发。</param>
        </member>
        <member name="M:Howell.Schedules.Plan.#ctor(System.String,Howell.Schedules.PlanTime)">
            <summary>
            创建PlanTime对象
            </summary>
            <param name="id"></param>
            <param name="time">计划时间</param>
        </member>
        <member name="M:Howell.Schedules.Plan.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.Nullable{System.DayOfWeek},System.Int32,System.TimeSpan,System.Boolean)">
            <summary>
            创建PlanTime对象
            </summary>
            <param name="id"></param>
            <param name="year">年</param>
            <param name="month">月</param>
            <param name="day">日</param>
            <param name="hour">时</param>
            <param name="minute">分</param>
            <param name="second">秒</param>
            <param name="dayOfWeek">星期几</param>
            <param name="repeatTimes">重复提示次数,取值范围：[1,5]，默认为1次</param>
            <param name="repeatInterval">重复提示的间隔时间,取值范围: (5秒至30分钟)，默认为30秒.</param>
            <param name="enabled">是否启用计划，注意：如果在提示期间Enabled的值被修改，将不再继续RepeatTimes的后续提示，而是转而等待下次计划的触发。</param>
        </member>
        <member name="M:Howell.Schedules.Plan.Reset">
            <summary>
            重置计划
            </summary>
        </member>
        <member name="M:Howell.Schedules.Plan.Dispose">
            <summary>
            销毁计划对象
            </summary>
        </member>
        <member name="M:Howell.Schedules.Plan.Dispose(System.Boolean)">
            <summary>
            释放由 Plan 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
            <param name="disposing">为 true，则释放托管资源和非托管资源；为 false，则仅释放非托管资源。</param>
        </member>
        <member name="M:Howell.Schedules.Plan.RaiseReminding">
            <summary>
            触发计划开始事件
            </summary>
        </member>
        <member name="M:Howell.Schedules.Plan.AddRemindedTime">
            <summary>
            添加计划触发的时间
            </summary>
        </member>
        <member name="M:Howell.Schedules.Plan.GetNextRaisePeriod(System.Boolean)">
            <summary>
            获取下次触发事件的时间间隔
            </summary>
            <param name="needRepeat"></param>
            <returns>返回时间间隔</returns>
        </member>
        <member name="M:Howell.Schedules.Plan.PlanTimerCallBack(System.Object)">
            <summary>
            
            </summary>
            <param name="state"></param>
        </member>
        <member name="P:Howell.Schedules.Plan.Id">
            <summary>
            计划全局唯一ID
            </summary>
        </member>
        <member name="P:Howell.Schedules.Plan.RepeatInterval">
            <summary>
            重复提示的间隔时间,取值范围: (5秒至30分钟)，默认为30秒.
            </summary>
        </member>
        <member name="P:Howell.Schedules.Plan.RepeatTimes">
            <summary>
            重复提示次数,取值范围：[1,5]，默认为1次
            </summary>
        </member>
        <member name="P:Howell.Schedules.Plan.Enabled">
            <summary>
            是否启用计划提示功能
            注意：如果在提示期间Enabled的值被修改，将不再继续RepeatTimes的后续提示，而是转而等待下次计划的触发。
            </summary>
        </member>
        <member name="P:Howell.Schedules.Plan.Type">
            <summary>
            计划类型
            </summary>
        </member>
        <member name="P:Howell.Schedules.Plan.PlannedTime">
            <summary>
            获取计划时间
            </summary>
        </member>
        <member name="P:Howell.Schedules.Plan.Content">
            <summary>
            计划内容
            </summary>
        </member>
        <member name="P:Howell.Schedules.Plan.RemindedRecords">
            <summary>
            获取已通过计划提醒过的时间记录
            </summary>
        </member>
        <member name="P:Howell.Schedules.Plan.Tag">
            <summary>
            标记
            </summary>
        </member>
        <member name="E:Howell.Schedules.Plan.Reminding">
            <summary>
            计划提示事件
            </summary>
        </member>
        <member name="T:Howell.Schedules.DayOfWeekWorkSheetItemBeginningEventArgs">
            <summary>
            星期几的工作表项开始提示事件参数
            </summary>
        </member>
        <member name="M:Howell.Schedules.DayOfWeekWorkSheetItemBeginningEventArgs.#ctor(System.Int32,System.DayOfWeek)">
            <summary>
            创建  Howell.Schedules.DayOfWeekWorkSheetItemBeginningEventArgs 对象
            </summary>
            <param name="index">项的索引值</param>
            <param name="dayOfWeek">星期几</param>
        </member>
        <member name="P:Howell.Schedules.DayOfWeekWorkSheetItemBeginningEventArgs.Index">
            <summary>
            项的索引值
            </summary>
        </member>
        <member name="P:Howell.Schedules.DayOfWeekWorkSheetItemBeginningEventArgs.DayOfWeek">
            <summary>
            星期几
            </summary>
        </member>
        <member name="T:Howell.Schedules.DayOfWeekWorkSheetItemEndingEventArgs">
            <summary>
            星期几的工作表项结束提示事件参数
            </summary>
        </member>
        <member name="M:Howell.Schedules.DayOfWeekWorkSheetItemEndingEventArgs.#ctor(System.Int32,System.DayOfWeek)">
            <summary>
            创建  Howell.Schedules.DayOfWeekWorkSheetItemEndingEventArgs 对象
            </summary>
            <param name="index">项的索引值</param>
            <param name="dayOfWeek">星期几</param>
        </member>
        <member name="P:Howell.Schedules.DayOfWeekWorkSheetItemEndingEventArgs.Index">
            <summary>
            项的索引值
            </summary>
        </member>
        <member name="P:Howell.Schedules.DayOfWeekWorkSheetItemEndingEventArgs.DayOfWeek">
            <summary>
            星期几
            </summary>
        </member>
        <member name="T:Howell.Schedules.DayOfWeekWorkSheet">
            <summary>
            指定星期几的工作表
            </summary>
        </member>
        <member name="M:Howell.Schedules.DayOfWeekWorkSheet.#ctor(System.DayOfWeek)">
            <summary>
            创建 Howell.Schedules.DayOfWeekWorkSheet 对象
            </summary>
            <param name="dayOfWeek">星期几</param>
        </member>
        <member name="M:Howell.Schedules.DayOfWeekWorkSheet.Dispose">
            <summary>
            销毁 Howell.Schedules.DayOfWeekWorkSheet 对象
            </summary>
        </member>
        <member name="E:Howell.Schedules.DayOfWeekWorkSheet.DayOfWeekWorkSheetItemBeginning">
            <summary>
            开始提示事件
            </summary>
        </member>
        <member name="E:Howell.Schedules.DayOfWeekWorkSheet.DayOfWeekWorkSheetItemEnding">
            <summary>
            结束提示事件
            </summary>
        </member>
        <member name="P:Howell.Schedules.DayOfWeekWorkSheet.AllowConflict">
            <summary>
            是否允许时间段冲突，默认是 false即不允许。
            </summary>
        </member>
        <member name="P:Howell.Schedules.DayOfWeekWorkSheet.DayOfWeek">
            <summary>
            星期几
            </summary>
        </member>
        <member name="P:Howell.Schedules.DayOfWeekWorkSheet.Items">
            <summary>
            获取包含控件中所有项的集合。
            </summary>
        </member>
        <member name="T:Howell.Schedules.DayOfWeekWorkSheet.DayOfWeekWorkSheetItemCollection">
            <summary>
            星期几的工作表项容器
            </summary>
        </member>
        <member name="M:Howell.Schedules.DayOfWeekWorkSheet.DayOfWeekWorkSheetItemCollection.#ctor(Howell.Schedules.DayOfWeekWorkSheet)">
            <summary>
            创建工作表项容器
            </summary>
            <param name="owner">容器拥有者</param>
        </member>
        <member name="M:Howell.Schedules.DayOfWeekWorkSheet.DayOfWeekWorkSheetItemCollection.Add(System.DateTime,System.DateTime)">
            <summary>
            将现有的 Howell.Schedules.DayOfWeekWorkSheetItem 添加到集合中。
            </summary>
            <param name="beginTime">开始时间</param>
            <param name="endTime">结束时间</param>
            <returns>已添加到集合中的 Howell.Schedules.DayOfWeekWorkSheetItem。</returns>
        </member>
        <member name="M:Howell.Schedules.DayOfWeekWorkSheet.DayOfWeekWorkSheetItemCollection.Add(System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            将现有的 Howell.Schedules.DayOfWeekWorkSheetItem 添加到集合中。
            </summary>
            <param name="beginTime">开始时间</param>
            <param name="endTime">结束时间</param>
            <param name="enabled">是否启用</param>
            <returns>已添加到集合中的 Howell.Schedules.DayOfWeekWorkSheetItem。</returns>
        </member>
        <member name="M:Howell.Schedules.DayOfWeekWorkSheet.DayOfWeekWorkSheetItemCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             将现有的 Howell.Schedules.DayOfWeekWorkSheetItem 添加到集合中。
            </summary>
            <param name="beginHour">开始时间的小时值</param>
            <param name="beginMinute">开始时间的分钟值</param>
            <param name="beginSecond">开始时间的秒值</param>
            <param name="endHour">结束时间的小时值</param>
            <param name="endMinute">结束时间的分钟值</param>
            <param name="endSecond">结束时间的秒值</param>
            <returns>已添加到集合中的 Howell.Schedules.DayOfWeekWorkSheetItem。</returns>
        </member>
        <member name="M:Howell.Schedules.DayOfWeekWorkSheet.DayOfWeekWorkSheetItemCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            将现有的 Howell.Schedules.DayOfWeekWorkSheetItem 添加到集合中。
            </summary>
            <param name="beginHour">开始时间的小时值</param>
            <param name="beginMinute">开始时间的分钟值</param>
            <param name="beginSecond">开始时间的秒值</param>
            <param name="endHour">结束时间的小时值</param>
            <param name="endMinute">结束时间的分钟值</param>
            <param name="endSecond">结束时间的秒值</param>
            <param name="enabled">是否启用</param>
            <returns>已添加到集合中的 Howell.Schedules.DayOfWeekWorkSheetItem。</returns>
        </member>
        <member name="M:Howell.Schedules.DayOfWeekWorkSheet.DayOfWeekWorkSheetItemCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            将现有的 Howell.Schedules.DayOfWeekWorkSheetItem 添加到集合中。
            </summary>
            <param name="beginHour">开始时间的小时值</param>
            <param name="beginMinute">开始时间的分钟值</param>
            <param name="beginSecond">开始时间的秒值</param>
            <param name="endHour">结束时间的小时值</param>
            <param name="endMinute">结束时间的分钟值</param>
            <param name="endSecond">结束时间的秒值</param>
            <param name="enabled">是否启用</param>
            <param name="content">项内容</param>
            <returns>已添加到集合中的 Howell.Schedules.DayOfWeekWorkSheetItem。</returns>
        </member>
        <member name="M:Howell.Schedules.DayOfWeekWorkSheet.DayOfWeekWorkSheetItemCollection.Remove(Howell.Schedules.DayOfWeekWorkSheetItem)">
            <summary>
            从集合中移除指定的项。
            </summary>
            <param name="item">Howell.Schedules.DayOfWeekWorkSheetItem，表示要从集合中移除的项。</param>
        </member>
        <member name="M:Howell.Schedules.DayOfWeekWorkSheet.DayOfWeekWorkSheetItemCollection.RemoveAt(System.Int32)">
            <summary>
            移除集合中指定索引处的项。
            </summary>
            <param name="index">从零开始的索引（属于要移除的项）。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index 参数小于零或大于等于 Howell.Schedules.DayOfWeekWorkSheet.DayOfWeekWorkSheetItemCollection 的 Howell.Schedules.DayOfWeekWorkSheet.DayOfWeekWorkSheetItemCollection.Count
            </exception>
        </member>
        <member name="M:Howell.Schedules.DayOfWeekWorkSheet.DayOfWeekWorkSheetItemCollection.Clear">
            <summary>
            从集合中移除所有项。
            </summary>
        </member>
        <member name="M:Howell.Schedules.DayOfWeekWorkSheet.DayOfWeekWorkSheetItemCollection.IndexOf(Howell.Schedules.DayOfWeekWorkSheetItem)">
            <summary>
            返回指定的项在集合中的索引。
            </summary>
            <param name="item">Howell.Schedules.DayOfWeekWorkSheetItem，表示要在集合中查找的项。</param>
            <returns>项在集合中的位置的从零开始的索引；如果项不在集合中，则为 -1。</returns>
        </member>
        <member name="M:Howell.Schedules.DayOfWeekWorkSheet.DayOfWeekWorkSheetItemCollection.Contains(Howell.Schedules.DayOfWeekWorkSheetItem)">
            <summary>
            确定指定项是否位于集合内。
            </summary>
            <param name="item">Howell.Schedules.DayOfWeekWorkSheetItem，表示要在集合中查找的项。</param>
            <returns>如果集合中包含该项，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Howell.Schedules.DayOfWeekWorkSheet.DayOfWeekWorkSheetItemCollection.IsConflict(System.DateTime,System.DateTime)">
            <summary>
            判断时间段是否和集合内的时间段有冲突
            </summary>
            <param name="beginTime">需要判断的时间段开始时间</param>
            <param name="endTime">需要判断的时间段结束时间</param>
            <returns>如果和集合内的时间段有冲突则返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Schedules.DayOfWeekWorkSheet.DayOfWeekWorkSheetItemCollection.IsConflict(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            判断时间段是否和集合内的时间段有冲突
            </summary>
            <param name="beginHour">需要判断的时间段开始时间的小时值</param>
            <param name="beginMinute">需要判断的时间段开始时间的分钟值</param>
            <param name="beginSecond">需要判断的时间段开始时间的秒值</param>
            <param name="endHour">需要判断的时间段结束时间的小时值</param>
            <param name="endMinute">需要判断的时间段结束时间的分钟值</param>
            <param name="endSecond">需要判断的时间段结束时间的秒值</param>
            <returns>如果和集合内的时间段有冲突则返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Schedules.DayOfWeekWorkSheet.DayOfWeekWorkSheetItemCollection.GetEnumerator">
            <summary>
            返回一个枚举数，将使用该枚举数循环访问项集合。
            </summary>
            <returns> System.Collections.IEnumerator，表示项集合。</returns>
        </member>
        <member name="P:Howell.Schedules.DayOfWeekWorkSheet.DayOfWeekWorkSheetItemCollection.Count">
            <summary>
            集合中元素的数量
            </summary>
        </member>
        <member name="P:Howell.Schedules.DayOfWeekWorkSheet.DayOfWeekWorkSheetItemCollection.Item(System.Int32)">
            <summary>
            获取集合中指定索引处的项。
            </summary>
            <param name="index">集合中要获取或设置的项的索引。</param>
            <returns>Howell.Schedules.DayOfWeekWorkSheetItem，表示位于集合内指定索引处的项。</returns>
        </member>
        <member name="E:Howell.Schedules.DayOfWeekWorkSheet.DayOfWeekWorkSheetItemCollection.DayOfWeekWorkSheetItemBeginning">
            <summary>
            开始提示事件
            </summary>
        </member>
        <member name="E:Howell.Schedules.DayOfWeekWorkSheet.DayOfWeekWorkSheetItemCollection.DayOfWeekWorkSheetItemEnding">
            <summary>
            结束提示事件
            </summary>
        </member>
        <member name="T:Howell.Drawing.PictureFormat">
            <summary>
            常用图片格式枚举类型
            </summary>
        </member>
        <member name="F:Howell.Drawing.PictureFormat.None">
            <summary>
            未知格式
            </summary>
        </member>
        <member name="F:Howell.Drawing.PictureFormat.Bmp">
            <summary>
            BMP：Windows 位图
            Windows 位图可以用任何颜色深度（从黑白到 24 位颜色）存储单个光栅图像。Windows 位图文件格式与其他 Microsoft Windows 程序兼容。它不支持文件压缩，也不适用于 Web 页。从总体上看，Windows 位图文件格式的缺点超过了它的优点。为了保证照片图像的质量，请使用 PNG 文件、JPEG 文件或 TIFF 文件。BMP 文件适用于 Windows 中的墙纸。
            优点： BMP 支持 1 位到 24 位颜色深度。BMP 格式与现有 Windows 程序（尤其是较旧的程序）广泛兼容。
            缺点： BMP 不支持压缩，这会造成文件非常大。BMP 文件不受 Web 浏览器支持。
            </summary>
        </member>
        <member name="F:Howell.Drawing.PictureFormat.Pcx">
            <summary>
            PCX：PC 画笔
            “PC 画笔”图片（也被称为 Z-Soft 位图）会以任何颜色深度存储单个光栅图像。画笔图片更广泛地用于较早的 Windows 程序和基于 MS-DOS 的程序。画笔图片与许多较新的程序兼容。PCX 图片支持“行程长度编码”(RLE) 内部压缩。
            优点： PCX 在许多基于 Windows 的程序和基于 MS-DOS 的程序间是标准格式。PCX 支持内部压缩。
            缺点：PCX 不受 Web 浏览器支持。
            </summary>　　
        </member>
        <member name="F:Howell.Drawing.PictureFormat.Png">
            <summary>
            PNG：可移植网络图形
            PNG 图片以任何颜色深度存储单个光栅图像。PNG 是与平台无关的格式。
            优点： PNG 支持高级别无损耗压缩。PNG 支持 alpha 通道透明度。PNG 支持伽玛校正。 PNG 支持交错。PNG 受最新的 Web 浏览器支持。
            缺点： 较旧的浏览器和程序可能不支持 PNG 文件。作为 Internet 文件格式，与 JPEG 的有损耗压缩相比，PNG 提供的压缩量较少。作为 Internet 文件格式，PNG 对多图像文件或动画文件不提供任何支持。GIF 格式支持多图像文件和动画文件。
            </summary>　　
        </member>
        <member name="F:Howell.Drawing.PictureFormat.Jpeg">
            <summary>
            JPEG：联合摄影专家组
            JPEG 图片以 24 位颜色存储单个光栅图像。JPEG 是与平台无关的格式，支持最高级别的压缩，不过，这种压缩是有损耗的。渐近式 JPEG 文件支持交错。可以提高或降低 JPEG 文件压缩的级别。但是，文件大小是以图像质量为代价的。压缩比率可以高达 100:1。（JPEG 格式可在 10:1 到 20:1 的比率下轻松地压缩文件，而图片质量不会下降。）JPEG 压缩可以很好地处理写实摄影作品。但是，对于颜色较少、对比级别强烈、实心边框或纯色区域大的较简单的作品，JPEG 压缩无法提供理想的结果。有时，压缩比率会低到 5:1，严重损失了图片完整性。这一损失产生的原因是，JPEG 压缩方案可以很好地压缩类似的色调，但是 JPEG 压缩方案不能很好地处理亮度的强烈差异或处理纯色区域。
            优点： 摄影作品或写实作品支持高级压缩。利用可变的压缩比可以控制文件大小。支持交错（对于渐近式 JPEG 文件）。JPEG 广泛支持 Internet 标准。
            缺点：有损耗压缩会使原始图片数据质量下降。当您编辑和重新保存 JPEG 文件时，JPEG 会混合原始图片数据的质量下降。这种下降是累积性的。JPEG 不适用于所含颜色很少、具有大块颜色相近的区域或亮度差异十分明显的较简单的图片。
            </summary>
        </member>
        <member name="F:Howell.Drawing.PictureFormat.Gif">
            <summary>
            GIF：图形交换格式
            GIF 图片以 8 位颜色或 256 色存储单个光栅图像数据或多个光栅图像数据。GIF 图片支持透明度、压缩、交错和多图像图片（动画 GIF）。GIF 透明度不是 alpha 通道透明度，不能支持半透明效果。GIF 压缩是 LZW 压缩，压缩比大概为 3:1。GIF 文件规范的 GIF89a 版本中支持动画 GIF。
            优点： GIF 广泛支持 Internet 标准。支持无损耗压缩和透明度。动画 GIF 很流行，易于使用许多 GIF 动画程序创建。
            缺点：GIF 只支持 256 色调色板，因此，详细的图片和写实摄影图像会丢失颜色信息，而看起来却是经过调色的。 •在大多数情况下，无损耗压缩效果不如 JPEG 格式或 PNG 格式。 GIF 支持有限的透明度，没有半透明效果或褪色效果（例如，alpha 通道透明度提供的效果）。
            </summary>
        </member>
        <member name="F:Howell.Drawing.PictureFormat.Tiff">
            <summary>
            TIFF：标记图像文件格式
            TIFF 以任何颜色深度存储单个光栅图像。TIFF 可以被认为是印刷行业中受到支持最广的图形文件格式。TIFF 支持可选压缩，不适用于在 Web 浏览器中查看。TIFF 格式是可扩展的格式。这意味着程序员可以修改原始规范以添加功能或满足特定的需要。修改规范可能会导致不同类型的 TIFF 图片之间不兼容。
            优点：TIFF 是广泛支持的格式，尤其是在 Macintosh 计算机和基于 Windows 的计算机之间。支持可选压缩。可扩展格式支持许多可选功能。
            缺点： TIFF 不受 Web 浏览器支持。 可扩展性会导致许多不同类型的 TIFF 图片。并不是所有 TIFF 文件都与所有支持基本 TIFF 标准的程序兼容。
            </summary>
        </member>
        <member name="F:Howell.Drawing.PictureFormat.Dxf">
            <summary>
            DXF：AutoCAD 绘图交换文件DXF 是 Autodesk AutoCAD 程序使用的基于矢量的 ASCII 格式。AutoCAD 可以提供非常详细的完全可以缩放的图表。
            优点：您可以使用 AutoCAD 创建非常详细和精确的图表和图形。 AutoCAD 文件在建筑、设计和雕刻行业很流行。
            缺点： AutoCAD 在 Office 中受到的支持很有限，Office 支持 R12 之前的 AutoCAD 版本。 AutoCAD 具有很陡的学习曲线。请注意，其他图形程序也可以导出 DXF 图片。
            </summary>
        </member>
        <member name="F:Howell.Drawing.PictureFormat.Cgm">
            <summary>
            CGM：计算机图形图元文件
            CGM 图元文件可以包含矢量信息和位图信息。它是由许多组织和政府机构（包括“英国标准协会”(BSI)、“美国国家标准协会”(ANSI) 和美国国防部）使用的国际性标准化文件格式。
            优点：CGM 是国际标准格式。
            </summary>
        </member>
        <member name="F:Howell.Drawing.PictureFormat.Cdr">
            <summary>
            CDR：CorelDRAW!CorelDRAW! 图元文件可以同时包含矢量信息和位图信息。
            优点： CDR 广泛用于印前行业和艺术设计行业。
            缺点： CDR 在 Office 中受到的支持很有限，Office 支持 CorelDRAW! 6 版和更早版本。
            </summary>
        </member>
        <member name="F:Howell.Drawing.PictureFormat.Wmf">
            <summary>
            WMF：Windows 图元文件
            “Windows 图元文件”是 16 位图元文件格式，可以同时包含矢量信息和位图信息。它针对 Windows 操作系统进行了优化。
            优点：WMF 是 Windows 标准格式，可很好地在 Office 中使用。
            </summary>
        </member>
        <member name="F:Howell.Drawing.PictureFormat.Eps">
            <summary>
            EPS：Encapsulated PostScript
            “Encapsulated PostScript”格式是一种专用的打印机描述语言，可以描述矢量信息和位图信息。
            优点：EPS 可在任何 PostScript 打印机上进行准确的效果呈现。 EPS 是行业标准格式
            缺点： 屏幕显示可能与输出的显示不一致。屏幕呈现可能会是低分辨率的，可能会是不同图像，或只是占位符图像。EPS 文件旨在用于输出。它们不是用于在屏幕上显示信息的最适合的格式。
            </summary>
        </member>
        <member name="F:Howell.Drawing.PictureFormat.Emf">
            <summary>
            EMF：增强型图元文件
            “增强型图元文件”是 32 位格式，可以同时包含矢量信息和位图信息。此格式是对“Windows 图元文件格式”的改进，包含了一些扩展功能，例如，下面的功能：内置的缩放比例信息 • 与文件一起保存的内置说明调色板和设备独立性方面的改进EMF 格式是可扩展的格式，这意味着程序员可以修改原始规范以添加功能或满足特定的需要。此修改可能会导致不同类型的 EMF 图片之间不兼容。
            优点： 可扩展的文件格式 与 WMF 相比，经过改进的功能
            缺点： 可扩展性会导致许多不同类型的 EMF 图片，并不是所有 EMF 文件都与所有支持 EMF 标准的程序兼容。
            </summary>
        </member>
        <member name="F:Howell.Drawing.PictureFormat.Pict">
            <summary>
            PICT：Macintosh 图片
            PICT 文件是用于 Macintosh 计算机的 32 位图元文件格式。PICT 文件使用“行程长度编码”(RLE) 内部压缩，该内部压缩工作相当良好。如果安装了 QuickTime，则 PICT 文件支持 JPEG 压缩（仅限 Macintosh）。
            优点： PICT 是用于 Macintosh 计算机屏幕显示的最佳文件格式。当您从 Macintosh 计算机输出到非 PostScript 打印机时，PICT 是要使用的最佳输出格式。
            缺点：在平台间移动它们时，字体可能显示得不正确。必须安装 QuickTime 才能正确查看某些 PICT 文件。分辨率和颜色深度这一部分讨论了用于光栅图片的适当颜色深度和分辨率。如果您保存图片时使用了正确的分辨率和颜色设置，您就会创建出较小的文件。较小的文件意味着更小、更快的文档和演示文稿.
            </summary>
        </member>
        <member name="T:Howell.Drawing.D2.SizeI">
            <summary>
            大小
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.SizeI.RegularExpressionString">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.SizeI.Empty">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:Howell.Drawing.D2.SizeI.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor 
            </summary>
            <param name="width">宽度</param>
            <param name="height">高度</param>
        </member>
        <member name="M:Howell.Drawing.D2.SizeI.Parse(System.String)">
            <summary>
            解析图形大小的字符串形式
            </summary>
            <param name="value">字符串</param>
            <returns>如果解析成功，返回SizeI类型，否则将抛出异常</returns>
            <exception cref="T:System.FormatException">非法的字符串格式。</exception>
        </member>
        <member name="M:Howell.Drawing.D2.SizeI.ToString">
            <summary>
            获取图形大小的字符串形式
            </summary>
            <returns>返回字符串形式</returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeI.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:Howell.Drawing.D2.SizeI"/> equal to the specified one.
            </summary>
            <param name="obj">Another point to check equalty to.</param>
            <returns>Return <see langword="true"/> if objects are equal.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeI.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            <returns>Returns the hash code for this instance.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeI.op_Explicit(Howell.Drawing.D2.SizeI)~Howell.Drawing.D2.PointI">
            <summary>
            显示转换Size 2 Point
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeI.op_Implicit(Howell.Drawing.D2.SizeI)~Howell.Drawing.D2.SizeD">
            <summary>
            隐式转换SizeD To SizeI
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeI.op_Equality(Howell.Drawing.D2.SizeI,Howell.Drawing.D2.SizeI)">
            <summary>
            equals operator - checks if two point is the same.
            </summary>
            <param name="s1">SizeI object 1.</param>
            <param name="s2">SizeI object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeI.op_Inequality(Howell.Drawing.D2.SizeI,Howell.Drawing.D2.SizeI)">
            <summary>
            equals operator - checks if two point is not the same.
            </summary>
            <param name="s1">SizeI object 1.</param>
            <param name="s2">SizeI object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeI.op_Addition(Howell.Drawing.D2.SizeI,Howell.Drawing.D2.SizeI)">
            <summary>
            加运算
            </summary>
            <param name="sz1"></param>
            <param name="sz2"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeI.op_Subtraction(Howell.Drawing.D2.SizeI,Howell.Drawing.D2.SizeI)">
            <summary>
            减运算
            </summary>
            <param name="sz1"></param>
            <param name="sz2"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeI.Equals(Howell.Drawing.D2.SizeI)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeI.CompareTo(Howell.Drawing.D2.SizeI)">
            <summary>
            CompareTo Width1*Height1 - Width2*Height2
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeI.CompareTo(System.Object)">
            <summary>
            CompareTo
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Howell.Drawing.D2.SizeI.IsEmpty">
            <summary>
            是否为空对象
            </summary>
            <returns>True表示为空，否则返回False.</returns>
        </member>
        <member name="P:Howell.Drawing.D2.SizeI.Width">
            <summary>
            宽度
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.SizeI.Height">
            <summary>
            高度
            </summary>
        </member>
        <member name="T:Howell.Drawing.D2.CircleD">
            <summary>
            圆
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.CircleD.RegularExpressionString">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.CircleD.Empty">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:Howell.Drawing.D2.CircleD.#ctor(Howell.Drawing.D2.PointD,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="center">中心点</param>
            <param name="radius">半径</param>
        </member>
        <member name="M:Howell.Drawing.D2.CircleD.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x">中心点X轴坐标</param>
            <param name="y">中心点Y轴坐标</param>
            <param name="radius">半径</param>
        </member>
        <member name="M:Howell.Drawing.D2.CircleD.Parse(System.String)">
            <summary>
            解析圆形的字符串形式
            </summary>
            <param name="value">字符串</param>
            <returns>如果解析成功，返回CircleD类型，否则将抛出异常</returns>
            <exception cref="T:System.FormatException">非法的字符串格式。</exception>
        </member>
        <member name="M:Howell.Drawing.D2.CircleD.ToString">
            <summary>
            获取圆形的字符串形式
            </summary>
            <returns>返回圆形字符串形式</returns>
        </member>
        <member name="M:Howell.Drawing.D2.CircleD.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:Howell.Drawing.D2.CircleD"/> equal to the specified one.
            </summary>
            <param name="obj">Another point to check equalty to.</param>
            <returns>Return <see langword="true"/> if objects are equal.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.CircleD.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            <returns>Returns the hash code for this instance.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.CircleD.op_Equality(Howell.Drawing.D2.CircleD,Howell.Drawing.D2.CircleD)">
            <summary>
            equals operator - checks if two ellipse is the same.
            </summary>
            <param name="c1">Circle object 1.</param>
            <param name="c2">Circle object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.CircleD.op_Inequality(Howell.Drawing.D2.CircleD,Howell.Drawing.D2.CircleD)">
            <summary>
            equals operator - checks if two ellipse is not the same.
            </summary>
            <param name="c1">CircleI object 1.</param>
            <param name="c2">CircleI object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.CircleD.op_Explicit(Howell.Drawing.D2.CircleD)~Howell.Drawing.D2.CircleI">
            <summary>
            隐式转换 CircleI To CircleD
            </summary>
            <param name="circle"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.CircleD.Equals(Howell.Drawing.D2.CircleD)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Howell.Drawing.D2.CircleD.X">
            <summary>
            中心点X轴坐标
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.CircleD.Y">
            <summary>
            中心点Y轴坐标
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.CircleD.Center">
            <summary>
            中心点
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.CircleD.Radius">
            <summary>
            半径
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.CircleD.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="T:Howell.Conditions.DefaultComparer`1">
            <summary>
            By letting the methods of the ValidatorExtensions class call this static field, it saves us a call to 
            the Comparer{T}.get_Default() method.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
        </member>
        <member name="T:Howell.Capability.EnumInt32">
            <summary>
            枚举Int32
            </summary>
        </member>
        <member name="F:Howell.Capability.EnumInt32.m_Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="M:Howell.Capability.EnumInt32.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Howell.Capability.EnumInt32.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="val">数值</param>
        </member>
        <member name="M:Howell.Capability.EnumInt32.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns>返回字符串。</returns>
        </member>
        <member name="P:Howell.Capability.EnumInt32.Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="P:Howell.Capability.EnumInt32.TextSpecified">
            <summary>
            是否包含Text XML属性
            </summary>
        </member>
        <member name="P:Howell.Capability.EnumInt32.Text">
            <summary>
            文本内容
            </summary>
        </member>
        <member name="T:Howell.Text.NameValuePair">
            <summary>
            NameValuePair
            </summary>
        </member>
        <member name="M:Howell.Text.NameValuePair.#ctor(System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="length"></param>
        </member>
        <member name="P:Howell.Text.NameValuePair.Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:Howell.Text.NameValuePair.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Howell.Text.NameValuePair.Next">
            <summary>
            
            </summary>
        </member>
        <member name="P:Howell.Text.NameValuePair.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Howell.Reflection.RunTimePropertyInfo">
            <summary>
            运行时属性信息
            </summary>
        </member>
        <member name="M:Howell.Reflection.RunTimePropertyInfo.#ctor(System.String,System.Type,System.Boolean,System.Boolean)">
            <summary>
            构造
            </summary>
            <param name="name"></param>
            <param name="propertyType"></param>
            <param name="canRead"></param>
            <param name="canWrite"></param>
        </member>
        <member name="P:Howell.Reflection.RunTimePropertyInfo.Name">
            <summary>
            获取此属性的名称。
            </summary>
        </member>
        <member name="P:Howell.Reflection.RunTimePropertyInfo.PropertyType">
            <summary>
             获取此属性的类型。
            </summary>
        </member>
        <member name="P:Howell.Reflection.RunTimePropertyInfo.CanRead">
            <summary>
             获取一个值，该值指示该属性是否可读。
            </summary>
        </member>
        <member name="P:Howell.Reflection.RunTimePropertyInfo.CanWrite">
            <summary>
             获取一个值，该值指示此属性是否可写。
            </summary>
        </member>
        <member name="T:Howell.IO.Serialization.BitSerializer">
            <summary>
            Bit序列化器
            </summary>
        </member>
        <member name="F:Howell.IO.Serialization.BitSerializer.m_Type">
            <summary>
            可序列化类型
            </summary>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.#ctor">
            <summary>
            初始化 BitSerializer 类的新实例。
            </summary>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.#ctor(System.Type)">
            <summary>
            初始化 BitSerializer 类的新实例。
            </summary>
            <param name="type">此 BitSerializer 可序列化的对象的类型。</param>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.TypeIsString(System.Type)">
            <summary>
            是否是字符串
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.TypeIsStruct(System.Type)">
            <summary>
            是否是结构
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.GetProperties(System.Object,System.Type[]@,System.Object[]@,Howell.IO.BitFormatElementAttribute[]@)">
            <summary>
            获取对象下所有属性
            </summary>
            <param name="o"></param>
            <param name="types"></param>
            <param name="values"></param>
            <param name="attributes"></param>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.GetProperties">
            <summary>
            获取序列化类型下所有属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.GetEnumValue(System.Type,System.Object)">
            <summary>
            获取枚举值
            </summary>
            <param name="type">枚举类型</param>
            <param name="value">数值</param>
            <returns>枚举值</returns>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.IsBitSerializable(Howell.IO.BitWriter,System.Object)">
            <summary>
            是否继承自IBitSerializable
            </summary>
            <param name="writer">写入器</param>
            <param name="o">序列化对象</param>
            <returns>是/否</returns>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.IsBitSerializable(Howell.IO.BitReader,System.Object)">
            <summary>
            是否继承自IBitSerializable
            </summary>
            <param name="reader">读取器</param>
            <param name="o">触发对象</param>
            <returns>是/否</returns>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.GetBitFormatElementAttribute(System.Reflection.PropertyInfo)">
            <summary>
            获取属性特性
            </summary>
            <param name="property">属性</param>
            <returns>特性</returns>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.FromTypes(System.Type[])">
            <summary>
            返回从类型数组创建的 BitSerializer 对象的数组。
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.SerializeClass(System.Type,System.Object,Howell.IO.BitWriter,System.Text.Encoding)">
            <summary>
            序列化Class对象
            </summary>
            <param name="type"></param>
            <param name="o"></param>
            <param name="writer"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.SerializeString(Howell.IO.BitWriter,System.String,Howell.IO.BitFormatElementAttribute,System.Text.Encoding)">
            <summary>
            序列化String对象
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="attribute"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.SerializeArray(System.Object,Howell.IO.BitWriter,Howell.IO.BitFormatElementAttribute,System.Text.Encoding)">
            <summary>
            序列化数组
            </summary>
            <param name="value"></param>
            <param name="writer"></param>
            <param name="attribute"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.SerializeValue(System.Type,System.Object,Howell.IO.BitWriter,System.Text.Encoding)">
            <summary>
            序列化值类型
            </summary>
            <param name="type">序列化类型</param>
            <param name="value">值</param>
            <param name="writer">写入器</param>
            <param name="encoding">序列化编码样式。</param>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.SerializeAnalyse(System.Type,System.Object,Howell.IO.BitWriter,Howell.IO.BitFormatElementAttribute,System.Text.Encoding)">
            <summary>
            分析需要哪种序列化
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <param name="writer"></param>
            <param name="attribute"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.Serialize(Howell.IO.BitWriter,System.Object,System.Text.Encoding)">
            <summary>
            使用指定的 BitWriter 序列化指定的 System.Object。
            </summary>
            <param name="writer">写入器</param>
            <param name="o">将要序列化的 System.Object。</param>
            <param name="encoding">编码类型(默认UTF8)</param>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.Serialize(Howell.IO.BitStream,System.Object)">
            <summary>
            使用指定的 System.IO.Stream 序列化指定的 System.Object。
            </summary>
            <param name="stream">数据流</param>
            <param name="o">将要序列化的 System.Object。</param>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.Serialize(Howell.IO.BitStream,System.Object,System.Text.Encoding)">
            <summary>
            使用指定的 System.IO.Stream 序列化指定的 System.Object。
            </summary>
            <param name="stream">数据流</param>
            <param name="o">将要序列化的 System.Object。</param>
            <param name="encoding">编码类型(默认UTF8)</param>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.Serialize(Howell.IO.BitWriter,System.Object)">
            <summary>
            使用指定的 BitWriter 序列化指定的 System.Object。
            </summary>
            <param name="writer">写入器</param>
            <param name="o">将要序列化的 System.Object。</param>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.DeserializeClass(System.Type,Howell.IO.BitReader)">
            <summary>
            反序列化类
            </summary>
            <param name="type">类型</param>
            <param name="reader">读取器</param>
            <returns>反序列化对象</returns>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.DeserializeString(Howell.IO.BitReader,Howell.IO.BitFormatElementAttribute)">
            <summary>
            反序列化字符串
            </summary>
            <param name="reader">读取器</param>
            <param name="attribute"></param>
            <returns>字符串</returns>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.DeserializeArray(System.Type,Howell.IO.BitReader,Howell.IO.BitFormatElementAttribute,System.Text.Encoding)">
            <summary>
            反序列化数组
            </summary>
            <param name="type">序列化类型</param>
            <param name="reader">读取器</param>
            <param name="attribute"></param>
            <param name="encoding">编码类型(默认UTF8)</param>
            <returns>数组</returns>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.DeserializeValue(System.Type,Howell.IO.BitReader,System.Text.Encoding)">
            <summary>
            反序列化值类型
            </summary>
            <param name="type">类型</param>
            <param name="reader">读取器</param>
            <param name="encoding">编码类型(默认UTF8)</param>
            <returns>获得值对象</returns>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.DeserializeAnalyse(System.Type,Howell.IO.BitReader,Howell.IO.BitFormatElementAttribute,System.Text.Encoding)">
            <summary>
            反序列化分析
            </summary>
            <param name="type">分析类型</param>
            <param name="reader">读取器</param>
            <param name="attribute"></param>
            <param name="encoding">编码类型(默认UTF8)</param>
            <returns>反序列化得到的对象</returns>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.Deserialize(Howell.IO.BitReader,System.Text.Encoding)">
            <summary>
            反序列化指定 System.IO.Stream 包含的 Bit 数据。
            </summary>
            <param name="reader">包含要反序列化的 XML 文档的 BitReader。</param>
            <param name="encoding">序列化的编码样式。</param>
            <returns>正被反序列化的 System.Object。</returns>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.Deserialize(Howell.IO.BitReader)">
            <summary>
            反序列化指定 System.IO.Stream 包含的 Bit 数据。
            </summary>
            <param name="reader">包含要反序列化的 XML 文档的 BitReader。</param>
            <returns>正被反序列化的 System.Object。</returns>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.Deserialize(System.IO.Stream,System.Text.Encoding)">
            <summary>
            反序列化指定 System.IO.Stream 包含的 Bit 数据。
            </summary>
            <param name="stream">包含要反序列化的 Bit 数据的 System.IO.Stream。</param>
            <param name="encoding">序列化的编码样式。</param>
            <returns>正被反序列化的 System.Object。</returns>
        </member>
        <member name="M:Howell.IO.Serialization.BitSerializer.Deserialize(System.IO.Stream)">
            <summary>
            反序列化指定 System.IO.Stream 包含的 Bit 数据。
            </summary>
            <param name="stream">包含要反序列化的 Bit 数据的 System.IO.Stream。</param>
            <returns>正被反序列化的 System.Object。</returns>
        </member>
        <member name="P:Howell.IO.Serialization.BitSerializer.IsBitSerializableAttribute">
            <summary>
            是否是IsBitSerializableAttribute属性
            </summary>
        </member>
        <member name="T:Howell.Drawing.D2.RectangleI">
            <summary>
            矩形
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.RectangleI.RegularExpressionString">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.RectangleI.Empty">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleI.#ctor(Howell.Drawing.D2.PointI,Howell.Drawing.D2.SizeI)">
            <summary>
            Constructor
            </summary>
            <param name="location">位置</param>
            <param name="size">大小</param>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleI.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="x">左上角顶点X</param>
            <param name="y">左上角顶点Y</param>
            <param name="width">宽</param>
            <param name="height">高</param>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleI.Parse(System.String)">
            <summary>
            解析矩形的字符串形式
            </summary>
            <param name="value">字符串</param>
            <returns>如果解析成功，返回RectangleI类型，否则将抛出异常</returns>
            <exception cref="T:System.FormatException">非法的字符串格式。</exception>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleI.ToString">
            <summary>
            获取矩形的字符串形式
            </summary>
            <returns>返回字符串形式</returns>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleI.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:Howell.Drawing.D2.RectangleI"/> equal to the specified one.
            </summary>
            <param name="obj">Another point to check equalty to.</param>
            <returns>Return <see langword="true"/> if objects are equal.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleI.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            <returns>Returns the hash code for this instance.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleI.op_Equality(Howell.Drawing.D2.RectangleI,Howell.Drawing.D2.RectangleI)">
            <summary>
            equals operator - checks if two rect is the same.
            </summary>
            <param name="r1">RectangleI object 1.</param>
            <param name="r2">RectangleI object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleI.op_Inequality(Howell.Drawing.D2.RectangleI,Howell.Drawing.D2.RectangleI)">
            <summary>
            equals operator - checks if two rect is not the same.
            </summary>
            <param name="r1">RectangleI object 1.</param>
            <param name="r2">RectangleI object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleI.op_Implicit(Howell.Drawing.D2.RectangleI)~Howell.Drawing.D2.RectangleD">
            <summary>
            隐式转换RectangleD To RectangleI
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleI.op_Explicit(Howell.Drawing.D2.RectangleI)~System.Drawing.Rectangle">
            <summary>
            隐式转换RectangleI To System.Drawing.Rectangle
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleI.GetVertexs">
            <summary>
            获取顶点
            </summary>
            <returns>返回顶点</returns>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleI.Equals(Howell.Drawing.D2.RectangleI)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleI.GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleI.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="P:Howell.Drawing.D2.RectangleI.Left">
            <summary>
            左上X值
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.RectangleI.Top">
            <summary>
            左上Y值
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.RectangleI.Right">
            <summary>
            右下X值
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.RectangleI.Bottom">
            <summary>
            右下Y值
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.RectangleI.Width">
            <summary>
            宽度
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.RectangleI.Height">
            <summary>
            高度
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.RectangleI.X">
            <summary>
            左上角X轴坐标
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.RectangleI.Y">
            <summary>
            左上角Y轴坐标
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.RectangleI.Size">
            <summary>
            矩形大小
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.RectangleI.Location">
            <summary>
            矩形位置
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.RectangleI.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="T:Howell.Math.Algorithm.MinMax`1">
            <summary>
            最大值,最小值计算类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Howell.Math.Algorithm.MinMax`1.#ctor(`0,`0)">
            <summary>
            Constructor
            </summary>
            <param name="a">数值a</param>
            <param name="b">数值b</param>
        </member>
        <member name="M:Howell.Math.Algorithm.MinMax`1.InRange(`0)">
            <summary>
            是否在范围内
            </summary>
            <param name="value">数值</param>
            <returns>返回True表示在范围内</returns>
        </member>
        <member name="P:Howell.Math.Algorithm.MinMax`1.Min">
            <summary>
            数值A,B中的最小值
            </summary>
        </member>
        <member name="P:Howell.Math.Algorithm.MinMax`1.Max">
            <summary>
            数值A,B中的最大值
            </summary>
        </member>
        <member name="T:Howell.Industry.AlarmInProbeType">
            <summary>
            报警探头类型
            </summary>
        </member>
        <member name="F:Howell.Industry.AlarmInProbeType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Howell.Industry.AlarmInProbeType.Panic">
            <summary>
            紧急按钮
            </summary>
        </member>
        <member name="F:Howell.Industry.AlarmInProbeType.Perimeter">
            <summary>
            周界报警
            </summary>
        </member>
        <member name="T:Howell.Conditions.StringificationExtensions">
            <summary>
            An internal helper class with extension methods for converting an object to a string representation.
            </summary>
        </member>
        <member name="M:Howell.Conditions.StringificationExtensions.Stringify(System.Object)">
            <summary>
            Transforms an object into a string representation that can be used to represent it's value in an
            exception message. When the value is a null reference, the string "null" will be returned, when 
            the specified value is a string or a char, it will be surrounded with single quotes.
            </summary>
            <param name="value">The value to be transformed.</param>
            <returns>A string representation of the supplied <paramref name="value"/>.</returns>
        </member>
        <member name="T:Howell.Conditions.CollectionHelpers">
            <summary>
            Helper methods for the Collection validation methods of the <see cref="T:Howell.Conditions.ValidatorExtensions"/> methods.
            </summary>
        </member>
        <member name="T:Howell.Threading.WrappedThread">
            <summary>
            线程包装类
            </summary>
        </member>
        <member name="M:Howell.Threading.WrappedThread.#ctor(System.Threading.ParameterizedThreadStart)">
            <summary>
            见System.Threading.Thread的构造函数说明
            </summary>
            <param name="start"></param>
        </member>
        <member name="M:Howell.Threading.WrappedThread.#ctor(System.Threading.ThreadStart)">
            <summary>
            见System.Threading.Thread的构造函数说明
            </summary>
            <param name="start"></param>
        </member>
        <member name="M:Howell.Threading.WrappedThread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
            <summary>
            见System.Threading.Thread的构造函数说明
            </summary>
            <param name="start"></param>
            <param name="maxStackSize"></param>
        </member>
        <member name="M:Howell.Threading.WrappedThread.#ctor(System.Threading.ThreadStart,System.Int32)">
            <summary>
            见System.Threading.Thread的构造函数说明
            </summary>
            <param name="start"></param>
            <param name="maxStackSize"></param>
        </member>
        <member name="M:Howell.Threading.WrappedThread.Abort">
            <summary>
            见System.Threading.Thread.Abort说明
            </summary>
        </member>
        <member name="M:Howell.Threading.WrappedThread.Abort(System.Object)">
            <summary>
            见System.Threading.Thread.Abort说明
            </summary>
            <param name="stateInfo"></param>
        </member>
        <member name="M:Howell.Threading.WrappedThread.Start">
            <summary>
            见System.Threading.Thread.Start说明
            </summary>
        </member>
        <member name="M:Howell.Threading.WrappedThread.Start(System.Object)">
            <summary>
            见System.Threading.Thread.Start说明
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:Howell.Threading.WrappedThread.Interrupt">
            <summary>
            见System.Threading.Thread.Interrupt说明
            </summary>
        </member>
        <member name="M:Howell.Threading.WrappedThread.Join">
            <summary>
            见System.Threading.Thread.Join说明
            </summary>
        </member>
        <member name="M:Howell.Threading.WrappedThread.Join(System.Int32)">
            <summary>
            见System.Threading.Thread.Join说明
            </summary>
            <param name="millisecondsTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Threading.WrappedThread.Join(System.TimeSpan)">
            <summary>
            见System.Threading.Thread.Join说明
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Threading.WrappedThread.Stop">
            <summary>
            停止Thread
            </summary>
        </member>
        <member name="P:Howell.Threading.WrappedThread.CurrentCulture">
            <summary>
            见System.Threading.Thread.CurrentCulture
            </summary>
        </member>
        <member name="P:Howell.Threading.WrappedThread.CurrentUICulture">
            <summary>
            见System.Threading.Thread.CurrentUICulture
            </summary>
        </member>
        <member name="P:Howell.Threading.WrappedThread.ExecutionContext">
            <summary>
            见System.Threading.Thread.ExecutionContext
            </summary>
        </member>
        <member name="P:Howell.Threading.WrappedThread.IsAlive">
            <summary>
            见System.Threading.Thread.IsAlive
            </summary>
        </member>
        <member name="P:Howell.Threading.WrappedThread.IsBackground">
            <summary>
            见System.Threading.Thread.IsBackground
            </summary>
        </member>
        <member name="P:Howell.Threading.WrappedThread.IsThreadPoolThread">
            <summary>
            见System.Threading.Thread.IsThreadPoolThread
            </summary>
        </member>
        <member name="P:Howell.Threading.WrappedThread.ManagedThreadId">
            <summary>
            见System.Threading.Thread.ManagedThreadId
            </summary>
        </member>
        <member name="P:Howell.Threading.WrappedThread.Name">
            <summary>
            见System.Threading.Thread.Name
            </summary>
        </member>
        <member name="P:Howell.Threading.WrappedThread.Priority">
            <summary>
            见System.Threading.Thread.Priority
            </summary>
        </member>
        <member name="P:Howell.Threading.WrappedThread.ThreadState">
            <summary>
            见System.Threading.Thread.ThreadState
            </summary>
        </member>
        <member name="T:Howell.Threading.AutoLockPolicy">
            <summary>
            自定义锁方式
            </summary>
        </member>
        <member name="F:Howell.Threading.AutoLockPolicy.Read">
            <summary>
            只读锁
            </summary>
        </member>
        <member name="F:Howell.Threading.AutoLockPolicy.Write">
            <summary>
            写锁
            </summary>
        </member>
        <member name="F:Howell.Threading.AutoLockPolicy.UpgradeableRead">
            <summary>
            可升级读锁
            </summary>
        </member>
        <member name="T:Howell.Threading.ReaderWriterLockSlimAutoController">
            <summary>
            读写锁自动释放控制器 设计初衷：由于使用CSharp Try/Finally 语句是可能Try前的锁和Finally内的错误的携程锁不同的2个锁或进出锁的方式不用，
            所有在
            </summary>
        </member>
        <member name="M:Howell.Threading.ReaderWriterLockSlimAutoController.#ctor(System.Threading.ReaderWriterLockSlim,Howell.Threading.AutoLockPolicy)">
            <summary>
            创建 读写锁自动释放控制器
            </summary>
            <param name="locker">外部需要自动处理的锁</param>
            <param name="Policy">锁定策略<see cref="T:Howell.Threading.AutoLockPolicy"></see></param>
        </member>
        <member name="M:Howell.Threading.ReaderWriterLockSlimAutoController.Dispose">
            <summary>
            Using 作用域结束后退出锁
            </summary>
        </member>
        <member name="T:System.Xml.Serialization.XmlSerializer`1">
            <summary>
            将对象序列化到 XML 文档中和从 XML 文档中反序列化对象。System.Xml.Serialization.XmlSerializer 使您得以控制如何将对象编码到XML 中。
            </summary>
            <typeparam name="T">序列化或反序列化对象类型</typeparam>
        </member>
        <member name="M:System.Xml.Serialization.XmlSerializer`1.#ctor">
            <summary>
            创建System.Xml.Serialization.XmlSerializer对象
            </summary>
        </member>
        <member name="M:System.Xml.Serialization.XmlSerializer`1.#ctor(System.Text.Encoding)">
            <summary>
            创建System.Xml.Serialization.XmlSerializer对象
            </summary>
            <param name="encoding">XML 序列化时的编码方式，默认是utf-8。</param>
        </member>
        <member name="M:System.Xml.Serialization.XmlSerializer`1.ToXmlString(`0)">
            <summary>
            将指定的类型对象转换为XML字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.Serialization.XmlSerializer`1.ToStream(`0)">
            <summary>
            将指定的类型对象转换为XML流
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.Serialization.XmlSerializer`1.FromXmlString(System.String)">
            <summary>
            将XML字符串转换为指定的类型
            </summary>
            <param name="xmlString"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.Serialization.XmlSerializer`1.FromStream(System.IO.Stream)">
            <summary>
            将XML流转换为指定的类型
            </summary>
            <param name="xmlStream"></param>
            <returns></returns>
        </member>
        <member name="P:System.Xml.Serialization.XmlSerializer`1.Encoding">
            <summary>
            XML 序列化时的编码方式，默认是utf-8。
            </summary>
        </member>
        <member name="P:System.Xml.Serialization.XmlSerializer`1.OmitXmlSerializerNamespaces">
            <summary>
            忽略XML序列化名空间，默认是true。
            </summary>
        </member>
        <member name="P:System.Xml.Serialization.XmlSerializer`1.OmitXmlDeclaration">
            <summary>
            忽略XML声明，默认是false。
            </summary>
        </member>
        <member name="T:Howell.Math.Algorithm.AngleAlgorithm">
            <summary>
            角度计算类
            </summary>
        </member>
        <member name="M:Howell.Math.Algorithm.AngleAlgorithm.ToRadians(System.Double)">
            <summary>
            角度转换弧度
            </summary>
            <param name="degrees">角度</param>
            <returns>返回弧度值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.AngleAlgorithm.ToDegrees(System.Double)">
            <summary>
            弧度转换角度
            </summary>
            <param name="radians">弧度</param>
            <returns>返回角度值</returns>
        </member>
        <member name="T:Howell.Cryptography.CRC32">
            <summary>
            CRC32 校验工具 (x32 + x26 + x23 + x22 + x16 + x12 + x11 + x10 + x8 + x7 + x5 + x4 + x2 + x1 + 1)
            </summary>
        </member>
        <member name="M:Howell.Cryptography.CRC32.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Howell.Cryptography.CRC32.Compute(System.Byte[])">
            <summary>
            计算CRC32校验值
            </summary>
            <param name="buffer">校验数据</param>
            <returns>返回校验结果</returns>
        </member>
        <member name="M:Howell.Cryptography.CRC32.Compute(System.Byte[],System.Int32,System.Int32)">
            <summary>
            计算CRC32校验值
            </summary>
            <param name="buffer">校验数据</param>
            <param name="offset">数据偏移</param>
            <param name="count">数据数目</param>
            <returns>返回校验结果</returns>
        </member>
        <member name="M:Howell.Cryptography.CRC32.Compute(System.String)">
            <summary>
            计算CRC32校验值
            </summary>
            <param name="s">校验字符串</param>
            <returns>返回校验结果</returns>
        </member>
        <member name="M:Howell.Cryptography.CRC32.Dispose">
            <summary>
            销毁
            </summary>
        </member>
        <member name="T:Howell.Conditions.AlternativeExceptionHelper`1">
            <summary>
            Internal helper class to cache a <see cref="T:Howell.Conditions.AlternativeExceptionCondition"/> and 
            <see cref="T:System.Reflection.ConstructorInfo"/> instance per exception type.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
        </member>
        <member name="T:Howell.Conditions.AlternativeExceptionHelper`1.AlternativeExceptionConditionInternal">
            <summary>Allows creating validators for a specific exception type.</summary>
        </member>
        <member name="T:Howell.Conditions.AlternativeExceptionCondition">
            <summary>
            An instance of this type is returned from the 
            <see cref="M:Howell.Conditions.Condition.WithExceptionOnFailure``1"/> method overloads and allow you to specify
            the exception type that should be thrown on failure.
            </summary>
        </member>
        <member name="M:Howell.Conditions.AlternativeExceptionCondition.Requires``1(``0)">
            <summary>
            Returns a new <see cref="T:Howell.Conditions.ConditionValidator`1">ConditionValidator</see> that allows you to
            validate the preconditions of the given argument, given it a default ArgumentName of 'value'.
            </summary>
            <typeparam name="T">The type of the argument to validate.</typeparam>
            <param name="value">The value of the argument to validate.</param>
            <returns>A new <see cref="T:Howell.Conditions.ConditionValidator`1">ConditionValidator</see> containing the 
            <paramref name="value"/> and "value" as argument name.</returns>
            <example>
            The following example shows how to use the <b>Requires</b> extension method.
            <code><![CDATA[
            using Howell.Conditions;
            
            public class Person
            {
                private int age;
                
                public int Age
                {
                    get { return this.age; }
                    set
                    {
                        // Throws an InvalidOperationException when value is less than 0
                        Condition.WithExceptionOnFailure<InvalidOperationException>()
                            .Requires(value).IsGreaterOrEqual(0);
                            
                        this.age = value;
                    }
                }
            }
            ]]></code>
            See the <see cref="T:Howell.Conditions.ConditionValidator`1"/> class for more code examples.
            </example>
        </member>
        <member name="M:Howell.Conditions.AlternativeExceptionCondition.Requires``1(``0,System.String)">
            <summary>
            Returns a new <see cref="T:Howell.Conditions.ConditionValidator`1">ConditionValidator</see> that allows you to
            validate the preconditions of the given argument.
            </summary>
            <typeparam name="T">The type of the argument to validate.</typeparam>
            <param name="value">The value of the argument to validate.</param>
            <param name="argumentName">The name of the argument to validate</param>
            <returns>A new <see cref="T:Howell.Conditions.ConditionValidator`1">ConditionValidator</see> containing the 
            <paramref name="value"/> and <paramref name="argumentName"/>.</returns>
            <example>
            The following example shows how to use the <b>Requires</b> extension method.
            <code><![CDATA[
            using Howell.Conditions;
            
            public class Point
            {
                private readonly int x;
                private readonly int y;
                
                public Point(int x, int y)
                {
                    // Throws an InvalidOperationException when x is less than 0
                    Condition.WithExceptionOnFailure<InvalidOperationException>()
                        .Requires(x, "x").IsGreaterOrEqual(0);
                    
                    // Throws an InvalidOperationException when y is less than 0
                    Condition.WithExceptionOnFailure<InvalidOperationException>()
                        .Requires(y, "y").IsGreaterOrEqual(0);
                    
                    this.x = x;
                    this.y = y;
                }
                
                public int X { get { return this.x; } }
                public int Y { get { return this.y; } }
            }
            ]]></code>
            See the <see cref="T:Howell.Conditions.ConditionValidator`1"/> class for more code examples.
            </example>
        </member>
        <member name="M:Howell.Conditions.AlternativeExceptionCondition.Equals(System.Object)">
            <summary>Determines whether the specified System.Object is equal to the current System.Object.</summary>
            <param name="obj">The System.Object to compare with the current System.Object.</param>
            <returns>true if the specified System.Object is equal to the current System.Object; otherwise, false.</returns>
        </member>
        <member name="M:Howell.Conditions.AlternativeExceptionCondition.GetHashCode">
            <summary>Returns the hash code of the current instance.</summary>
            <returns>The hash code of the current instance.</returns>
        </member>
        <member name="M:Howell.Conditions.AlternativeExceptionCondition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Howell.Conditions.AlternativeExceptionCondition"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the <see cref="T:Howell.Conditions.AlternativeExceptionCondition"/>.
            </returns>
        </member>
        <member name="M:Howell.Conditions.AlternativeExceptionCondition.GetType">
            <summary>Gets the <see cref="T:System.Type"/> of the current instance.</summary>
            <returns>The <see cref="T:System.Type"/> instance that represents the exact runtime 
            type of the current instance.</returns>
        </member>
        <member name="M:Howell.Conditions.AlternativeExceptionHelper`1.AlternativeExceptionConditionInternal.Requires``1(``0)">
            <summary>
            Returns a new <see cref="T:Howell.Conditions.ConditionValidator`1">ConditionValidator</see> that allows you to
            validate the preconditions of the given argument, given it a default ArgumentName of 'value'.
            </summary>
            <typeparam name="T">The type of the argument to validate.</typeparam>
            <param name="value">The value of the argument to validate.</param>
            <returns>A new <see cref="T:Howell.Conditions.ConditionValidator`1">ConditionValidator</see> containing the 
            <paramref name="value"/> and "value" as argument name.</returns>
        </member>
        <member name="M:Howell.Conditions.AlternativeExceptionHelper`1.AlternativeExceptionConditionInternal.Requires``1(``0,System.String)">
            <summary>
            Returns a new <see cref="T:Howell.Conditions.ConditionValidator`1">ConditionValidator</see> that allows you to
            validate the preconditions of the given argument.
            </summary>
            <typeparam name="T">The type of the argument to validate.</typeparam>
            <param name="value">The value of the argument to validate.</param>
            <param name="argumentName">The name of the argument to validate</param>
            <returns>A new <see cref="T:Howell.Conditions.ConditionValidator`1">ConditionValidator</see> containing the 
            <paramref name="value"/> and "value" as argument name.</returns>
        </member>
        <member name="T:Howell.Capability.PercentageCap">
            <summary>
            百分比 能力
            </summary>
        </member>
        <member name="T:Howell.Capability.Int32Cap">
            <summary>
            Integer 能力
            </summary>
        </member>
        <member name="M:Howell.Capability.Int32Cap.op_Implicit(Howell.Capability.Int32Cap)~System.Int32">
            <summary>
            隐式转换
            </summary>
            <param name="val">转换对象</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Howell.Capability.Int32Cap.op_Explicit(System.Int32)~Howell.Capability.Int32Cap">
            <summary>
            显式转换
            </summary>
            <param name="val">转换对象</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Howell.Capability.Int32Cap.#ctor">
            <summary>
            创建 IntegerCap对象
            </summary>
        </member>
        <member name="M:Howell.Capability.Int32Cap.#ctor(System.Int32)">
            <summary>
            创建 IntegerCap对象
            </summary>
            <param name="val">数值</param>
        </member>
        <member name="M:Howell.Capability.Int32Cap.#ctor(System.Int32,System.Nullable{System.Int32})">
            <summary>
            创建 IntegerCap对象
            </summary>
            <param name="val">数值</param>
            <param name="def"></param>
        </member>
        <member name="M:Howell.Capability.Int32Cap.#ctor(System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            创建 IntegerCap对象
            </summary>
            <param name="val"></param>
            <param name="def"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Howell.Capability.Int32Cap.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns>返回字符串。</returns>
        </member>
        <member name="P:Howell.Capability.Int32Cap.Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="P:Howell.Capability.Int32Cap.TextSpecified">
            <summary>
            是否包含Text XML属性
            </summary>
        </member>
        <member name="P:Howell.Capability.Int32Cap.Text">
            <summary>
            文本内容
            </summary>
        </member>
        <member name="M:Howell.Capability.PercentageCap.op_Implicit(Howell.Capability.PercentageCap)~System.Int32">
            <summary>
            隐式转换
            </summary>
            <param name="val">转换对象</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Howell.Capability.PercentageCap.op_Explicit(System.Int32)~Howell.Capability.PercentageCap">
            <summary>
            显式转换
            </summary>
            <param name="val">转换对象</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Howell.Capability.PercentageCap.#ctor">
            <summary>
            创建 PercentageCap对象
            </summary>
        </member>
        <member name="M:Howell.Capability.PercentageCap.#ctor(System.Int32)">
            <summary>
            创建 PercentageCap对象
            </summary>
            <param name="val">数值</param>
        </member>
        <member name="T:Howell.BinaryString">
            <summary>
            二进制字符串对象, 如二进制字符串为：01，怎转换后的位值数组为 bit[0] = 0, bit[1] = 1
            </summary>
            <example>
            The following example shows how to use the <b>BinaryString</b> method.
            <code>
            <![CDATA[
            using Howell;
            
            BinaryString binString = BinaryString.Parse("11101");
            Boolean[] bits = binString.GetBits();
            String info = String.Format("BinString:{0}=", binString.ToString());
            for(int i =0;i < bits.Length;++i)
            {
                info += bits[i] ? "1" : "0";
            }
            info += " Bits";
            Console.WriteLine(info);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Howell.BinaryString.#ctor(System.Boolean[])">
            <summary>
            构造函数
            </summary>
            <param name="bits">位值数组值</param>
        </member>
        <member name="M:Howell.BinaryString.GetBits">
            <summary>
            获取位值数组。
            </summary>
            <returns>返回位值数组。</returns>
        </member>
        <member name="M:Howell.BinaryString.ToString">
            <summary>
            转化为字符串
            </summary>
            <returns>返回二进制字符串。</returns>
        </member>
        <member name="M:Howell.BinaryString.Parse(System.String)">
            <summary>
            解析2进制字符串
            </summary>
            <param name="binString">2进制字符串实例对象。</param>
            <returns>返回具体的2进制字符串类型</returns>
        </member>
        <member name="T:Howell.Xml.XmlHelper">
            <summary>
            XML帮助工具
            </summary>
        </member>
        <member name="M:Howell.Xml.XmlHelper.ToOptional(System.Type)">
            <summary>
            将枚举类型转换为Optional XML选项。
            </summary>
            <param name="type">枚举类型。</param>
            <returns>返回Optional选项。</returns>
        </member>
        <member name="M:Howell.Xml.XmlHelper.ToRange(System.Int32,System.Int32)">
            <summary>
            转换为XML取值范围
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:Howell.Xml.XmlHelper.ToHexBinary(System.Byte[])">
            <summary>
            将字节数据转换为HexBinary字符串
            </summary>
            <param name="hexBinary">字节数组</param>
            <returns>返回HexBinary字符串</returns>
        </member>
        <member name="M:Howell.Xml.XmlHelper.FromHexBinary(System.String)">
            <summary>
            将HexBinary字符串转换为字节数组
            </summary>
            <param name="hexBinary">HexBinary字符串</param>
            <returns>返回字节数组</returns>
        </member>
        <member name="M:Howell.Xml.XmlHelper.Serialize``1(``0,System.IO.Stream,System.String)">
            <summary>
            将对象序列化为数据流
            </summary>
            <typeparam name="T">序列化对象类型</typeparam>
            <param name="o">对象</param>
            <param name="stream">数据流</param>
            <param name="ns">名空间</param>
        </member>
        <member name="M:Howell.Xml.XmlHelper.Serialize``1(``0,System.IO.Stream,System.String,System.Text.Encoding)">
            <summary>
            将对象序列化为数据流
            </summary>
            <typeparam name="T">序列化对象类型</typeparam>
            <param name="o">对象</param>
            <param name="stream">数据流</param>
            <param name="ns">名空间</param>
            <param name="encoding">编码格式</param>
        </member>
        <member name="M:Howell.Xml.XmlHelper.Serialize``1(``0,System.String)">
            <summary>
            将对象序列化为字符串
            </summary>
            <typeparam name="T">序列化对象类型</typeparam>
            <param name="o">对象</param>
            <param name="ns">名空间</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Howell.Xml.XmlHelper.Serialize``1(``0)">
            <summary>
            将对象序列化为字符串
            </summary>
            <typeparam name="T">序列化对象类型</typeparam>
            <param name="o">对象</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Howell.Xml.XmlHelper.Deserialize``1(System.String)">
            <summary>
            返回序列化字符串到指定对象
            </summary>
            <typeparam name="T">序列化对象类型</typeparam>
            <param name="s">字符串</param>
            <returns>对象</returns>
        </member>
        <member name="M:Howell.Xml.XmlHelper.Deserialize``1(System.IO.Stream)">
            <summary>
            返回序列化XML到指定对象
            </summary>
            <typeparam name="T">序列化对象类型</typeparam>
            <param name="stream">数据流</param>
            <returns>返回反序列化后的对象实例</returns>
        </member>
        <member name="M:Howell.Xml.XmlHelper.Deserialize``1(System.IO.Stream,System.Text.Encoding)">
            <summary>
            返回序列化XML到指定对象
            </summary>
            <typeparam name="T">序列化对象类型</typeparam>
            <param name="stream">数据流</param>
            <param name="encoding">编码格式</param>
            <returns>返回反序列化后的对象实例</returns>
        </member>
        <member name="M:Howell.Xml.XmlHelper.Serialize``1(``0,System.Text.StringBuilder@,System.String)">
            <summary>
            将对象序列化为数据流
            </summary>
            <typeparam name="T">序列化对象类型</typeparam>
            <param name="o">对象</param>
            <param name="builder">数据流</param>
            <param name="ns">名空间</param>
        </member>
        <member name="M:Howell.Xml.XmlHelper.Deserialize``1(System.Text.StringBuilder)">
            <summary>
            返回序列化XML到指定对象
            </summary>
            <typeparam name="T">序列化对象类型</typeparam>
            <param name="builder">数据流</param>
            <returns>返回反序列化后的对象实例</returns>
        </member>
        <member name="M:Howell.Xml.XmlHelper.ReadAny(System.Xml.XmlReader)">
            <summary>
            读取Any lax
            </summary>
            <param name="reader">xml reader</param>
            <returns>返回XmlElement 数组</returns>
        </member>
        <member name="M:Howell.Xml.XmlHelper.WriteAny(System.Xml.XmlWriter,System.Xml.XmlElement[])">
            <summary>
            写入 Any lax
            </summary>
            <param name="writer">xml writer</param>
            <param name="eles">XmlElement 数组</param>
        </member>
        <member name="M:Howell.Xml.XmlHelper.ReadArray``1(System.Xml.XmlReader,System.String)">
            <summary>
            读取XML节点数组元素
            </summary>
            <typeparam name="T">节点元素类型</typeparam>
            <param name="reader">xml reader</param>
            <param name="localName">元素节点的名称</param>
            <returns>返回泛型元素数组</returns>
        </member>
        <member name="M:Howell.Xml.XmlHelper.WriteArray``1(System.Xml.XmlWriter,``0[])">
            <summary>
            写入XML节点数组元素
            </summary>
            <typeparam name="T">节点元素类型</typeparam>        
            <param name="writer">xml writer</param>
            <param name="resources">节点数组</param>
        </member>
        <member name="M:Howell.Xml.XmlHelper.Clone``1(``0,System.String)">
            <summary>
            克隆XML序列化对象
            </summary>
            <typeparam name="T">可序列化对象</typeparam>
            <param name="value">数值</param>
            <param name="ns">Namespace of XML</param>
            <returns>返回克隆后的新对象</returns>
        </member>
        <member name="T:Howell.Time.ISO8601TimeIntervalHelper">
            <summary>
            ISO8601TimeInterval助手
            </summary>
        </member>
        <member name="M:Howell.Time.ISO8601TimeIntervalHelper.GetNewInterval(System.String,System.String,System.String)">
            <summary>
            根据给定的日期数据字符串返回一个时间段对象
            </summary>
            <param name="hour">小时数据</param>
            <param name="minute">分钟数据</param>
            <param name="second">秒钟数据</param>
            <returns>时间段对象</returns>
        </member>
        <member name="M:Howell.Time.ISO8601TimeIntervalHelper.GetInterval(System.String,System.String,System.String)">
            <summary>
            直接生成获得时间段
            </summary>
            <param name="year">年数据</param>
            <param name="month">月数据</param>
            <param name="day">天数据</param>
            <returns>时间段</returns>
        </member>
        <member name="M:Howell.Time.ISO8601TimeIntervalHelper.GetInterval(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            直接生成获得时间段
            </summary>
            <param name="year">年数据</param>
            <param name="month">月数据</param>
            <param name="day">天数据</param>
            <param name="hour">小时数据</param>
            <param name="minute">分钟数据</param>
            <param name="second">秒数据</param>
            <returns>时间段</returns>
        </member>
        <member name="M:Howell.Time.ISO8601TimeIntervalHelper.NullStringAddZero(System.String)">
            <summary>
            为字符串补零
            用于生成日期或时间格式时，转换字符串为空时
            </summary>
            <param name="str">字符串</param>
            <returns>"0"或原来的字符串</returns>
        </member>
        <member name="M:Howell.Time.ISO8601TimeIntervalHelper.ZeroToNull(System.String)">
            <summary>
            把0转换为空字符串
            用于对外输出时，不显示的数据
            </summary>
            <param name="isZero">是否为0的字符串</param>
            <returns>数据或空字符串</returns>
        </member>
        <member name="M:Howell.Time.ISO8601TimeIntervalHelper.ZeroToNull(System.Int32)">
            <summary>
            把0转换为空字符串
            用于对外输出时，不显示的数据
            </summary>
            <param name="isZero">是否为0</param>
            <returns>数据或空字符串</returns>
        </member>
        <member name="M:Howell.Time.ISO8601TimeIntervalHelper.GetInterval(System.DateTime,System.DateTime)">
            <summary>
            从开始和结束的日期获得时间段
            </summary>
            <param name="start">开始时间</param>
            <param name="end">结束时间</param>
            <returns>时间段</returns>
        </member>
        <member name="M:Howell.Time.ISO8601TimeIntervalHelper.GetStartDate(System.TimeSpan,System.DateTime)">
            <summary>
            从结束时间和时间段获得开始时间
            </summary>
            <param name="interval">时间段</param>
            <param name="end">结束时间</param>
            <returns>开始日期</returns>
        </member>
        <member name="M:Howell.Time.ISO8601TimeIntervalHelper.GetEndDate(System.DateTime,System.TimeSpan)">
            <summary>
            从开始时间和时间段获得结束时间
            </summary>
            <param name="start">开始时间</param>
            <param name="interval">时间段</param>
            <returns>结束日期</returns>
        </member>
        <member name="M:Howell.Time.ISO8601TimeIntervalHelper.TimeToDate(System.TimeSpan)">
            <summary>
            把时间段转换成日期的格式
            </summary>
            <param name="interval">时间段</param>
            <returns>日期#这里的日期多了1年1月1日</returns>
        </member>
        <member name="M:Howell.Time.ISO8601TimeIntervalHelper.GetIntervalYear(System.TimeSpan)">
            <summary>
            提取时间段有几年
            </summary>
            <param name="interval">时间段</param>
            <returns>年数据</returns>
        </member>
        <member name="M:Howell.Time.ISO8601TimeIntervalHelper.GetIntervalMonth(System.TimeSpan)">
            <summary>
            提取时间段有几年中的几个月
            </summary>
            <param name="interval">时间段</param>
            <returns>月数据</returns>
        </member>
        <member name="M:Howell.Time.ISO8601TimeIntervalHelper.GetIntervalDay(System.TimeSpan)">
            <summary>
            提取时间段有几年中的几个月的零几天
            </summary>
            <param name="interval">时间段</param>
            <returns>天数据</returns>
        </member>
        <member name="T:Howell.Security.Session">
            <summary>
            Session 消息信息
            </summary>
        </member>
        <member name="F:Howell.Security.Session.m_Disposed">
            <summary>
            
            </summary>
        </member>
        <member name="M:Howell.Security.Session.#ctor(System.String,System.Int32)">
            <summary>
            Session构造
            </summary>
            <param name="id">会话Id</param>
            <param name="timeout">超时时间，单位（秒）.</param>
        </member>
        <member name="M:Howell.Security.Session.IsExpired">
            <summary>
            是否已过期
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.Security.Session.Renewal">
            <summary>
            续租会话
            </summary>
        </member>
        <member name="M:Howell.Security.Session.Dispose">
            <summary>
            销毁Session对象
            </summary>
        </member>
        <member name="M:Howell.Security.Session.Dispose(System.Boolean)">
            <summary>
            销毁Session对象
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Howell.Security.Session.Id">
            <summary>
            会话Id
            </summary>
        </member>
        <member name="P:Howell.Security.Session.CreationTime">
            <summary>
            会话创建时间
            </summary>
        </member>
        <member name="P:Howell.Security.Session.ExpiredTime">
            <summary>
            会话过期时间
            </summary>
        </member>
        <member name="P:Howell.Security.Session.Timeout">
            <summary>
            心跳超时时间 （单位：秒）
            </summary>
        </member>
        <member name="P:Howell.Security.Session.Cache">
            <summary>
            Session缓存数据
            </summary>
        </member>
        <member name="E:Howell.Security.Session.Expired">
            <summary>
            会话期满事件
            </summary>
        </member>
        <member name="T:Howell.Security.Session`1">
            <summary>
            带用户信息的会话对象
            </summary>
            <typeparam name="TUser">用户信息类型</typeparam>
        </member>
        <member name="M:Howell.Security.Session`1.#ctor(System.String,System.Int32)">
            <summary>
            Session构造
            </summary>
            <param name="id">会话Id</param>
            <param name="timeout">超时时间，单位（秒）.</param>
        </member>
        <member name="P:Howell.Security.Session`1.User">
            <summary>
            用户信息数据
            </summary>
        </member>
        <member name="T:Howell.Security.SynchronizedSessionCollection`1">
            <summary>
            同步的Session容器
            </summary>
            <typeparam name="TUser">会话用户信息</typeparam>
        </member>
        <member name="T:Howell.Collections.Generic.SynchronizedKeyedCollection`2">
            <summary>
            提供一个线程安全集合，该集合所含对象的类型由一个泛型参数指定，并且集合根据键进行分组。
            </summary>
            <typeparam name="K"> 用于对集合所含的项进行分组的键的类型。</typeparam>
            <typeparam name="T">线程安全键控集合中所包含的项的类型。</typeparam>
        </member>
        <member name="T:Howell.Collections.Generic.SynchronizedCollection`1">
            <summary>
            提供一个线程安全集合，其中包含泛型参数所指定类型的对象作为元素。
            </summary>
            <typeparam name="T">包含在线程安全集合中作为项的对象的类型。</typeparam>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedCollection`1.#ctor">
            <summary>
            初始化 Howell.Collections.Generic.SynchronizedCollection&lt;T&gt; 类的新实例。
            </summary>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object)">
            <summary>
            通过用于对线程安全集合的访问进行同步的对象来初始化 Howell.Collections.Generic.SynchronizedCollection&lt;T&gt; 类的新实例。
            </summary>
            <param name="syncRoot">用于对线程安全集合的访问进行同步的对象。</param>
            <exception cref="T:System.ArgumentNullException">syncRoot 为 null。</exception>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            使用指定的可枚举元素列表和用于对线程安全集合的访问进行同步的对象来初始化 Howell.Collections.Generic.SynchronizedCollection&lt;T&gt; 类的新实例。
            </summary>
            <param name="syncRoot">用于对线程安全集合的访问进行同步的对象。</param>
            <param name="list">用于初始化线程安全集合的元素的 System.Collections.Generic.IEnumerable&lt;T&gt; 集合。</param>
            <exception cref="T:System.ArgumentNullException">syncRoot 或 list 为 null。</exception>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object,`0[])">
            <summary>
            使用指定的元素数组和用于对线程安全集合的访问进行同步的对象来初始化 Howell.Collections.Generic.SynchronizedCollection&lt;T&gt; 类的新实例。
            </summary>
            <param name="syncRoot">用于对线程安全集合的访问进行同步的对象。</param>
            <param name="list">用于初始化线程安全集合的 T 类型元素的 System.Array。</param>
            <exception cref="T:System.ArgumentNullException">syncRoot 或 list 为 null。</exception>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object,System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
            
            </summary>
            <param name="syncRoot"></param>
            <param name="list"></param>
            <param name="makeCopy"></param>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedCollection`1.Add(`0)">
            <summary>
            将项添加到线程安全只读集合中。
            </summary>
            <param name="item">要添加到集合的元素。</param>
            <exception cref="T:System.ArgumentException">设置的值为 null，或者不是集合的正确泛型类型 T。</exception>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedCollection`1.Clear">
            <summary>
            从集合中移除所有项。
            </summary>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedCollection`1.Contains(`0)">
            <summary>
            确定集合是否包含具有特定值的元素。
            </summary>
            <param name="item">要在集合中定位的对象。</param>
            <returns>如果在集合中找到元素值，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            从特定索引处开始，将集合中的元素复制到指定的数组。
            </summary>
            <param name="array">从集合中复制的 T 类型元素的目标 System.Array。</param>
            <param name="index"> 数组中从零开始的索引，在此处开始复制。</param>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedCollection`1.GetEnumerator">
            <summary>
            返回一个循环访问同步集合的枚举数。
            </summary>
            <returns>一个 System.Collections.Generic.IEnumerator&lt;T&gt;，用于集合中存储的类型的对象。</returns>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedCollection`1.IndexOf(`0)">
            <summary>
            返回某个值在集合中的第一个匹配项的索引。
            </summary>
            <param name="item"> 从集合中移除所有项。</param>
            <returns>  该值在集合中的第一个匹配项的从零开始的索引。</returns>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedCollection`1.Insert(System.Int32,`0)">
            <summary>
            将某个项插入到集合中的指定索引处。
            </summary>
            <param name="index">要从集合中检索的元素的从零开始的索引。</param>
            <param name="item"> 要作为元素插入到集合中的对象。</param>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedCollection`1.Remove(`0)">
            <summary>
            从集合中移除指定项的第一个匹配项。
            </summary>
            <param name="item">要从集合中移除的对象。</param>
            <returns>如果从集合中成功移除了项，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedCollection`1.RemoveAt(System.Int32)">
            <summary>
            从集合中移除指定索引处的项。
            </summary>
            <param name="index">要从集合中检索的元素的从零开始的索引。</param>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedCollection`1.ClearItems">
            <summary>
            从集合中移除所有项。
            </summary>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedCollection`1.InsertItem(System.Int32,`0)">
            <summary>
             将某个项插入到集合中的指定索引处。
            </summary>
            <param name="index">集合中从零开始的索引，在此处插入对象。</param>
            <param name="item">要插入到集合中的对象。</param>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedCollection`1.RemoveItem(System.Int32)">
            <summary>
            从集合中移除指定 index 处的项。
            </summary>
            <param name="index">要从集合中检索的元素的从零开始的索引。</param>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedCollection`1.SetItem(System.Int32,`0)">
            <summary>
             使用另一项替换指定索引处的项。
            </summary>
            <param name="index">要替换的对象的从零开始的索引。</param>
            <param name="item">要替换的对象。</param>
        </member>
        <member name="P:Howell.Collections.Generic.SynchronizedCollection`1.Count">
            <summary>
            获取线程安全集合中所含元素的数目。
            </summary>
        </member>
        <member name="P:Howell.Collections.Generic.SynchronizedCollection`1.Item(System.Int32)">
            <summary>
            获取线程安全集合中具有指定索引的元素。
            </summary>
            <param name="index">要从集合中检索的元素的从零开始的索引。</param>
            <returns>集合中具有指定 index 的对象。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">指定的 index 小于零或大于集合中的项数。</exception>
        </member>
        <member name="P:Howell.Collections.Generic.SynchronizedCollection`1.SyncRoot">
            <summary>
            获取用于对线程安全集合的访问进行同步的对象。
            </summary>
        </member>
        <member name="P:Howell.Collections.Generic.SynchronizedCollection`1.Items">
            <summary>
            获取线程安全集合中所含元素的列表。
            </summary>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedKeyedCollection`2.#ctor">
            <summary>
            初始化 Howell.Collections.Generic.SynchronizedKeyedCollection&lt;K,T&gt; 类的新实例。
            </summary>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedKeyedCollection`2.#ctor(System.Object)">
            <summary>
            使用由显式指定的对象进行同步的访问初始化 Howell.Collections.Generic.SynchronizedKeyedCollection&lt;K,T&gt;类的新实例。
            </summary>
            <param name="syncRoot">用于对线程安全集合的访问进行同步的对象。</param>
            <exception cref="T:System.ArgumentNullException">syncRoot 为 null。</exception>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedKeyedCollection`2.#ctor(System.Object,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            使用由显式指定的对象进行同步的访问和以指定方式进行比较的键，初始化 System.Collections.Generic.SynchronizedKeyedCollection&lt;K,T&gt;类的新实例。
            </summary>
            <param name="syncRoot">用于对线程安全集合的访问进行同步的对象。</param>
            <param name="comparer">类型 K 的 System.Collections.Generic.IEqualityComparer&lt;T&gt;，用于比较类型 K 的键对象是否相等。</param>
            <exception cref="T:System.ArgumentNullException">syncRoot 为 null 或 comparer 为 null。</exception>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedKeyedCollection`2.#ctor(System.Object,System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            使用由显式指定的对象进行同步的访问和以指定方式进行比较的键，初始化 System.Collections.Generic.SynchronizedKeyedCollection&lt;K,T&gt;类的新实例。
            </summary>
            <param name="syncRoot">用于对线程安全集合的访问进行同步的对象。</param>
            <param name="comparer">类型 K 的 System.Collections.Generic.IEqualityComparer&lt;T&gt;，用于比较类型 K 的键对象是否相等。</param>
            <param name="capacity">为集合创建字典所需的项的数目。</param>
            <exception cref="T:System.ArgumentNullException">syncRoot 为 null 或 comparer 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">capacity 小于 -1。</exception>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedKeyedCollection`2.Contains(`0)">
            <summary>
            返回一个值，该值指示集合是否包含具有指定键的项。
            </summary>
            <param name="key">要测试的类型 K 的键。</param>
            <returns>如果集合包含具有指定键的项，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedKeyedCollection`2.Remove(`0)">
            <summary>
            从集合中移除具有指定键的项并返回一个值，该值指示项是否已移除。
            </summary>
            <param name="key">要移除的项的键。</param>
            <returns>如果移除了具有指定键的项，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedKeyedCollection`2.ChangeItemKey(`1,`0)">
            <summary>
            更改同步集合中某个指定项的键。
            </summary>
            <param name="item">要更改其键的项。</param>
            <param name="newKey">指定项的新键。</param>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedKeyedCollection`2.ClearItems">
            <summary>
            清除集合中的所有项。
            </summary>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedKeyedCollection`2.GetKeyForItem(`1)">
            <summary>
            在派生类中重写时，获取指定项的键。
            </summary>
            <param name="item">要检索其键的类型 T 的项。</param>
            <returns>类型 K 的键，用于类型 T 的指定 item。</returns>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedKeyedCollection`2.InsertItem(System.Int32,`1)">
            <summary>
            将某个项插入集合中的指定位置。
            </summary>
            <param name="index">从零开始的索引，它指定项在集合中的插入位置。</param>
            <param name="item">要插入集合的类型 T 的项。</param>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedKeyedCollection`2.RemoveItem(System.Int32)">
            <summary>
            从集合中移除指定位置处的项。
            </summary>
            <param name="index">从零开始的索引，它指定从集合移除的项的位置。</param>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedKeyedCollection`2.SetItem(System.Int32,`1)">
            <summary>
            用新项替换集合中指定位置处的项。
            </summary>
            <param name="index">从零开始的索引，它指定项在集合中的插入位置。</param>
            <param name="item">要插入集合的类型 T 的项。</param>
        </member>
        <member name="P:Howell.Collections.Generic.SynchronizedKeyedCollection`2.Item(`0)">
            <summary>
            获取集合中具有指定键的项。
            </summary>
            <param name="key">要检索的项的键。</param>
            <returns>集合中具有指定键的类型 T 的项。</returns>
        </member>
        <member name="P:Howell.Collections.Generic.SynchronizedKeyedCollection`2.Dictionary">
            <summary>
            获取与集合关联的字典。
            </summary>
        </member>
        <member name="M:Howell.Security.SynchronizedSessionCollection`1.GetKeyForItem(Howell.Security.Session{`0})">
            <summary>
            在派生类中重写时，获取指定项的键。
            </summary>
            <param name="item">要检索其键的类型 T 的项。</param>
            <returns>类型 K 的键，用于类型 T 的指定 item。</returns>
        </member>
        <member name="T:Howell.Drawing.D2.PolylineI">
            <summary>
            折线
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.PolylineI.RegularExpressionString">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.PolylineI.Empty">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:Howell.Drawing.D2.PolylineI.#ctor(System.Collections.Generic.IList{Howell.Drawing.D2.PointI})">
            <summary>
            Constructor
            </summary>
            <param name="points">折线的拐点</param>        
        </member>
        <member name="M:Howell.Drawing.D2.PolylineI.#ctor(Howell.Drawing.D2.PointI[])">
            <summary>
            Constructor
            </summary>
            <param name="points">折线的拐点</param>        
        </member>
        <member name="M:Howell.Drawing.D2.PolylineI.Parse(System.String)">
            <summary>
            解析多线段的字符串形式
            </summary>
            <param name="value">字符串</param>
            <returns>如果解析成功，返回PolylineI类型，否则将抛出异常</returns>
            <exception cref="T:System.FormatException">非法的字符串格式。</exception>
        </member>
        <member name="M:Howell.Drawing.D2.PolylineI.ToString">
            <summary>
            获取多线段类型的字符串型式
            </summary>
            <returns>返回多线段类型的字符串型式。</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolylineI.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:Howell.Drawing.D2.PolylineI"/> equal to the specified one.
            </summary>
            <param name="obj">Another point to check equalty to.</param>
            <returns>Return <see langword="true"/> if objects are equal.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolylineI.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            <returns>Returns the hash code for this instance.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolylineI.op_Equality(Howell.Drawing.D2.PolylineI,Howell.Drawing.D2.PolylineI)">
            <summary>
            equals operator - checks if two polygon is the same.
            </summary>
            <param name="p1">PolylineD object 1.</param>
            <param name="p2">PolylineD object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolylineI.op_Inequality(Howell.Drawing.D2.PolylineI,Howell.Drawing.D2.PolylineI)">
            <summary>
            equals operator - checks if two polygon is not the same.
            </summary>
            <param name="p1">PolylineD object 1.</param>
            <param name="p2">PolylineD object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolylineI.op_Implicit(Howell.Drawing.D2.PolylineI)~Howell.Drawing.D2.PolylineD">
            <summary>
            显式转换PolygonI To PolylineD
            </summary>
            <param name="polyline">折线</param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolylineI.Equals(Howell.Drawing.D2.PolylineI)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolylineI.GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolylineI.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="P:Howell.Drawing.D2.PolylineI.Points">
            <summary>
            折线的拐点
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.PolylineI.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="T:Howell.Drawing.D2.LineI">
            <summary>
            线2D
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.LineI.RegularExpressionString">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.LineI.Empty">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:Howell.Drawing.D2.LineI.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="x1">起点的X轴坐标</param>
            <param name="y1">起点的Y轴坐标</param>
            <param name="x2">终点的X轴坐标</param>
            <param name="y2">终点的X轴坐标</param>
        </member>
        <member name="M:Howell.Drawing.D2.LineI.#ctor(Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI)">
            <summary>
            Constructor
            </summary>
            <param name="starting">开始</param>
            <param name="end">结束</param>
        </member>
        <member name="M:Howell.Drawing.D2.LineI.Parse(System.String)">
            <summary>
            解析线段的字符串形式
            </summary>
            <param name="value">字符串</param>
            <returns>如果解析成功，返回LineI类型，否则将抛出异常</returns>
            <exception cref="T:System.FormatException">非法的字符串格式。</exception>
        </member>
        <member name="M:Howell.Drawing.D2.LineI.ToString">
            <summary>
            获取线段的字符串形式
            </summary>
            <returns>返回字符串形式</returns>
        </member>
        <member name="M:Howell.Drawing.D2.LineI.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:Howell.Drawing.D2.LineI"/> equal to the specified one.
            </summary>
            <param name="obj">Another point to check equalty to.</param>
            <returns>Return <see langword="true"/> if objects are equal.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.LineI.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            <returns>Returns the hash code for this instance.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.LineI.op_Equality(Howell.Drawing.D2.LineI,Howell.Drawing.D2.LineI)">
            <summary>
            equals operator - checks if two line is the same.
            </summary>
            <param name="l1">LineI object 1.</param>
            <param name="l2">LineI object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.LineI.op_Inequality(Howell.Drawing.D2.LineI,Howell.Drawing.D2.LineI)">
            <summary>
            equals operator - checks if two line is not the same.
            </summary>
            <param name="l1">LineI object 1.</param>
            <param name="l2">LineI object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.LineI.op_Implicit(Howell.Drawing.D2.LineI)~Howell.Drawing.D2.LineD">
            <summary>
            隐式转换
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.LineI.Equals(Howell.Drawing.D2.LineI)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Howell.Drawing.D2.LineI.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.LineI.Starting">
            <summary>
            起点
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.LineI.End">
            <summary>
            终点
            </summary>
        </member>
        <member name="T:Howell.Math.Algorithm.Mathematics">
            <summary>
            数学算法
            </summary>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Min(System.SByte[])">
            <summary>
            求最小值
            </summary>
            <param name="values">数值</param>
            <returns>返回最小值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Min(System.Int16[])">
            <summary>
            求最小值
            </summary>
            <param name="values">数值</param>
            <returns>返回最小值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Min(System.Int32[])">
            <summary>
            求最小值
            </summary>
            <param name="values">数值</param>
            <returns>返回最小值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Min(System.Int64[])">
            <summary>
            求最小值
            </summary>
            <param name="values">数值</param>
            <returns>返回最小值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Min(System.Byte[])">
            <summary>
            求最小值
            </summary>
            <param name="values">数值</param>
            <returns>返回最小值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Min(System.UInt16[])">
            <summary>
            求最小值
            </summary>
            <param name="values">数值</param>
            <returns>返回最小值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Min(System.UInt32[])">
            <summary>
            求最小值
            </summary>
            <param name="values">数值</param>
            <returns>返回最小值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Min(System.UInt64[])">
            <summary>
            求最小值
            </summary>
            <param name="values">数值</param>
            <returns>返回最小值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Min(System.Single[])">
            <summary>
            求最小值
            </summary>
            <param name="values">数值</param>
            <returns>返回最小值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Min(System.Decimal[])">
            <summary>
            求最小值
            </summary>
            <param name="values">数值</param>
            <returns>返回最小值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Min(System.Double[])">
            <summary>
            求最小值
            </summary>
            <param name="values">数值</param>
            <returns>返回最小值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Max(System.SByte[])">
            <summary>
            求最大值
            </summary>
            <param name="values">数值</param>
            <returns>返回最大值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Max(System.Int16[])">
            <summary>
            求最大值
            </summary>
            <param name="values">数值</param>
            <returns>返回最大值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Max(System.Int32[])">
            <summary>
            求最大值
            </summary>
            <param name="values">数值</param>
            <returns>返回最大值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Max(System.Int64[])">
            <summary>
            求最大值
            </summary>
            <param name="values">数值</param>
            <returns>返回最大值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Max(System.Byte[])">
            <summary>
            求最大值
            </summary>
            <param name="values">数值</param>
            <returns>返回最大值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Max(System.UInt16[])">
            <summary>
            求最大值
            </summary>
            <param name="values">数值</param>
            <returns>返回最大值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Max(System.UInt32[])">
            <summary>
            求最大值
            </summary>
            <param name="values">数值</param>
            <returns>返回最大值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Max(System.UInt64[])">
            <summary>
            求最大值
            </summary>
            <param name="values">数值</param>
            <returns>返回最大值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Max(System.Single[])">
            <summary>
            求最大值
            </summary>
            <param name="values">数值</param>
            <returns>返回最大值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Max(System.Decimal[])">
            <summary>
            求最大值
            </summary>
            <param name="values">数值</param>
            <returns>返回最大值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Max(System.Double[])">
            <summary>
            求最大值
            </summary>
            <param name="values">数值</param>
            <returns>返回最大值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.GCD(System.Int32,System.Int32)">
            <summary>
            Greatest Common Divisor 最大公约数
            </summary>
            <param name="a">数值a</param>
            <param name="b">数值b</param>
            <returns>返回最大公约数。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.GCD(System.UInt32,System.UInt32)">
            <summary>
            Greatest Common Divisor 最大公约数
            </summary>
            <param name="a">数值a</param>
            <param name="b">数值b</param>
            <returns>返回最大公约数。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.GCD(System.Int64,System.Int64)">
            <summary>
            Greatest Common Divisor 最大公约数
            </summary>
            <param name="a">数值a</param>
            <param name="b">数值b</param>
            <returns>返回最大公约数。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.GCD(System.UInt64,System.UInt64)">
            <summary>
            Greatest Common Divisor 最大公约数
            </summary>
            <param name="a">数值a</param>
            <param name="b">数值b</param>
            <returns>返回最大公约数。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.LCM(System.Int32,System.Int32)">
            <summary>
            Lease Common Multiple
            </summary>
            <param name="a">数值a</param>
            <param name="b">数值b</param>
            <returns>返回最小公倍数。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.LCM(System.UInt32,System.UInt32)">
            <summary>
            Lease Common Multiple
            </summary>
            <param name="a">数值a</param>
            <param name="b">数值b</param>
            <returns>返回最小公倍数。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.LCM(System.Int64,System.Int64)">
            <summary>
            Lease Common Multiple
            </summary>
            <param name="a">数值a</param>
            <param name="b">数值b</param>
            <returns>返回最小公倍数。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.LCM(System.UInt64,System.UInt64)">
            <summary>
            Lease Common Multiple
            </summary>
            <param name="a">数值a</param>
            <param name="b">数值b</param>
            <returns>返回最小公倍数。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Factorial(System.Int32)">
            <summary>
            阶乘
            </summary>
            <param name="value">数值</param>
            <returns>返回阶乘结果。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Factorial(System.UInt32)">
            <summary>
            阶乘
            </summary>
            <param name="value">数值</param>
            <returns>返回阶乘结果。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Factorial(System.Int64)">
            <summary>
            阶乘
            </summary>
            <param name="value">数值</param>
            <returns>返回阶乘结果。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Mathematics.Factorial(System.UInt64)">
            <summary>
            阶乘
            </summary>
            <param name="value">数值</param>
            <returns>返回阶乘结果。</returns>
        </member>
        <member name="T:Howell.Math.Algorithm.Geometry2DAlgorithm">
            <summary>
            平面几何算法
            </summary>
        </member>
        <member name="M:Howell.Math.Algorithm.Geometry2DAlgorithm.Multiple(Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD)">
            <summary>
            计算点 (0,0),P,Q,P+Q组成的平行四边形的带符号的面积
            P*Q
            </summary>
            <param name="P">点P</param>
            <param name="Q">点Q</param>
            <returns>返回面积值</returns>
            <remarks>
            返回值 大于 0 , 则P在Q的顺时针方向。
            返回值 小于 0 , 则P在Q的逆时针方向。
            返回值 等于 0 , 则P与Q共线，但可能同向也可能反向。
            </remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.Geometry2DAlgorithm.Substract(Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD)">
            <summary>
            计算点P-Q的值
            </summary>
            <param name="P">点P</param>
            <param name="Q">点Q</param>
            <returns>返回P-Q的值</returns>
        </member>
        <member name="T:Howell.Industry.ProtocolType">
            <summary>
            协议类型常量
            </summary>
        </member>
        <member name="F:Howell.Industry.ProtocolType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Howell.Industry.ProtocolType.Howell5198">
            <summary>
            皓维标准
            </summary>
        </member>
        <member name="F:Howell.Industry.ProtocolType.Howell8000">
            <summary>
            皓维8000系列标准
            </summary>
        </member>
        <member name="F:Howell.Industry.ProtocolType.Hikvision">
            <summary>
            海康威视
            </summary>
        </member>
        <member name="F:Howell.Industry.ProtocolType.Howell5201">
            <summary>
            皓维5201标准 (工控式)
            </summary>
        </member>
        <member name="F:Howell.Industry.ProtocolType.PSIA">
            <summary>
            PSIA
            </summary>
        </member>
        <member name="F:Howell.Industry.ProtocolType.ONVIF">
            <summary>
            ONVIF
            </summary>
        </member>
        <member name="F:Howell.Industry.ProtocolType.GB28181">
            <summary>
            GB28181 国标协议
            </summary>
        </member>
        <member name="F:Howell.Industry.ProtocolType.Howell3204">
            <summary>
            皓维3204报警协议
            </summary>
        </member>
        <member name="F:Howell.Industry.ProtocolType.PEAK">
            <summary>
            深圳披克门禁控制器协议
            </summary>
        </member>
        <member name="F:Howell.Industry.ProtocolType.InfinovaMatrixSpecial">
            <summary>
            英飞拓矩阵协议特殊应用
            </summary>
        </member>
        <member name="T:Howell.Industry.AAMProtocolType">
            <summary>
            模拟报警主机协议类型
            </summary>
        </member>
        <member name="F:Howell.Industry.AAMProtocolType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Howell.Industry.AAMProtocolType.PEAK">
            <summary>
            PEAK 深圳披克
            </summary>
        </member>
        <member name="T:Howell.Industry.AnalogMatrixProtocolType">
            <summary>
            模拟矩阵协议
            </summary>
        </member>
        <member name="F:Howell.Industry.AnalogMatrixProtocolType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="T:Howell.Industry.DecodingUnitProtocolType">
            <summary>
            解码单元协议类型
            </summary>
        </member>
        <member name="F:Howell.Industry.DecodingUnitProtocolType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Howell.Industry.DecodingUnitProtocolType.Howell8000">
            <summary>
            皓维8000系列标准
            </summary>
        </member>
        <member name="T:Howell.Industry.DigitalMatrixProtocolType">
            <summary>
            数字矩阵协议类型
            </summary>
        </member>
        <member name="F:Howell.Industry.DigitalMatrixProtocolType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Howell.Industry.DigitalMatrixProtocolType.Howell5198">
            <summary>
            皓维标准
            </summary>
        </member>
        <member name="T:Howell.Industry.DVRProtocolType">
            <summary>
            数字视频录像机协议类型
            </summary>
        </member>
        <member name="F:Howell.Industry.DVRProtocolType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Howell.Industry.DVRProtocolType.Howell5198">
            <summary>
            皓维标准
            </summary>
        </member>
        <member name="F:Howell.Industry.DVRProtocolType.Howell8000">
            <summary>
            皓维8000系列标准
            </summary>
        </member>
        <member name="F:Howell.Industry.DVRProtocolType.Hikvision">
            <summary>
            海康威视
            </summary>
        </member>
        <member name="F:Howell.Industry.DVRProtocolType.Howell5201">
            <summary>
            皓维5201标准 (工控式)
            </summary>
        </member>
        <member name="T:Howell.Industry.DVSProtocolType">
            <summary>
            数字视频服务器协议类型
            </summary>
        </member>
        <member name="F:Howell.Industry.DVSProtocolType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Howell.Industry.DVSProtocolType.Howell5198">
            <summary>
            皓维标准
            </summary>
        </member>
        <member name="F:Howell.Industry.DVSProtocolType.Howell8000">
            <summary>
            皓维8000系列标准
            </summary>
        </member>
        <member name="F:Howell.Industry.DVSProtocolType.Hikvision">
            <summary>
            海康威视
            </summary>
        </member>
        <member name="T:Howell.Industry.EncodingUnitProtocolType">
            <summary>
            编码单元协议类型
            </summary>
        </member>
        <member name="F:Howell.Industry.EncodingUnitProtocolType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Howell.Industry.EncodingUnitProtocolType.Howell8000">
            <summary>
            皓维8000系列标准
            </summary>
        </member>
        <member name="T:Howell.Industry.HDDecoderProtocolType">
            <summary>
            数字矩阵协议类型
            </summary>
        </member>
        <member name="F:Howell.Industry.HDDecoderProtocolType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Howell.Industry.HDDecoderProtocolType.Howell5198">
            <summary>
            皓维标准
            </summary>
        </member>
        <member name="F:Howell.Industry.HDDecoderProtocolType.Howell8000">
            <summary>
            皓维8000系列标准
            </summary>
        </member>
        <member name="F:Howell.Industry.HDDecoderProtocolType.Hikvision">
            <summary>
            海康威视
            </summary>
        </member>
        <member name="T:Howell.Industry.IntegratedMatrixProtocolType">
            <summary>
            综合数字矩阵协议
            </summary>
        </member>
        <member name="F:Howell.Industry.IntegratedMatrixProtocolType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Howell.Industry.IntegratedMatrixProtocolType.Howell8000">
            <summary>
            皓维8000系列标准
            </summary>
        </member>
        <member name="T:Howell.Industry.IPCameraProtocolType">
            <summary>
            IP摄像机协议类型
            </summary>
        </member>
        <member name="F:Howell.Industry.IPCameraProtocolType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Howell.Industry.IPCameraProtocolType.Howell5198">
            <summary>
            皓维标准
            </summary>
        </member>
        <member name="F:Howell.Industry.IPCameraProtocolType.Howell8000">
            <summary>
            皓维8000系列标准
            </summary>
        </member>
        <member name="F:Howell.Industry.IPCameraProtocolType.Hikvision">
            <summary>
            海康威视
            </summary>
        </member>
        <member name="T:Howell.Industry.MatrixControlUnitProtocolType">
            <summary>
            矩阵控制单元协议
            </summary>
        </member>
        <member name="F:Howell.Industry.MatrixControlUnitProtocolType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="T:Howell.Industry.NAMProtocolType">
            <summary>
            网络报警主机协议类型
            </summary>
        </member>
        <member name="F:Howell.Industry.NAMProtocolType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Howell.Industry.NAMProtocolType.Howell3204">
            <summary>
            皓维3204报警器
            </summary>
        </member>
        <member name="T:Howell.Industry.NVRProtocolType">
            <summary>
            网络视频录像机协议类型
            </summary>
        </member>
        <member name="F:Howell.Industry.NVRProtocolType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Howell.Industry.NVRProtocolType.Howell5198">
            <summary>
            皓维标准
            </summary>
        </member>
        <member name="F:Howell.Industry.NVRProtocolType.Howell8000">
            <summary>
            皓维8000系列标准
            </summary>
        </member>
        <member name="F:Howell.Industry.NVRProtocolType.Hikvision">
            <summary>
            海康威视
            </summary>
        </member>
        <member name="T:Howell.Industry.NVSProtocolType">
            <summary>
            网络视频服务器协议类型
            </summary>
        </member>
        <member name="F:Howell.Industry.NVSProtocolType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Howell.Industry.NVSProtocolType.Howell5198">
            <summary>
            皓维标准
            </summary>
        </member>
        <member name="T:Howell.Industry.StreamingMediaServerProtocolType">
            <summary>
            流媒体服务器协议
            </summary>
        </member>
        <member name="F:Howell.Industry.StreamingMediaServerProtocolType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="T:Howell.Industry.VASProtocolType">
            <summary>
            视频分析服务器协议类型
            </summary>
        </member>
        <member name="F:Howell.Industry.VASProtocolType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Howell.Industry.VASProtocolType.PSIA">
            <summary>
            PSIA协议
            </summary>
        </member>
        <member name="T:Howell.Industry.VPSProtocolType">
            <summary>
            视频处理服务器协议类型
            </summary>
        </member>
        <member name="F:Howell.Industry.VPSProtocolType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Howell.Industry.VPSProtocolType.Howell5201">
            <summary>
            皓维5201标准 (工控式)
            </summary>
        </member>
        <member name="T:Howell.Industry.AlarmType">
            <summary>
            报警类型
            </summary>
        </member>
        <member name="F:Howell.Industry.AlarmType.None">
            <summary>
            无信息
            </summary>
        </member>
        <member name="F:Howell.Industry.AlarmType.IO">
            <summary>
            信号量(报警输入)报警
            </summary>
        </member>
        <member name="F:Howell.Industry.AlarmType.VMD">
            <summary>
            运动侦测报警 (Video Motion Detection)
            </summary>
        </member>
        <member name="F:Howell.Industry.AlarmType.Videoloss">
            <summary>
            视频信号丢失报警
            </summary>
        </member>
        <member name="F:Howell.Industry.AlarmType.RAIDFailure">
            <summary>
            创建RAID(磁盘冗余阵列)失败
            </summary>
        </member>
        <member name="F:Howell.Industry.AlarmType.RecordingFailure">
            <summary>
            录像失败
            </summary>
        </member>
        <member name="F:Howell.Industry.AlarmType.BadVideo">
            <summary>
            视频输入源异常 (该值取代原先的ChannelUndefined(通道未定义))
            </summary>
        </member>
        <member name="F:Howell.Industry.AlarmType.POS">
            <summary>
            非法的销售点 (Point of sale)
            </summary>
        </member>
        <member name="F:Howell.Industry.AlarmType.FanFailure">
            <summary>
            风扇异常
            </summary>
        </member>
        <member name="F:Howell.Industry.AlarmType.Overheat">
            <summary>
            设备温度过高
            </summary>
        </member>
        <member name="F:Howell.Industry.AlarmType.Offline">
            <summary>
            下线报警
            </summary>
        </member>
        <member name="F:Howell.Industry.AlarmType.HddFailure">
            <summary>
            硬盘出错
            </summary>
        </member>
        <member name="F:Howell.Industry.AlarmType.HddFull">
            <summary>
            硬盘满
            </summary>
        </member>
        <member name="F:Howell.Industry.AlarmType.VideoTurnning">
            <summary>
            视频被旋转
            </summary>
        </member>
        <member name="F:Howell.Industry.AlarmType.VideoInterference">
            <summary>
            视频信号被干扰
            </summary>
        </member>
        <member name="T:Howell.Drawing.D2.PointSetI">
            <summary>
            点集合
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.PointSetI.RegularExpressionString">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.PointSetI.Empty">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:Howell.Drawing.D2.PointSetI.#ctor(System.Collections.Generic.IList{Howell.Drawing.D2.PointI})">
            <summary>
            Constructor
            </summary>
            <param name="points">折线的拐点</param>        
        </member>
        <member name="M:Howell.Drawing.D2.PointSetI.#ctor(Howell.Drawing.D2.PointI[])">
            <summary>
            Constructor
            </summary>
            <param name="points">折线的拐点</param>        
        </member>
        <member name="M:Howell.Drawing.D2.PointSetI.Parse(System.String)">
            <summary>
            解析点集的字符串形式
            </summary>
            <param name="value">字符串</param>
            <returns>如果解析成功，返回PointSetI类型，否则将抛出异常</returns>
            <exception cref="T:System.FormatException">非法的字符串格式。</exception>
        </member>
        <member name="M:Howell.Drawing.D2.PointSetI.ToString">
            <summary>
            获取点集类型的字符串型式
            </summary>
            <returns>返回点集类型的字符串型式。</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointSetI.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:Howell.Drawing.D2.PolylineI"/> equal to the specified one.
            </summary>
            <param name="obj">Another point to check equalty to.</param>
            <returns>Return <see langword="true"/> if objects are equal.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointSetI.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            <returns>Returns the hash code for this instance.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointSetI.op_Equality(Howell.Drawing.D2.PointSetI,Howell.Drawing.D2.PointSetI)">
            <summary>
            equals operator - checks if two polygon is the same.
            </summary>
            <param name="p1">PointSetI object 1.</param>
            <param name="p2">PointSetI object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointSetI.op_Inequality(Howell.Drawing.D2.PointSetI,Howell.Drawing.D2.PointSetI)">
            <summary>
            equals operator - checks if two polygon is not the same.
            </summary>
            <param name="p1">PointSetI object 1.</param>
            <param name="p2">PointSetI object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointSetI.op_Implicit(Howell.Drawing.D2.PointSetI)~Howell.Drawing.D2.PointSetD">
            <summary>
            显式转换PointSetI To PointSetD
            </summary>
            <param name="pointSet">点集</param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointSetI.Equals(Howell.Drawing.D2.PointSetI)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointSetI.GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointSetI.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="P:Howell.Drawing.D2.PointSetI.Points">
            <summary>
            折线的拐点
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.PointSetI.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="T:Howell.Schedules.PlanPeriod">
            <summary>
            .NET 时间段计划对象
            </summary>
        </member>
        <member name="M:Howell.Schedules.PlanPeriod.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:Howell.Schedules.PlanPeriod.SystemEvents_TimeChanged(System.Object,System.EventArgs)">
            <summary>
            系统时间被修改后触发的事件，主要用于修改系统时间后会出现计划任务时间不正确的问题
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Howell.Schedules.PlanPeriod.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            创建每日重复的时间段计划对象
            </summary>
            <param name="beginHour">开始时间的小时值</param>
            <param name="beginMinute">开始时间的分钟值</param>
            <param name="beginSecond">开始时间的秒值</param>
            <param name="endHour">结束时间的小时值</param>
            <param name="endMinute">结束时间的分钟值</param>
            <param name="endSecond">结束时间的秒值</param>
        </member>
        <member name="M:Howell.Schedules.PlanPeriod.#ctor(System.Int32,System.Int32,System.Int32,System.DayOfWeek,System.Int32,System.Int32,System.Int32,System.DayOfWeek)">
            <summary>
            创建每周重复的时间段计划对象
            </summary>
            <param name="beginHour">开始时间的小时值</param>
            <param name="beginMinute">开始时间的分钟值</param>
            <param name="beginSecond">开始时间的秒值</param>
            <param name="beginDayOfWeek">开始时间的星期几</param>
            <param name="endHour">结束时间的小时值</param>
            <param name="endMinute">结束时间的分钟值</param>
            <param name="endSecond">结束时间的秒值</param>
            <param name="endDayOfWeek">结束时间的星期几</param>
        </member>
        <member name="M:Howell.Schedules.PlanPeriod.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            创建一次性的时间段计划对象
            </summary>
            <param name="beginYear">开始时间的年</param>
            <param name="beginMonth">开始时间的月</param>
            <param name="beginDay">开始时间的日</param>
            <param name="beginHour">开始时间的小时</param>
            <param name="beginMinute">开始时间的分钟</param>
            <param name="beginSecond">开始时间的秒</param>
            <param name="endYear">结束时间的年</param>
            <param name="endMonth">结束时间的月</param>
            <param name="endDay">结束时间的日</param>
            <param name="endHour">结束时间的小时</param>
            <param name="endMinute">结束时间的分钟</param>
            <param name="endSecond">结束时间的秒</param>
        </member>
        <member name="M:Howell.Schedules.PlanPeriod.#ctor(System.DateTime,System.DateTime)">
            <summary>
            创建一次性的时间段计划对象
            </summary>
            <param name="beginTime">开始时间</param>
            <param name="endTime">结束时间</param>
        </member>
        <member name="M:Howell.Schedules.PlanPeriod.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.Nullable{System.DayOfWeek},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.Nullable{System.DayOfWeek})">
            <summary>
            
            </summary>
            <param name="beginYear"></param>
            <param name="beginMonth"></param>
            <param name="beginDay"></param>
            <param name="beginHour"></param>
            <param name="beginMinute"></param>
            <param name="beginSecond"></param>
            <param name="beginDayOfWeek"></param>
            <param name="endYear"></param>
            <param name="endMonth"></param>
            <param name="endDay"></param>
            <param name="endHour"></param>
            <param name="endMinute"></param>
            <param name="endSecond"></param>
            <param name="endDayOfWeek"></param>
        </member>
        <member name="M:Howell.Schedules.PlanPeriod.#ctor(System.String,Howell.Schedules.PlanTime,Howell.Schedules.PlanTime)">
            <summary>
            创建时间段计划对象
            </summary>
            <param name="id"></param>
            <param name="beginTime"></param>
            <param name="endTime"></param>
        </member>
        <member name="M:Howell.Schedules.PlanPeriod.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.Nullable{System.DayOfWeek},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.Nullable{System.DayOfWeek})">
            <summary>
            创建时间段计划对象
            </summary>
            <param name="id"></param>
            <param name="beginYear"></param>
            <param name="beginMonth"></param>
            <param name="beginDay"></param>
            <param name="beginHour"></param>
            <param name="beginMinute"></param>
            <param name="beginSecond"></param>
            <param name="beginDayOfWeek"></param>
            <param name="endYear"></param>
            <param name="endMonth"></param>
            <param name="endDay"></param>
            <param name="endHour"></param>
            <param name="endMinute"></param>
            <param name="endSecond"></param>
            <param name="endDayOfWeek"></param>
        </member>
        <member name="M:Howell.Schedules.PlanPeriod.Reset">
            <summary>
            重置计划
            </summary>
        </member>
        <member name="M:Howell.Schedules.PlanPeriod.Dispose">
            <summary>
            销毁由PlanPeriod占用的非托管资源，还可以另外再释放托管资源
            </summary>
        </member>
        <member name="M:Howell.Schedules.PlanPeriod.Dispose(System.Boolean)">
            <summary>
            释放由 PlanPeriod 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
            <param name="disposing">为 true，则释放托管资源和非托管资源；为 false，则仅释放非托管资源。</param>
        </member>
        <member name="M:Howell.Schedules.PlanPeriod.RaiseBeginning">
            <summary>
            触发计划开始事件
            </summary>
        </member>
        <member name="M:Howell.Schedules.PlanPeriod.RaiseEnding">
            <summary>
            触发计划结束事件
            </summary>
        </member>
        <member name="M:Howell.Schedules.PlanPeriod.GetNextRaisePeriod">
            <summary>
            获取下次触发事件的时间间隔
            </summary>
            <returns>返回时间间隔</returns>
        </member>
        <member name="M:Howell.Schedules.PlanPeriod.AddRemindedTime">
            <summary>
            添加计划触发的时间
            </summary>
        </member>
        <member name="M:Howell.Schedules.PlanPeriod.PlanTimerCallBack(System.Object)">
            <summary>
            
            </summary>
            <param name="state"></param>
        </member>
        <member name="P:Howell.Schedules.PlanPeriod.Id">
            <summary>
            计划全局唯一ID
            </summary>
        </member>
        <member name="P:Howell.Schedules.PlanPeriod.Enabled">
            <summary>
            是否启用计划提示功能
            注意：如果在提示期间Enabled的值被修改，将不再继续RepeatTimes的后续提示，而是转而等待下次计划的触发。
            </summary>
        </member>
        <member name="P:Howell.Schedules.PlanPeriod.Type">
            <summary>
            计划类型
            </summary>
        </member>
        <member name="P:Howell.Schedules.PlanPeriod.BeginTime">
            <summary>
            获取当前的计划开始时间
            </summary>
        </member>
        <member name="P:Howell.Schedules.PlanPeriod.EndTime">
            <summary>
            获取当前的计划结束时间
            </summary>
        </member>
        <member name="P:Howell.Schedules.PlanPeriod.Tag">
            <summary>
            标记
            </summary>
        </member>
        <member name="P:Howell.Schedules.PlanPeriod.Content">
            <summary>
            计划内容
            </summary>
        </member>
        <member name="E:Howell.Schedules.PlanPeriod.Beginning">
            <summary>
            时间段计划开始提示
            </summary>
        </member>
        <member name="E:Howell.Schedules.PlanPeriod.Ending">
            <summary>
            时间段计划结束提示
            </summary>
        </member>
        <member name="T:Howell.Media.MeidaSoundException">
            <summary>
            媒体音频播放异常类型
            </summary>
        </member>
        <member name="M:Howell.Media.MeidaSoundException.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:Howell.Media.MeidaSoundException.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="message">异常信息</param>
        </member>
        <member name="M:Howell.Media.MeidaSoundException.#ctor(System.String,System.Exception)">
            <summary>
            构造
            </summary>
            <param name="message">异常信息</param>
            <param name="innerException">内部异常对象</param>
        </member>
        <member name="T:Howell.Media.SoundPlayerState">
            <summary>
            音频播放器状态
            </summary>
        </member>
        <member name="F:Howell.Media.SoundPlayerState.NotReady">
            <summary>
            设备尚未准备
            </summary>
        </member>
        <member name="F:Howell.Media.SoundPlayerState.Stop">
            <summary>
            已停止
            </summary>
        </member>
        <member name="F:Howell.Media.SoundPlayerState.Play">
            <summary>
            正在播放
            </summary>
        </member>
        <member name="F:Howell.Media.SoundPlayerState.Record">
            <summary>
            正在录制
            </summary>
        </member>
        <member name="F:Howell.Media.SoundPlayerState.Seek">
            <summary>
            正在定位
            </summary>
        </member>
        <member name="F:Howell.Media.SoundPlayerState.Pause">
            <summary>
            暂停
            </summary>
        </member>
        <member name="F:Howell.Media.SoundPlayerState.Open">
            <summary>
            音频文件已打开
            </summary>
        </member>
        <member name="T:Howell.Media.SoundPlayer">
            <summary>
            Windows 音频播放器, 支持播放.wav,.midi,.mp3 音频文件
            注意在部分机器上无法播放Mp3文件
            </summary>
        </member>
        <member name="M:Howell.Media.SoundPlayer.mciSendCommand(System.UInt32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            The mciSendCommand function sends a command message to the specified MCI device.
            </summary>
            <param name="mciId">Device identifier of the MCI device that is to receive the command message. This parameter is not used with the MCI_OPEN command message.</param>
            <param name="uMessage">Command message. For a list, see Multimedia Commands.</param>
            <param name="fdwCommand">Flags for the command message.</param>
            <param name="dwParam">Pointer to a structure that contains parameters for the command message.</param>
            <returns>
            Returns zero if successful or an error otherwise. 
            The low-order word of the returned DWORD value contains the error return value. 
            If the error is device-specific, the high-order word of the return value is the driver identifier; 
            otherwise, the high-order word is zero. For a list of possible return values, see MCIERR Return Values.
            </returns>
        </member>
        <member name="M:Howell.Media.SoundPlayer.mciGetErrorString(System.UInt32,System.Text.StringBuilder,System.UInt32)">
            <summary>
            The mciGetErrorString function retrieves a string that describes the specified MCI error code.
            </summary>
            <param name="fdwError">Error code returned by the mciSendCommand or mciSendString function.</param>
            <param name="lpszErrorText">Pointer to a buffer that receives a null-terminated string describing the specified error.</param>
            <param name="cchErrorText">Length of the buffer, in characters, pointed to by the lpszErrorText parameter.</param>
            <returns>Returns TRUE if successful or FALSE if the error code is not known.</returns>
        </member>
        <member name="M:Howell.Media.SoundPlayer.#ctor">
            <summary>
            构造函数，创建SoundPlayer对象
            </summary>
        </member>
        <member name="M:Howell.Media.SoundPlayer.#ctor(System.String)">
            <summary>
            构造函数，创建SoundPlayer对象
            </summary>
            <param name="soundLocation">要加载的音频文件的位置。</param>
        </member>
        <member name="M:Howell.Media.SoundPlayer.Load">
            <summary>
            同步加载声音。
            </summary>
            <exception cref="T:System.ArgumentNullException"> Howell.Media.SoundPlayer.SoundLocation 未指定音频文件。</exception>
            <exception cref="T:System.TimeoutException">加载所用的时间超出了 Howell.Media.SoundPlayer.LoadTimeout 指定的时间（以毫秒为单位）。</exception>
            <exception cref="T:System.IO.FileNotFoundException">无法找到由 Howell.Media.SoundPlayer.SoundLocation 指定的文件。</exception>
        </member>
        <member name="M:Howell.Media.SoundPlayer.Play">
            <summary>
            使用新线程播放音频文件，如果尚未加载音频文件，则先加载该文件。
            </summary>
        </member>
        <member name="M:Howell.Media.SoundPlayer.PlaySync">
            <summary>
            使用当前线程播放音频文件，如果尚未加载音频文件，则先加载该文件。
            </summary>
        </member>
        <member name="M:Howell.Media.SoundPlayer.Pause">
            <summary>
            暂停音频播放
            </summary>
        </member>
        <member name="M:Howell.Media.SoundPlayer.Seek(System.TimeSpan)">
            <summary>
            定位音频播放位置
            </summary>
            <param name="position">音频播放位置</param>
        </member>
        <member name="M:Howell.Media.SoundPlayer.Stop">
            <summary>
            如果播放正在进行，则停止播放声音。
            </summary>
        </member>
        <member name="M:Howell.Media.SoundPlayer.Dispose">
            <summary>
            销毁音频播放器对象
            </summary>
        </member>
        <member name="M:Howell.Media.SoundPlayer.GetPosition">
            <summary>
            获取音频文件的播放进度
            </summary>
            <returns>返回已播放的时间长度</returns>
        </member>
        <member name="M:Howell.Media.SoundPlayer.GetLength">
            <summary>
            获取音频文件的总时长
            </summary>
            <returns>返回音频文件的总时长</returns>
        </member>
        <member name="M:Howell.Media.SoundPlayer.GetState">
            <summary>
            获取播放状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.Media.SoundPlayer.Play(System.Boolean)">
            <summary>
            
            </summary>
            <param name="synchronized"></param>
        </member>
        <member name="M:Howell.Media.SoundPlayer.Open">
            <summary>
            
            </summary>
        </member>
        <member name="M:Howell.Media.SoundPlayer.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:Howell.Media.SoundPlayer.CheckError(System.UInt32)">
            <summary>
            
            </summary>
            <param name="errCode"></param>
        </member>
        <member name="P:Howell.Media.SoundPlayer.SoundLocation">
            <summary>
            获取或设置要加载的音频文件的文件路径或 URL。
            </summary>
        </member>
        <member name="P:Howell.Media.SoundPlayer.Paused">
            <summary>
            是否处于暂停状态
            </summary>
        </member>
        <member name="P:Howell.Media.SoundPlayer.IsPlaying">
            <summary>
            是否正在播放
            </summary>
        </member>
        <member name="T:Howell.Drawing.D2.PointI">
            <summary>
            点
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.PointI.RegularExpressionString">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.PointI.Empty">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:Howell.Drawing.D2.PointI.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="x">X轴</param>
            <param name="y">Y轴</param>
        </member>
        <member name="M:Howell.Drawing.D2.PointI.Offset(System.Int32,System.Int32)">
            <summary>
            偏移点的坐标
            </summary>
            <param name="dx">偏移的X轴值</param>
            <param name="dy">偏移的Y轴值</param>
        </member>
        <member name="M:Howell.Drawing.D2.PointI.Offset(Howell.Drawing.D2.PointI)">
            <summary>
            偏移点的坐标
            </summary>
            <param name="p">偏移的坐标</param>
        </member>
        <member name="M:Howell.Drawing.D2.PointI.Offset(Howell.Drawing.D2.SizeI)">
            <summary>
            偏移点的坐标
            </summary>
            <param name="size">偏移的大小</param>
        </member>
        <member name="M:Howell.Drawing.D2.PointI.Parse(System.String)">
            <summary>
            解析点的字符串形式
            </summary>
            <param name="value">字符串</param>
            <returns>如果解析成功，返回PointI类型，否则将抛出异常</returns>
            <exception cref="T:System.FormatException">非法的字符串格式。</exception>
        </member>
        <member name="M:Howell.Drawing.D2.PointI.ToString">
            <summary>
            ToString
            </summary>
            <returns>返回字符串形式</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointI.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:Howell.Drawing.D2.PointI"/> equal to the specified one.
            </summary>
            <param name="obj">Another point to check equalty to.</param>
            <returns>Return <see langword="true"/> if objects are equal.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointI.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            <returns>Returns the hash code for this instance.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointI.op_Implicit(Howell.Drawing.D2.PointI)~Howell.Drawing.D2.PointD">
            <summary>
            隐式转换PointI To PointI
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointI.op_Explicit(Howell.Drawing.D2.SizeI)~Howell.Drawing.D2.PointI">
            <summary>
            显示转换Size 2 Point
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointI.op_Explicit(Howell.Drawing.D2.PointI)~System.Drawing.Point">
            <summary>
            隐式转换PointI To Point
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointI.op_Equality(Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI)">
            <summary>
            equals operator - checks if two point is the same.
            </summary>
            <param name="p1">PointI object 1.</param>
            <param name="p2">PointI object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointI.op_Inequality(Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI)">
            <summary>
            equals operator - checks if two point is not the same.
            </summary>
            <param name="p1">PointI object 1.</param>
            <param name="p2">PointI object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointI.op_Addition(Howell.Drawing.D2.PointI,Howell.Drawing.D2.SizeI)">
            <summary>
            加运算
            </summary>
            <param name="pt">点</param>
            <param name="sz">大小</param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointI.op_Subtraction(Howell.Drawing.D2.PointI,Howell.Drawing.D2.SizeI)">
            <summary>
            减运算
            </summary>
            <param name="pt">点</param>
            <param name="sz">大小</param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointI.op_Subtraction(Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI)">
            <summary>
            减运算
            </summary>
            <param name="pt1">点1</param>
            <param name="pt2">点2</param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointI.op_Addition(Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI)">
            <summary>
            加运算
            </summary>
            <param name="pt1">点1</param>
            <param name="pt2">点2</param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointI.Equals(Howell.Drawing.D2.PointI)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointI.CompareTo(Howell.Drawing.D2.PointI)">
            <summary>
            CompareTo
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointI.CompareTo(System.Object)">
            <summary>
            CompareTo
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Howell.Drawing.D2.PointI.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.PointI.X">
            <summary>
            X轴坐标
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.PointI.Y">
            <summary>
            Y轴坐标
            </summary>
        </member>
        <member name="T:Howell.Drawing.D2.EllipseI">
            <summary>
            椭圆
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.EllipseI.RegularExpressionString">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.EllipseI.Empty">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:Howell.Drawing.D2.EllipseI.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="x">中心点X</param>
            <param name="y">中心点Y</param>
            <param name="major">主轴长度</param>
            <param name="minor">副轴长度</param>
        </member>
        <member name="M:Howell.Drawing.D2.EllipseI.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x">中心点X</param>
            <param name="y">中心点Y</param>
            <param name="major">主轴长度</param>
            <param name="minor">副轴长度</param>
            <param name="angle">椭圆旋转角度</param>
        </member>
        <member name="M:Howell.Drawing.D2.EllipseI.Parse(System.String)">
            <summary>
            解析椭圆的字符串形式
            </summary>
            <param name="value">字符串</param>
            <returns>如果解析成功，返回EllipseI类型，否则将抛出异常</returns>
            <exception cref="T:System.FormatException">非法的字符串格式。</exception>
        </member>
        <member name="M:Howell.Drawing.D2.EllipseI.ToString">
            <summary>
            获取椭圆的字符串形式
            </summary>
            <returns>返回椭圆字符串形式</returns>
        </member>
        <member name="M:Howell.Drawing.D2.EllipseI.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:Howell.Drawing.D2.EllipseI"/> equal to the specified one.
            </summary>
            <param name="obj">Another point to check equalty to.</param>
            <returns>Return <see langword="true"/> if objects are equal.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.EllipseI.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            <returns>Returns the hash code for this instance.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.EllipseI.op_Equality(Howell.Drawing.D2.EllipseI,Howell.Drawing.D2.EllipseI)">
            <summary>
            equals operator - checks if two ellipse is the same.
            </summary>
            <param name="e1">Ellipse2D object 1.</param>
            <param name="e2">Ellipse2D object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.EllipseI.op_Inequality(Howell.Drawing.D2.EllipseI,Howell.Drawing.D2.EllipseI)">
            <summary>
            equals operator - checks if two ellipse is not the same.
            </summary>
            <param name="e1">Ellipse2D object 1.</param>
            <param name="e2">Ellipse2D object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.EllipseI.op_Implicit(Howell.Drawing.D2.EllipseI)~Howell.Drawing.D2.EllipseD">
            <summary>
            隐式转换 EllipseD To EllipseI
            </summary>
            <param name="ellipse"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.EllipseI.Equals(Howell.Drawing.D2.EllipseI)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Howell.Drawing.D2.EllipseI.X">
            <summary>
            中心点X轴坐标
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.EllipseI.Y">
            <summary>
            中心点Y轴坐标
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.EllipseI.Center">
            <summary>
            中心点
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.EllipseI.Major">
            <summary>
            主轴长度
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.EllipseI.Minor">
            <summary>
            副轴长度
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.EllipseI.Angle">
            <summary>
            椭圆旋转角度
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.EllipseI.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="T:Howell.Industry.StorageType">
            <summary>
            存储方式
            </summary>
        </member>
        <member name="F:Howell.Industry.StorageType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Howell.Industry.StorageType.Internal">
            <summary>
            设备内部存储
            </summary>
        </member>
        <member name="F:Howell.Industry.StorageType.External">
            <summary>
            设备外部存储，如挂接盘阵等
            </summary>
        </member>
        <member name="T:Howell.Industry.VolumeType">
            <summary>
            卷标类型
            </summary>
        </member>
        <member name="F:Howell.Industry.VolumeType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Howell.Industry.VolumeType.VirtualDisk">
            <summary>
            虚拟磁盘
            </summary>
        </member>
        <member name="F:Howell.Industry.VolumeType.RAID0">
            <summary>
            RAID0
            </summary>
        </member>
        <member name="F:Howell.Industry.VolumeType.RAID1">
            <summary>
            RAID1
            </summary>
        </member>
        <member name="F:Howell.Industry.VolumeType.RAID0Plus1">
            <summary>
            RAID0+1
            </summary>
        </member>
        <member name="F:Howell.Industry.VolumeType.RAID5">
            <summary>
            RAID5
            </summary>
        </member>
        <member name="T:Howell.Industry.StorageMedium">
            <summary>
            存储介质
            </summary>
        </member>
        <member name="F:Howell.Industry.StorageMedium.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Howell.Industry.StorageMedium.HDD">
            <summary>
            硬盘
            </summary>
        </member>
        <member name="F:Howell.Industry.StorageMedium.Flash">
            <summary>
            闪存
            </summary>
        </member>
        <member name="F:Howell.Industry.StorageMedium.SDIO">
            <summary>
            安全数字输入输出卡
            </summary>
        </member>
        <member name="T:Howell.Industry.DevicePermissions">
            <summary>
            权限枚举类型
            </summary>
        </member>
        <member name="F:Howell.Industry.DevicePermissions.None">
            <summary>
            无权限
            </summary>
        </member>
        <member name="F:Howell.Industry.DevicePermissions.System">
            <summary>
            系统控制，包括重启，恢复出厂值，网络参数等
            </summary>
        </member>
        <member name="F:Howell.Industry.DevicePermissions.Media">
            <summary>
            视频源参数设置
            </summary>
        </member>
        <member name="F:Howell.Industry.DevicePermissions.Logs">
            <summary>
            日志查询功能
            </summary>
        </member>
        <member name="F:Howell.Industry.DevicePermissions.All">
            <summary>
            完全控制权限
            </summary>
        </member>
        <member name="T:Howell.Industry.VideoSourcePermissions">
            <summary>
            权限枚举类型
            </summary>
        </member>
        <member name="F:Howell.Industry.VideoSourcePermissions.None">
            <summary>
            无权限
            </summary>
        </member>
        <member name="F:Howell.Industry.VideoSourcePermissions.Preview">
            <summary>
            预览权限
            </summary>
        </member>
        <member name="F:Howell.Industry.VideoSourcePermissions.Playback">
            <summary>
            回放权限
            </summary>
        </member>
        <member name="F:Howell.Industry.VideoSourcePermissions.PTZ">
            <summary>
            云台控制权限
            </summary>
        </member>
        <member name="F:Howell.Industry.VideoSourcePermissions.All">
            <summary>
            完全控制权限
            </summary>
        </member>
        <member name="T:Howell.Industry.VideoOutSourcePermissions">
            <summary>
            权限枚举类型
            </summary>
        </member>
        <member name="F:Howell.Industry.VideoOutSourcePermissions.None">
            <summary>
            无权限
            </summary>
        </member>
        <member name="F:Howell.Industry.VideoOutSourcePermissions.All">
            <summary>
            完全控制权限
            </summary>
        </member>
        <member name="T:Howell.Cryptography.DES">
            <summary>
            DES 对称加密算法
            </summary>
        </member>
        <member name="M:Howell.Cryptography.DES.#ctor(System.Byte[],System.Byte[])">
            <summary>
            构造
            </summary>
            <param name="rgbKey">DES加密算法密钥</param>
            <param name="rgbIV">DES加密算法的初始化向量</param>
        </member>
        <member name="M:Howell.Cryptography.DES.Encrypt(System.String)">
            <summary>
            加密成字节字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Cryptography.DES.Decrypt(System.String)">
            <summary>
            解密字节字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Howell.Cryptography.DES.Key">
            <summary>
            DES加密算法密钥
            </summary>
        </member>
        <member name="P:Howell.Cryptography.DES.IV">
            <summary>
            DES加密算法的初始化向量 (8字节)
            </summary>
        </member>
        <member name="T:Howell.Interops.LibFunction`1">
            <summary>
            LibHowellFunction class
            </summary>
            <typeparam name="T">Function signature type</typeparam>
        </member>
        <member name="M:Howell.Interops.LibFunction`1.#ctor(System.IntPtr)">
            <summary>
            Construction
            </summary>
            <param name="libHowellHandle"></param>
        </member>
        <member name="M:Howell.Interops.LibFunction`1.#ctor(System.IntPtr,System.Version)">
            <summary>
            Construction
            </summary>
            <param name="libHowellHandle"></param>
            <param name="currentHowellVersion"></param>
        </member>
        <member name="M:Howell.Interops.LibFunction`1.CreateDelegate(System.IntPtr)">
            <summary>
            Create function delegate
            </summary>
            <param name="libHowellDllPointer"></param>
        </member>
        <member name="P:Howell.Interops.LibFunction`1.FunctionName">
            <summary>
            The function name in lib.
            </summary>
        </member>
        <member name="P:Howell.Interops.LibFunction`1.Invoke">
            <summary>
            Invoke the method.
            </summary>
        </member>
        <member name="P:Howell.Interops.LibFunction`1.IsAvailable">
            <summary>
            Check if this method is available with this version of libHowell.
            </summary>
        </member>
        <member name="P:Howell.Interops.LibFunction`1.FunctionNames">
            <summary>
            Function names 
            </summary>
        </member>
        <member name="T:Howell.Drawing.D2.SizeD">
            <summary>
            图形大小2D
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.SizeD.RegularExpressionString">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.SizeD.Empty">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:Howell.Drawing.D2.SizeD.#ctor(System.Double,System.Double)">
            <summary>
            Constructor 
            </summary>
            <param name="width">宽度</param>
            <param name="height">高度</param>
        </member>
        <member name="M:Howell.Drawing.D2.SizeD.Parse(System.String)">
            <summary>
            解析图形大小的字符串形式
            </summary>
            <param name="value">字符串</param>
            <returns>如果解析成功，返回SizeD类型，否则将抛出异常</returns>
            <exception cref="T:System.FormatException">非法的字符串格式。</exception>
        </member>
        <member name="M:Howell.Drawing.D2.SizeD.ToString">
            <summary>
            获取图形大小的字符串形式
            </summary>
            <returns>返回字符串形式</returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeD.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:Howell.Drawing.D2.SizeD"/> equal to the specified one.
            </summary>
            <param name="obj">Another point to check equalty to.</param>
            <returns>Return <see langword="true"/> if objects are equal.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeD.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            <returns>Returns the hash code for this instance.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeD.op_Explicit(Howell.Drawing.D2.SizeD)~Howell.Drawing.D2.PointD">
            <summary>
            显示转换Size 2 Point
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeD.op_Explicit(Howell.Drawing.D2.SizeD)~Howell.Drawing.D2.SizeI">
            <summary>
            隐式转换SizeD To SizeI
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeD.op_Equality(Howell.Drawing.D2.SizeD,Howell.Drawing.D2.SizeD)">
            <summary>
            equals operator - checks if two point is the same.
            </summary>
            <param name="s1">SizeD object 1.</param>
            <param name="s2">SizeD object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeD.op_Inequality(Howell.Drawing.D2.SizeD,Howell.Drawing.D2.SizeD)">
            <summary>
            equals operator - checks if two point is not the same.
            </summary>
            <param name="s1">SizeD object 1.</param>
            <param name="s2">SizeD object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeD.op_Addition(Howell.Drawing.D2.SizeD,Howell.Drawing.D2.SizeD)">
            <summary>
            加运算
            </summary>
            <param name="sz1"></param>
            <param name="sz2"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeD.op_Subtraction(Howell.Drawing.D2.SizeD,Howell.Drawing.D2.SizeD)">
            <summary>
            减运算
            </summary>
            <param name="sz1"></param>
            <param name="sz2"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeD.Ceiling(Howell.Drawing.D2.SizeD)">
            <summary>
            向上取整转换
            </summary>
            <param name="value">SizeD对象</param>
            <returns>返回SizeI对象</returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeD.Truncate(Howell.Drawing.D2.SizeD)">
            <summary>
            向下取整转换
            </summary>
            <param name="value">SizeD对象</param>
            <returns>返回SizeI对象</returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeD.Round(Howell.Drawing.D2.SizeD)">
            <summary>
            四舍五入取整转换
            </summary>
            <param name="value">SizeD对象</param>
            <returns>返回SizeI对象</returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeD.Equals(Howell.Drawing.D2.SizeD)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeD.CompareTo(Howell.Drawing.D2.SizeD)">
            <summary>
            CompareTo Width1*Height1 - Width2*Height2
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.SizeD.CompareTo(System.Object)">
            <summary>
            CompareTo
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Howell.Drawing.D2.SizeD.IsEmpty">
            <summary>
            是否为空对象
            </summary>
            <returns>True表示为空，否则返回False.</returns>
        </member>
        <member name="P:Howell.Drawing.D2.SizeD.Width">
            <summary>
            宽度
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.SizeD.Height">
            <summary>
            高度
            </summary>
        </member>
        <member name="T:Howell.Cryptography.RSA">
            <summary>
            RSA加密算法
            </summary>
        </member>
        <member name="M:Howell.Cryptography.RSA.CreateKey(System.String@,System.String@)">
            <summary>  
            RSA获取公钥私钥  
            </summary>  
            <param name="publicKey">输出公钥</param>  
            <param name="privateKey">输出密钥</param>  
        </member>
        <member name="M:Howell.Cryptography.RSA.CreateKey(System.Int32,System.String@,System.String@)">
            <summary>  
            RSA获取公钥私钥  
            </summary>  
            <param name="keySize">公钥密钥的位长，该值会影响最大可加密字节长度</param>
            <param name="publicKey">输出公钥</param>  
            <param name="privateKey">输出密钥</param>  
        </member>
        <member name="M:Howell.Cryptography.RSA.#ctor(System.String,System.String)">
            <summary>
            创建RSA加密算法对象
            </summary>
            <param name="publicKey">公钥</param>
            <param name="privateKey">私钥</param>
        </member>
        <member name="M:Howell.Cryptography.RSA.Encrypt(System.String)">
            <summary>  
            RSA加密  
            </summary>  
            <param name="source"></param>  
            <returns></returns>  
        </member>
        <member name="M:Howell.Cryptography.RSA.Decrypt(System.String)">
            <summary>  
            RSA解密  
            </summary>  
            <param name="strRSA"></param>  
            <returns></returns>  
        </member>
        <member name="P:Howell.Cryptography.RSA.PublicKey">
            <summary>
            公钥
            </summary>
        </member>
        <member name="P:Howell.Cryptography.RSA.PrivateKey">
            <summary>
            私钥
            </summary>
        </member>
        <member name="T:Howell.Cryptography.MD5">
            <summary>
            MD5加密及解码对象
            </summary>
        </member>
        <member name="M:Howell.Cryptography.MD5.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Howell.Cryptography.MD5.Encrypt(System.String)">
            <summary>
            加密MD5
            </summary>
            <param name="input">加密字符串</param>
            <returns>返回MD5加密后的数据.</returns>
        </member>
        <member name="M:Howell.Cryptography.MD5.Encrypt(System.Byte[])">
            <summary>
            加密MD5
            </summary>
            <param name="buffer">加密数据.</param>
            <returns>返回MD5加密后的数据.</returns>
        </member>
        <member name="M:Howell.Cryptography.MD5.Encrypt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            加密MD5
            </summary>
            <param name="buffer">加密数据</param>
            <param name="offset">加密数据偏移量</param>
            <param name="count">加密数据长度</param>
            <returns>返回MD5加密后的数据.</returns>
        </member>
        <member name="M:Howell.Cryptography.MD5.EncryptToString(System.String)">
            <summary>
            加密MD5
            </summary>
            <param name="input">加密字符串</param>
            <returns>返回MD5加密后的字符串.</returns>
        </member>
        <member name="M:Howell.Cryptography.MD5.EncryptToString(System.Byte[])">
            <summary>
            加密MD5
            </summary>
            <param name="buffer">加密数据.</param>
            <returns>返回MD5加密后的字符串.</returns>
        </member>
        <member name="M:Howell.Cryptography.MD5.EncryptToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            加密MD5
            </summary>
            <param name="buffer">加密数据</param>
            <param name="offset">加密数据偏移量</param>
            <param name="count">加密数据长度</param>
            <returns>返回MD5加密后的字符串.</returns>
        </member>
        <member name="M:Howell.Cryptography.MD5.Dispose">
            <summary>
            销毁对象
            </summary>
        </member>
        <member name="T:Howell.Time.ISO8601TimeZones">
            <summary>
            时区枚举
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.ACDT">
            <summary>
            Australian Central Daylight  +1030
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.ACST">
            <summary>
            Australian Central Standard +0930
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.ADT">
            <summary>
            (US) Atlantic Daylight -0300
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.AEDT">
            <summary>
            Australian East Daylight  +1100
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.AEST">
            <summary>
            Australian East Standard +1000
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.AHDT">
            <summary>
            AHDT   -0900
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.AHST">
            <summary>
            AHDT   -1000
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.AST">
            <summary>
            (US) Atlantic Standard -0400
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.AT">
            <summary>
            Azores  -0200
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.AWDT">
            <summary>
            Australian West Daylight  +0900
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.AWST">
            <summary>
            Australian West Standard  +0800
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.BAT">
            <summary>
            Bhagdad  +0300
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.BDST">
            <summary>
            British Double Summer  +0200
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.BET">
            <summary>
            Bering Standard  -1100
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.BST">
            <summary>
            Bering Standard  -0300
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.BT">
            <summary>
            Baghdad  +0300
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.BZT2">
            <summary>
            Brazil Zone 2  -0300
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.CADT">
            <summary>
            Central Australian Daylight  +1030
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.CAST">
            <summary>
            Central Australian Standard  +0930
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.CAT">
            <summary>
            Central Alaska  -1000
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.CCT">
            <summary>
            China Coast  +0800
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.CDT">
            <summary>
            (US) Central Daylight  -0500
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.CED">
            <summary>
            Central European Daylight  +0200
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.CET">
            <summary>
            Central European  +0100
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.CST">
            <summary>
            (US) Central Standard -0600
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.CENTRAL">
            <summary>
            (US) Central Standard -0600
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.EAST">
            <summary>
            Eastern Australian Standard +1000
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.EDT">
            <summary>
            (US) Eastern Daylight -0400
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.EED">
            <summary>
            Eastern European Daylight +0300
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.EET">
            <summary>
            Eastern Europe +0200
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.EEST">
            <summary>
            Eastern Europe Summer +0300
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.EST">
            <summary>
            (US) Eastern Standard -0500
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeZones.EASTERN">
            <summary>
            (US) Eastern Standard -0500
            </summary>
        </member>
        <member name="T:Howell.Time.ISO8601TimeZone">
            <summary>
            ISO8601时区
            </summary>
        </member>
        <member name="M:Howell.Time.ISO8601TimeZone.#ctor(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="ts"></param>
        </member>
        <member name="M:Howell.Time.ISO8601TimeZone.ToString">
            <summary>
            转换为字符串 默认格式+0800
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="T:Howell.Time.ISO8601TimeFormats">
            <summary>
            ISO8601 时间格式
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeFormats.BasicShortLocalTime">
            <summary>
            基本短本地时间格式 2315
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeFormats.ExtendedShortLocalTime">
            <summary>
            扩展短本地时间格式 23:15
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeFormats.BasicLocalTime">
            <summary>
            基本本地时间格式 231520
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeFormats.ExtendedLocalTime">
            <summary>
            扩展本地时间格式 23:15:20   
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeFormats.BasicUTCTime">
            <summary>
            基本UTC时间格式 231520Z
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeFormats.ExtendedUTCTime">
            <summary>
            扩展UTC时间格式 23:15:20Z   
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeFormats.BasicLocalTimeAndZoneHour">
            <summary>
            基本本地时间加时区格式 231520+08
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeFormats.ExtendedLocalTimeAndZoneHour">
            <summary>
            扩展本地时间加时区格式 23:15:20+08
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeFormats.BasicLocalTimeAndZone">
            <summary>
            基本本地时间加时区格式 231520+0800
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601TimeFormats.ExtendedLocalTimeAndZone">
            <summary>
            扩展本地时间加时区格式 23:15:20+08:00
            </summary>
        </member>
        <member name="T:Howell.Time.ISO8601Time">
            <summary>
            ISO8601 标准的时间
            </summary>
            <remarks>
            ISO8601 规范中一天的时间范围是00:00:00 - 24:00:00 
            但是DateTime 不支持24:00:00这种时间，所以请转换为23:59:59
            </remarks>
        </member>
        <member name="M:Howell.Time.ISO8601Time.#ctor(System.DateTime)">
            <summary>
            创建ISO8601Time对象
            </summary>
            <param name="datetime">日期和时间数据</param>
        </member>
        <member name="M:Howell.Time.ISO8601Time.#ctor(System.DateTime,Howell.Time.ISO8601TimeFormats)">
            <summary>
            创建ISO8601Time对象
            </summary>
            <param name="datetime">日期和时间数据</param>
            <param name="format">格式化方式</param>
        </member>
        <member name="M:Howell.Time.ISO8601Time.#ctor(System.DateTime,Howell.Time.ISO8601TimeFormats,System.TimeSpan)">
            <summary>
            创建ISO8601Time对象
            </summary>
            <param name="datetime">日期和时间数据</param>
            <param name="format">格式化方式</param>
            <param name="timeZone">时差</param>
        </member>
        <member name="M:Howell.Time.ISO8601Time.Parse(System.String)">
            <summary>
            解析时间字符串
            </summary>
            <param name="s">时间字符串</param>
            <returns>返回ISO8601Time实例</returns>
        </member>
        <member name="M:Howell.Time.ISO8601Time.TryParse(System.String,Howell.Time.ISO8601Time@)">
            <summary>
            尝试解析日期字符串
            </summary>
            <param name="s">时间字符串</param>
            <param name="time">输出ISO8601Time实例</param>
            <returns>解析成功返回true,失败返回false.</returns>
        </member>
        <member name="M:Howell.Time.ISO8601Time.ToString">
            <summary>
            转换为ISO8601规范的日期字符串 默认格式hhmmss
            </summary>
            <returns>返回ISO8601规范的时间字符串</returns>
        </member>
        <member name="M:Howell.Time.ISO8601Time.UtcToLocal(System.DateTime,System.TimeSpan)">
            <summary>
            把UTC时间转回当前时间
            </summary>
            <param name="datetime">UTC时间的数据</param>
            <param name="timeZone">时区值</param>
            <returns></returns>
        </member>
        <member name="M:Howell.Time.ISO8601Time.LocalToUtc(System.DateTime,Howell.Time.ISO8601TimeFormats,System.TimeSpan)">
            <summary>
            按照时区值把标准时间转成TUC时间
            </summary>
            <param name="datetime">日期和时期值</param>
            <param name="format">当前转换的格式，检查是否需要转换</param>
            <param name="timeZone">时区值</param>
            <returns></returns>
        </member>
        <member name="P:Howell.Time.ISO8601Time.Value">
            <summary>
            时间数值
            </summary>
        </member>
        <member name="P:Howell.Time.ISO8601Time.Format">
            <summary>
            时间的格式
            </summary>
        </member>
        <member name="P:Howell.Time.ISO8601Time.TimeZone">
            <summary>
            区域时差
            </summary>
        </member>
        <member name="T:Howell.Threading.WrappedTimer">
            <summary>
            基于线程时钟的包装类（主要用于解决线程时钟的释放问题）
            </summary>
        </member>
        <member name="M:Howell.Threading.WrappedTimer.#ctor(System.Threading.TimerCallback)">
            <summary>
            使用新创建的 System.Threading.Timer 对象作为状态对象，用一个无限周期和一个无限到期时间初始化 System.Threading.Timer类的新实例。
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Howell.Threading.WrappedTimer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
            <summary>
            使用 32 位的有符号整数指定时间间隔，初始化 Timer 类的新实例。
            </summary>
            <param name="callback">一个 System.Threading.TimerCallback 委托，表示要执行的方法。</param>
            <param name="state">一个包含回调方法要使用的信息的对象，或者为 null。</param>
            <param name="dueTime">调用 callback 之前延迟的时间量（以毫秒为单位）。指定 System.Threading.Timeout.Infinite 可防止启动计时器。指定零(0) 可立即启动计时器。</param>
            <param name="period">调用 callback 的时间间隔（以毫秒为单位）。指定 System.Threading.Timeout.Infinite 可以禁用定期终止。</param>
        </member>
        <member name="M:Howell.Threading.WrappedTimer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
            <summary>
            初始化 Timer 类的新实例
            </summary>
            <param name="callback">一个 System.Threading.TimerCallback 委托，表示要执行的方法。</param>
            <param name="state">一个包含回调方法要使用的信息的对象，或者为 null。</param>
            <param name="dueTime">调用 callback 之前延迟的时间量（以毫秒为单位）。指定 System.Threading.Timeout.Infinite 可防止启动计时器。指定零(0) 可立即启动计时器。</param>
            <param name="period">调用 callback 的时间间隔（以毫秒为单位）。指定 System.Threading.Timeout.Infinite 可以禁用定期终止。</param>
        </member>
        <member name="M:Howell.Threading.WrappedTimer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            初始化 Timer 类的新实例，使用 System.TimeSpan 值来度量时间间隔。
            </summary>
            <param name="callback">一个 System.Threading.TimerCallback 委托，表示要执行的方法。</param>
            <param name="state">一个包含回调方法要使用的信息的对象，或者为 null。</param>
            <param name="dueTime">System.TimeSpan，表示在 callback 参数调用它的方法之前延迟的时间量。指定 -1 毫秒以防止启动计时器。指定零 (0) 可立即启动计时器。</param>
            <param name="period">在调用 callback 所引用的方法之间的时间间隔。指定 -1 毫秒可以禁用定期终止。</param>
        </member>
        <member name="M:Howell.Threading.WrappedTimer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
            <summary>
            用 32 位无符号整数来度量时间间隔，以初始化 Timer 类的新实例。
            </summary>
            <param name="callback"> 一个 System.Threading.TimerCallback 委托，表示要执行的方法。</param>
            <param name="state">一个包含回调方法要使用的信息的对象，或者为 null。</param>
            <param name="dueTime">调用 callback 之前延迟的时间量（以毫秒为单位）。指定 System.Threading.Timeout.Infinite 可防止启动计时器。指定零(0) 可立即启动计时器。</param>
            <param name="period">调用 callback 的时间间隔（以毫秒为单位）。指定 System.Threading.Timeout.Infinite 可以禁用定期终止。</param>
        </member>
        <member name="M:Howell.Threading.WrappedTimer.Change(System.Int32,System.Int32)">
            <summary>
            更改计时器的启动时间和方法调用之间的间隔，用 32 位有符号整数度量时间间隔。
            </summary>
            <param name="dueTime">在调用构造 System.Threading.Timer 时指定的回调方法之前的延迟时间量（以毫秒为单位）。指定 System.Threading.Timeout.Infinite可防止重新启动计时器。指定零 (0) 可立即重新启动计时器。</param>
            <param name="period">调用构造 System.Threading.Timer 时指定的回调方法的时间间隔（以毫秒为单位）。指定 System.Threading.Timeout.Infinite可以禁用定期终止。</param>
            <returns>如果尚未释放当前实例，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Howell.Threading.WrappedTimer.Change(System.Int64,System.Int64)">
            <summary>
            更改计时器的启动时间和方法调用之间的间隔，用 64 位有符号整数度量时间间隔。
            </summary>
            <param name="dueTime">在调用构造 System.Threading.Timer 时指定的回调方法之前的延迟时间量（以毫秒为单位）。指定 System.Threading.Timeout.Infinite可防止重新启动计时器。指定零 (0) 可立即重新启动计时器。</param>
            <param name="period">调用构造 System.Threading.Timer 时指定的回调方法的时间间隔（以毫秒为单位）。指定 System.Threading.Timeout.Infinite可以禁用定期终止。</param>
            <returns>如果尚未释放当前实例，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Howell.Threading.WrappedTimer.Change(System.TimeSpan,System.TimeSpan)">
            <summary>
            更改计时器的启动时间和方法调用之间的时间间隔，使用 System.TimeSpan 值度量时间间隔。
            </summary>
            <param name="dueTime">一个 System.TimeSpan，表示在调用构造 System.Threading.Timer 时指定的回调方法之前的延迟时间量。指定负 -1毫秒以防止计时器重新启动。指定零 (0) 可立即重新启动计时器。</param>
            <param name="period">在构造 System.Threading.Timer 时指定的回调方法调用之间的时间间隔。指定 -1 毫秒可以禁用定期终止。</param>
            <returns>如果尚未释放当前实例，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Howell.Threading.WrappedTimer.Change(System.UInt32,System.UInt32)">
            <summary>
            更改计时器的启动时间和方法调用之间的间隔，用 32 位无符号整数度量时间间隔。
            </summary>
            <param name="dueTime">在调用构造 System.Threading.Timer 时指定的回调方法之前的延迟时间量（以毫秒为单位）。指定 System.Threading.Timeout.Infinite可防止重新启动计时器。指定零 (0) 可立即重新启动计时器。</param>
            <param name="period">调用构造 System.Threading.Timer 时指定的回调方法的时间间隔（以毫秒为单位）。指定 System.Threading.Timeout.Infinite可以禁用定期终止。</param>
            <returns>如果尚未释放当前实例，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Howell.Threading.WrappedTimer.Dispose">
            <summary>
            释放由 System.Threading.Timer 的当前实例使用的所有资源。
            </summary>
        </member>
        <member name="M:Howell.Threading.WrappedTimer.Dispose(System.Threading.WaitHandle)">
            <summary>
            释放 System.Threading.Timer 的当前实例使用的所有资源并在释放完计时器时发出信号。
            </summary>
            <param name="notifyObject">释放完 Timer 时要发出其信号的 System.Threading.WaitHandle。</param>
            <returns>如果函数成功，则为 true；否则为 false。</returns>
        </member>
        <member name="T:Howell.Interops.Win32Interop">
            <summary>
            Win32 Interops
            </summary>
        </member>
        <member name="M:Howell.Interops.Win32Interop.GetProcAddress(System.IntPtr,System.String)">
            <summary>
            Retrieves the address of an exported function or variable from the specified dynamic-link library (DLL).
            </summary>
            <param name="hModule">A handle to the DLL module that contains the function or variable.</param>
            <param name="lpProcName">he function or variable name, or the function's ordinal value. If this parameter is an ordinal value, it must be in the low-order word; the high-order word must be zero.</param>
            <returns>If the function succeeds, the return value is the address of the exported function or variable. If the function fails, the return value is NULL. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:Howell.Interops.Win32Interop.FreeLibrary(System.IntPtr)">
            <summary>
            Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count. When the reference count reaches zero, the module is unloaded from the address space of the calling process and the handle is no longer valid.
            </summary>
            <param name="hModule">A handle to the loaded library module.</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call the GetLastError function.</returns>
        </member>
        <member name="M:Howell.Interops.Win32Interop.LoadLibrary(System.String)">
            <summary>
            Loads the specified module into the address space of the calling process. The specified module may cause other modules to be loaded.
            </summary>
            <param name="lpFileName">The name of the module. This can be either a library module (a .dll file) or an executable module (an .exe file). The name specified is the file name of the module and is not related to the name stored in the library module itself, as specified by the LIBRARY keyword in the module-definition (.def) file. If the string specifies a full path, the function searches only that path for the module. If the string specifies a relative path or a module name without a path, the function uses a standard search strategy to find the module; for more information, see the Remarks. If the function cannot find the module, the function fails. When specifying a path, be sure to use backslashes (\), not forward slashes (/). For more information about paths, see Naming a File or Directory. If the string specifies a module name without a path and the file name extension is omitted, the function appends the default library extension .dll to the module name. To prevent the function from appending .dll to the module name, include a trailing point character (.) in the module name string.</param>
            <returns>If the function succeeds, the return value is a handle to the module. If the function fails, the return value is NULL. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:Howell.Interops.Win32Interop.CreateFileMapping(System.IntPtr,System.IntPtr,Howell.Interops.Win32Interop.PageAccess,System.Int32,System.Int32,System.String)">
            <summary>
            Creates or opens a named or unnamed file mapping object for a specified file.
            </summary>
            <param name="hFile">A handle to the file from which to create a file mapping object.</param>
            <param name="lpAttributes">A pointer to a SECURITY_ATTRIBUTES structure that determines whether a returned handle can be inherited by child processes. The lpSecurityDescriptor member of the SECURITY_ATTRIBUTES structure specifies a security descriptor for a new file mapping object.</param>
            <param name="flProtect">Specifies the page protection of the file mapping object. All mapped views of the object must be compatible with this protection.</param>
            <param name="dwMaximumSizeLow">The high-order DWORD of the maximum size of the file mapping object.</param>
            <param name="dwMaximumSizeHigh">The low-order DWORD of the maximum size of the file mapping object.</param>
            <param name="lpName">The name of the file mapping object.</param>
            <returns>The value is a handle to the newly created file mapping object.</returns>
        </member>
        <member name="M:Howell.Interops.Win32Interop.MapViewOfFile(System.IntPtr,Howell.Interops.Win32Interop.FileMapAccess,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Maps a view of a file mapping into the address space of a calling process.
            </summary>
            <param name="hFileMappingObject">A handle to a file mapping object. The CreateFileMapping and OpenFileMapping functions return this handle.</param>
            <param name="dwDesiredAccess">The type of access to a file mapping object, which determines the protection of the pages. This parameter can be one of the following values.</param>
            <param name="dwFileOffsetHigh">A high-order DWORD of the file offset where the view begins.</param>
            <param name="dwFileOffsetLow">A low-order DWORD of the file offset where the view is to begin. The combination of the high and low offsets must specify an offset within the file mapping.</param>
            <param name="dwNumberOfBytesToMap">The number of bytes of a file mapping to map to the view. All bytes must be within the maximum size specified by CreateFileMapping. If this parameter is 0 (zero), the mapping extends from the specified offset to the end of the file mapping.</param>
            <returns>The value is the starting address of the mapped view.</returns>
        </member>
        <member name="M:Howell.Interops.Win32Interop.UnmapViewOfFile(System.IntPtr)">
            <summary>
            Unmaps a mapped view of a file from the calling process's address space.
            </summary>
            <param name="lpBaseAddress">A pointer to the base address of the mapped view of a file that is to be unmapped. This value must be identical to the value returned by a previous call to the MapViewOfFile or MapViewOfFileEx function.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Howell.Interops.Win32Interop.CloseHandle(System.IntPtr)">
            <summary>
            Closes an open object handle.
            </summary>
            <param name="handle">A valid handle to an open object.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="T:Howell.Interops.Win32Interop.PageAccess">
            <summary>
            Protection desired for the file view, when the file is mapped. 
            </summary>
        </member>
        <member name="F:Howell.Interops.Win32Interop.PageAccess.NoAccess">
            <remarks/>
        </member>
        <member name="F:Howell.Interops.Win32Interop.PageAccess.ReadOnly">
            <remarks/>
        </member>
        <member name="F:Howell.Interops.Win32Interop.PageAccess.ReadWrite">
            <remarks/>
        </member>
        <member name="F:Howell.Interops.Win32Interop.PageAccess.WriteCopy">
            <remarks/>
        </member>
        <member name="F:Howell.Interops.Win32Interop.PageAccess.Execute">
            <remarks/>
        </member>
        <member name="F:Howell.Interops.Win32Interop.PageAccess.ExecuteRead">
            <remarks/>
        </member>
        <member name="F:Howell.Interops.Win32Interop.PageAccess.ExecuteReadWrite">
            <remarks/>
        </member>
        <member name="F:Howell.Interops.Win32Interop.PageAccess.ExecuteWriteCopy">
            <remarks/>
        </member>
        <member name="F:Howell.Interops.Win32Interop.PageAccess.Guard">
            <remarks/>
        </member>
        <member name="F:Howell.Interops.Win32Interop.PageAccess.NoCache">
            <remarks/>
        </member>
        <member name="F:Howell.Interops.Win32Interop.PageAccess.WriteCombine">
            <remarks/>
        </member>
        <member name="T:Howell.Interops.Win32Interop.FileMapAccess">
            <summary>
            Type of access to the file view and, therefore, the protection of the pages mapped by the file.
            </summary>
        </member>
        <member name="F:Howell.Interops.Win32Interop.FileMapAccess.Write">
            <remarks/>
        </member>
        <member name="F:Howell.Interops.Win32Interop.FileMapAccess.Read">
            <remarks/>
        </member>
        <member name="F:Howell.Interops.Win32Interop.FileMapAccess.AllAccess">
            <remarks/>
        </member>
        <member name="F:Howell.Interops.Win32Interop.FileMapAccess.Copy">
            <remarks/>
        </member>
        <member name="F:Howell.Interops.Win32Interop.FileMapAccess.Execute">
            <remarks/>
        </member>
        <member name="T:Howell.Drawing.D2.RectangleD">
            <summary>
            矩形
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.RectangleD.RegularExpressionString">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.RectangleD.Empty">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleD.#ctor(Howell.Drawing.D2.PointD,Howell.Drawing.D2.SizeD)">
            <summary>
            Constructor
            </summary>
            <param name="location">位置</param>
            <param name="size">大小</param>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x">左上角顶点X</param>
            <param name="y">左上角顶点Y</param>
            <param name="width">宽</param>
            <param name="height">高</param>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleD.Parse(System.String)">
            <summary>
            解析矩形的字符串形式
            </summary>
            <param name="value">字符串</param>
            <returns>如果解析成功，返回RectangleD类型，否则将抛出异常</returns>
            <exception cref="T:System.FormatException">非法的字符串格式。</exception>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleD.ToString">
            <summary>
            获取矩形的字符串形式
            </summary>
            <returns>返回字符串形式</returns>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleD.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:Howell.Drawing.D2.RectangleD"/> equal to the specified one.
            </summary>
            <param name="obj">Another point to check equalty to.</param>
            <returns>Return <see langword="true"/> if objects are equal.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleD.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            <returns>Returns the hash code for this instance.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleD.op_Equality(Howell.Drawing.D2.RectangleD,Howell.Drawing.D2.RectangleD)">
            <summary>
            equals operator - checks if two rect is the same.
            </summary>
            <param name="r1">RectangleD object 1.</param>
            <param name="r2">RectangleD object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleD.op_Inequality(Howell.Drawing.D2.RectangleD,Howell.Drawing.D2.RectangleD)">
            <summary>
            equals operator - checks if two rect is not the same.
            </summary>
            <param name="r1">Rectangle2D object 1.</param>
            <param name="r2">Rectangle2D object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleD.op_Explicit(Howell.Drawing.D2.RectangleD)~Howell.Drawing.D2.RectangleI">
            <summary>
            隐式转换RectangleD To RectangleI
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleD.op_Explicit(Howell.Drawing.D2.RectangleD)~System.Drawing.RectangleF">
            <summary>
            隐式转换RectangleD To RectangleF
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleD.GetVertexs">
            <summary>
            获取顶点
            </summary>
            <returns>返回顶点</returns>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleD.Equals(Howell.Drawing.D2.RectangleD)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleD.GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.RectangleD.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="P:Howell.Drawing.D2.RectangleD.Left">
            <summary>
            左上X值
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.RectangleD.Top">
            <summary>
            左上Y值
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.RectangleD.Right">
            <summary>
            右下X值
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.RectangleD.Bottom">
            <summary>
            右下Y值
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.RectangleD.Width">
            <summary>
            宽度
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.RectangleD.Height">
            <summary>
            高度
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.RectangleD.X">
            <summary>
            左上角X轴坐标
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.RectangleD.Y">
            <summary>
            左上角Y轴坐标
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.RectangleD.Size">
            <summary>
            矩形大小
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.RectangleD.Location">
            <summary>
            矩形位置
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.RectangleD.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="T:Howell.Math.Algorithm.RectangleAlgorithm">
            <summary>
            矩形计算
            </summary>
        </member>
        <member name="M:Howell.Math.Algorithm.RectangleAlgorithm.InRectangle(Howell.Drawing.D2.RectangleD,Howell.Drawing.D2.PointD)">
            <summary>
            点是否在区域内
            </summary>
            <param name="Rect">矩形区域</param>
            <param name="P">点P</param>
            <returns>
            返回True表示点P在区域内，返回False则不在区域内.
            </returns>
        </member>
        <member name="M:Howell.Math.Algorithm.RectangleAlgorithm.InRectangle(Howell.Drawing.D2.RectangleI,Howell.Drawing.D2.PointI)">
            <summary>
            点是否在区域内
            </summary>
            <param name="Rect">矩形区域</param>
            <param name="P">点P</param>
            <returns>
            返回True表示点P在区域内，返回False则不在区域内.
            </returns>
        </member>
        <member name="M:Howell.Math.Algorithm.RectangleAlgorithm.InRectangle(Howell.Drawing.D2.RectangleD,Howell.Drawing.D2.LineD)">
            <summary>
            线是否在区域内
            </summary>
            <param name="Rect">矩形区域</param>
            <param name="L">线L</param>
            <returns>
            返回True表示线L在区域内，返回False则不在区域内.
            </returns>
        </member>
        <member name="M:Howell.Math.Algorithm.RectangleAlgorithm.InRectangle(Howell.Drawing.D2.RectangleI,Howell.Drawing.D2.LineI)">
            <summary>
            线是否在区域内
            </summary>
            <param name="Rect">矩形区域</param>
            <param name="L">线L</param>
            <returns>
            返回True表示线L在区域内，返回False则不在区域内.
            </returns>
        </member>
        <member name="M:Howell.Math.Algorithm.RectangleAlgorithm.InRectangle(Howell.Drawing.D2.RectangleD,Howell.Drawing.D2.PolylineD)">
            <summary>
            折线是否在区域内
            </summary>
            <param name="Rect">矩形区域</param>
            <param name="PL">折线PL</param>
            <returns>
            返回True表示折线PL在区域内，返回False则不在区域内.
            </returns>
        </member>
        <member name="M:Howell.Math.Algorithm.RectangleAlgorithm.InRectangle(Howell.Drawing.D2.RectangleI,Howell.Drawing.D2.PolylineI)">
            <summary>
            折线是否在区域内
            </summary>
            <param name="Rect">矩形区域</param>
            <param name="PL">折线PL</param>
            <returns>
            返回True表示折线PL在区域内，返回False则不在区域内.
            </returns>
        </member>
        <member name="M:Howell.Math.Algorithm.RectangleAlgorithm.InRectangle(Howell.Drawing.D2.RectangleD,Howell.Drawing.D2.RectangleD)">
            <summary>
            矩形R是否在区域内
            </summary>
            <param name="Rect">矩形区域</param>
            <param name="R">矩形R</param>
            <returns>
            返回True表示矩形R在区域内，返回False则不在区域内.
            </returns>
        </member>
        <member name="M:Howell.Math.Algorithm.RectangleAlgorithm.InRectangle(Howell.Drawing.D2.RectangleI,Howell.Drawing.D2.RectangleI)">
            <summary>
            矩形R是否在区域内
            </summary>
            <param name="Rect">矩形区域</param>
            <param name="R">矩形R</param>
            <returns>
            返回True表示矩形R在区域内，返回False则不在区域内.
            </returns>
        </member>
        <member name="M:Howell.Math.Algorithm.RectangleAlgorithm.InRectangle(Howell.Drawing.D2.RectangleD,Howell.Drawing.D2.PolygonD)">
            <summary>
            多边形是否在区域内
            </summary>
            <param name="Rect">矩形区域</param>
            <param name="PL">多边形PL</param>
            <returns>
            返回True表示多边形PL在区域内，返回False则不在区域内.
            </returns>
        </member>
        <member name="M:Howell.Math.Algorithm.RectangleAlgorithm.InRectangle(Howell.Drawing.D2.RectangleI,Howell.Drawing.D2.PolygonI)">
            <summary>
            多边形是否在区域内
            </summary>
            <param name="Rect">矩形区域</param>
            <param name="PL">多边形PL</param>
            <returns>
            返回True表示多边形PL在区域内，返回False则不在区域内.
            </returns>
        </member>
        <member name="M:Howell.Math.Algorithm.RectangleAlgorithm.InRectangle(Howell.Drawing.D2.RectangleD,Howell.Drawing.D2.CircleD)">
            <summary>
            圆形是否在矩形内
            </summary>
            <param name="R">矩形R</param>
            <param name="C">圆形C</param>
            <returns> 返回True表示圆形C在区域内，返回False则不在区域内.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.RectangleAlgorithm.InRectangle(Howell.Drawing.D2.RectangleI,Howell.Drawing.D2.CircleI)">
            <summary>
            圆形是否在矩形内
            </summary>
            <param name="R">矩形R</param>
            <param name="C">圆形C</param>
            <returns> 返回True表示圆形C在区域内，返回False则不在区域内.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.RectangleAlgorithm.HasIntersection(Howell.Drawing.D2.RectangleD,Howell.Drawing.D2.RectangleD)">
            <summary>
            判断R1与R2是否有交集
            </summary>
            <param name="R1">矩形R1</param>
            <param name="R2">矩形R2</param>
            <returns>如果有交集返回True,否则返回False。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.RectangleAlgorithm.HasIntersection(Howell.Drawing.D2.RectangleI,Howell.Drawing.D2.RectangleI)">
            <summary>
            判断R1与R2是否有交集
            </summary>
            <param name="R1">矩形R1</param>
            <param name="R2">矩形R2</param>
            <returns>如果有交集返回True,否则返回False。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.RectangleAlgorithm.Intersection(Howell.Drawing.D2.RectangleD,Howell.Drawing.D2.RectangleD)">
            <summary>
            计算矩形交集的面积值
            </summary>
            <param name="R1">Rectangle 1</param>
            <param name="R2">Rectangle 2</param>
            <returns>
            返回交集的矩形。
            </returns>
        </member>
        <member name="M:Howell.Math.Algorithm.RectangleAlgorithm.Intersection(Howell.Drawing.D2.RectangleI,Howell.Drawing.D2.RectangleI)">
            <summary>
            计算矩形交集的面积值
            </summary>
            <param name="R1">Rectangle 1</param>
            <param name="R2">Rectangle 2</param>
            <returns>
            返回交集的矩形。
            </returns>
        </member>
        <member name="M:Howell.Math.Algorithm.RectangleAlgorithm.Area(Howell.Drawing.D2.RectangleI)">
            <summary>
            计算矩形面积
            </summary>
            <param name="R">矩形R</param>
            <returns>返回面积。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.RectangleAlgorithm.Area(Howell.Drawing.D2.RectangleD)">
            <summary>
            计算矩形面积
            </summary>
            <param name="R">矩形R</param>
            <returns>返回面积。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.RectangleAlgorithm.Offset(Howell.Drawing.D2.RectangleD,Howell.Drawing.D2.PointD)">
            <summary>
            计算偏移后的矩形
            </summary>
            <param name="R">矩形R</param>
            <param name="velocity">偏移速度</param>
            <returns>返回偏移后的矩形</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.RectangleAlgorithm.Offset(Howell.Drawing.D2.RectangleI,Howell.Drawing.D2.PointI)">
            <summary>
            计算偏移后的矩形
            </summary>
            <param name="R">矩形R</param>
            <param name="velocity">偏移速度</param>
            <returns>返回偏移后的矩形</returns>
        </member>
        <member name="T:Howell.Conditions.RequiresValidator`1">
            <summary>
            The RequiresValidator can be used for precondition checks.
            </summary>
            <typeparam name="T">The type of the argument to be validated</typeparam>
        </member>
        <member name="T:Howell.Conditions.ConditionValidator`1">
             <summary>
             Enables validation of pre- and postconditions. This class isn't used directly by developers. Instead 
             the class should be created by the <see cref="M:Howell.Conditions.Condition.Requires``1(``0)">Requires</see> and
             <see cref="M:Howell.Conditions.Condition.Ensures``1(``0)">Ensures</see> extension methods.
             </summary>
             <typeparam name="T">The type of the argument to be validated</typeparam>
             <example>
             The following example shows how to use <b>Howell.Conditions</b>.
             <code><![CDATA[
             using System.Collections;
             
             using Howell.Conditions;
             
             public class ExampleClass
             {
                 private enum StateType { Uninitialized = 0, Initialized };
                 
                 private StateType currentState;
             
                 public ICollection GetData(int? id, string xml, IEnumerable col)
                 {
                     // Check all preconditions:
                     Condition.Requires(id, "id")
                         .IsNotNull()          // throws ArgumentNullException on failure
                         .IsInRange(1, 999)    // ArgumentOutOfRangeException on failure
                         .IsNotEqualTo(128);   // throws ArgumentException on failure
             
                     Condition.Requires(xml, "xml")
                         .StartsWith("<data>") // throws ArgumentException on failure
                         .EndsWith("</data>"); // throws ArgumentException on failure
             
                     Condition.Requires(col, "col")
                         .IsNotNull()          // throws ArgumentNullException on failure
                         .IsEmpty();           // throws ArgumentException on failure
             
                     // Do some work
             
                     // Example: Call a method that should return a not null ICollection
                     object result = BuildResults(xml, col);
             
                     // Check all postconditions:
                     // A PostconditionException will be thrown at failure.
                     Condition.Ensures(result, "result")
                         .IsNotNull()
                         .IsOfType(typeof(ICollection));
             
                     return result as ICollection;
                 }
             }
             ]]></code>
             The following code examples shows how to extend the library with your own 'Invariant' entry point
             method. The first example shows a class with an Add method that validates the class state (the
             class invariants) before adding the <b>Person</b> object to the internal array and that code should
             throw an <see cref="T:System.InvalidOperationException"/>.
             <code><![CDATA[
             using Howell.Conditions;
             
             public class Person { }
             
             public class PersonCollection 
             {
                 public PersonCollection(int capicity)
                 {
                     this.Capacity = capicity;
                 }
             
                 public void Add(Person person)
                 {
                     // Throws a ArgumentNullException when person == null
                     Condition.Requires(person, "person").IsNotNull();
                     
                     // Throws an InvalidOperationException on failure
                     Invariants.Invariant(this.Count, "Count").IsLessOrEqual(this.Capacity);
                     
                     this.AddInternal(person);
                 }
            
                 public int Count { get; private set; }
                 public int Capacity { get; private set; }
                 
                 private void AddInternal(Person person)
                 {
                     // some logic here
                 }
                 
                 public bool Contains(Person person)
                 {
                     // some logic here
                     return false;
                 }
             }
             ]]></code>
             The following code example will show the implementation of the <b>Invariants</b> class.
             <code><![CDATA[
             using System;
             using Howell.Conditions;
             
             namespace MyCompanyRootNamespace
             {
                 public static class Invariants
                 {
                     public static ConditionValidator<T> Invariant<T>(T value)
                     {
                         return new InvariantValidator<T>("value", value);
                     }
             
                     public static ConditionValidator<T> Invariant<T>(T value, string argumentName)
                     {
                         return new InvariantValidator<T>(argumentName, value);
                     }
             
                     // Internal class that inherits from ConditionValidator<T>
                     sealed class InvariantValidator<T> : ConditionValidator<T>
                     {
                         public InvariantValidator(string argumentName, T value)
                             : base(argumentName, value)
                         {
                         }
             
                         protected override void ThrowExceptionCore(string condition,
                             string additionalMessage, ConstraintViolationType type)
                         {
                             string exceptionMessage = string.Format("Invariant '{0}' failed.", condition);
             
                             if (!String.IsNullOrEmpty(additionalMessage))
                             {
                                 exceptionMessage += " " + additionalMessage;
                             }
             
                             // Optionally, the 'type' parameter can be used, but never throw an exception
                             // when the value of 'type' is unknown or unvalid.
                             throw new InvalidOperationException(exceptionMessage);
                         }
                     }
                 }
             }
             ]]></code>
             </example>
        </member>
        <member name="F:Howell.Conditions.ConditionValidator`1.Value">
            <summary>Gets the value of the argument.</summary>
        </member>
        <member name="M:Howell.Conditions.ConditionValidator`1.#ctor(System.String,`0)">
            <summary>Initializes a new instance of the <see cref="T:Howell.Conditions.ConditionValidator`1"/> class.</summary>
            <param name="argumentName">The name of the argument to be validated</param>
            <param name="value">The value of the argument to be validated</param>
        </member>
        <member name="M:Howell.Conditions.ConditionValidator`1.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">The System.Object to compare with the current System.Object.</param>
            <returns>
            true if the specified System.Object is equal to the current System.Object; otherwise, false.
            </returns>
        </member>
        <member name="M:Howell.Conditions.ConditionValidator`1.GetHashCode">
            <summary>Returns the hash code of the current instance.</summary>
            <returns>The hash code of the current instance.</returns>
        </member>
        <member name="M:Howell.Conditions.ConditionValidator`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Howell.Conditions.ConditionValidator`1"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the <see cref="T:Howell.Conditions.ConditionValidator`1"/>.
            </returns>
        </member>
        <member name="M:Howell.Conditions.ConditionValidator`1.GetType">
            <summary>Gets the <see cref="T:System.Type"/> of the current instance.</summary>
            <returns>The <see cref="T:System.Type"/> instance that represents the exact runtime 
            type of the current instance.</returns>
        </member>
        <member name="M:Howell.Conditions.ConditionValidator`1.ThrowException(System.String,System.String,Howell.Conditions.ConstraintViolationType)">
            <summary>Throws an exception.</summary>
            <param name="condition">Describes the condition that doesn't hold, e.g., "Value should not be 
            null".</param>
            <param name="additionalMessage">An additional message that will be appended to the exception
            message, e.g. "The actual value is 3.". This value may be null or empty.</param>
            <param name="type">Gives extra information on the exception type that must be build. The actual
            implementation of the validator may ignore some or all values.</param>
        </member>
        <member name="M:Howell.Conditions.ConditionValidator`1.ThrowException(System.String)">
            <summary>Throws an exception.</summary>
            <param name="condition">Describes the condition that doesn't hold, e.g., "Value should not be 
            null".</param>
        </member>
        <member name="M:Howell.Conditions.ConditionValidator`1.ThrowExceptionCore(System.String,System.String,Howell.Conditions.ConstraintViolationType)">
            <summary>Throws an exception.</summary>
            <param name="condition">Describes the condition that doesn't hold, e.g., "Value should not be 
            null".</param>
            <param name="additionalMessage">An additional message that will be appended to the exception
            message, e.g. "The actual value is 3.". This value may be null or empty.</param>
            <param name="type">Gives extra information on the exception type that must be build. The actual
            implementation of the validator may ignore some or all values.</param>
            <remarks>
            Implement this method when deriving from <see cref="T:Howell.Conditions.ConditionValidator`1"/>.
            The implementation should at least build the exception message from the 
            <paramref name="condition"/> and optional <paramref name="additionalMessage"/>. Usage of the
            <paramref name="type"/> is completely optional, but the implementation should at least be flexible
            and be able to handle unknown <see cref="T:Howell.Conditions.ConstraintViolationType"/> values. Values may be added
            in future releases.
            </remarks>
            <example>
            For an example see the documentation for <see cref="T:Howell.Conditions.ConditionValidator`1"/>.
            </example>
        </member>
        <member name="P:Howell.Conditions.ConditionValidator`1.ArgumentName">
            <summary>Gets the name of the argument.</summary>
        </member>
        <member name="M:Howell.Conditions.RequiresValidator`1.ThrowExceptionCore(System.String,System.String,Howell.Conditions.ConstraintViolationType)">
            <summary>Throws an exception.</summary>
            <param name="condition">Describes the condition that doesn't hold, e.g., "Value should not be
            null".</param>
            <param name="additionalMessage">An additional message that will be appended to the exception
            message, e.g. "The actual value is 3.". This value may be null or empty.</param>
            <param name="type">Gives extra information on the exception type that must be build. The actual
            implementation of the validator may ignore some or all values.</param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncFunctionEventBased`2">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 TResult 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncFunctionEventBased`2.#ctor(System.Func{System.Object,System.Func{System.Object,System.Boolean},`1})">
            <summary>
            构造事件模型的异步操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--TResult 函数名(Object taskId,Func<Object, Boolean,TResult> isCancelled);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncFunctionEventBased`2.Async(System.Object)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncFunctionEventBased`3">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 TResult 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="TResult"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncFunctionEventBased`3.#ctor(System.Func{System.Object,System.Func{System.Object,System.Boolean},`1,`2})">
            <summary>
            构造事件模型的异步操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--TResult 函数名(Object taskId,Func<Object, Boolean,TResult> isCancelled);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncFunctionEventBased`3.Async(System.Object,`1)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
            <param name="arg"></param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncFunctionEventBased`4">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 TResult 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="TResult"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncFunctionEventBased`4.#ctor(System.Func{System.Object,System.Func{System.Object,System.Boolean},`1,`2,`3})">
            <summary>
            构造事件模型的异步操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--TResult 函数名(Object taskId,Func<Object, Boolean,TResult> isCancelled);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncFunctionEventBased`4.Async(System.Object,`1,`2)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncFunctionEventBased`5">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 TResult 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="TResult"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncFunctionEventBased`5.#ctor(System.Func{System.Object,System.Func{System.Object,System.Boolean},`1,`2,`3,`4})">
            <summary>
            构造事件模型的异步操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--TResult 函数名(Object taskId,Func<Object, Boolean,TResult> isCancelled);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncFunctionEventBased`5.Async(System.Object,`1,`2,`3)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncFunctionEventBased`6">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 TResult 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="TResult"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncFunctionEventBased`6.#ctor(System.Func{System.Object,System.Func{System.Object,System.Boolean},`1,`2,`3,`4,`5})">
            <summary>
            构造事件模型的异步操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--TResult 函数名(Object taskId,Func<Object, Boolean,TResult> isCancelled);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncFunctionEventBased`6.Async(System.Object,`1,`2,`3,`4)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
        </member>
        <member name="T:Howell.Capability.Int64Cap">
            <summary>
            Integer 能力
            </summary>
        </member>
        <member name="M:Howell.Capability.Int64Cap.op_Implicit(Howell.Capability.Int64Cap)~System.Int64">
            <summary>
            隐式转换
            </summary>
            <param name="val">转换对象</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Howell.Capability.Int64Cap.op_Explicit(System.Int64)~Howell.Capability.Int64Cap">
            <summary>
            显式转换
            </summary>
            <param name="val">转换对象</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Howell.Capability.Int64Cap.#ctor">
            <summary>
            创建 IntegerCap对象
            </summary>
        </member>
        <member name="M:Howell.Capability.Int64Cap.#ctor(System.Int64)">
            <summary>
            创建 IntegerCap对象
            </summary>
            <param name="val">数值</param>
        </member>
        <member name="M:Howell.Capability.Int64Cap.#ctor(System.Int64,System.Nullable{System.Int64})">
            <summary>
            创建 IntegerCap对象
            </summary>
            <param name="val">数值</param>
            <param name="def"></param>
        </member>
        <member name="M:Howell.Capability.Int64Cap.#ctor(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            创建 IntegerCap对象
            </summary>
            <param name="val"></param>
            <param name="def"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Howell.Capability.Int64Cap.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns>返回字符串。</returns>
        </member>
        <member name="P:Howell.Capability.Int64Cap.Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="P:Howell.Capability.Int64Cap.TextSpecified">
            <summary>
            是否包含Text XML属性
            </summary>
        </member>
        <member name="P:Howell.Capability.Int64Cap.Text">
            <summary>
            文本内容
            </summary>
        </member>
        <member name="T:Howell.UserPermission">
            <summary>
            用户权限信息
            </summary>
        </member>
        <member name="F:Howell.UserPermission.Anonymous">
            <summary>
            匿名用户，只有获取数据信息的权限
            </summary>
        </member>
        <member name="F:Howell.UserPermission.Operator">
            <summary>
            操作者用户，来宾用户权限加上系统设置
            </summary>
        </member>
        <member name="F:Howell.UserPermission.Administrator">
            <summary>
            管理员权限，所有权限
            </summary>
        </member>
        <member name="F:Howell.UserPermission.Extended">
            <summary>
            扩展用户权限，具体权限参见扩展内容信息
            </summary>
        </member>
        <member name="T:Howell.UserPermissions">
            <summary>
            用户详细权限信息
            </summary>
        </member>
        <member name="F:Howell.UserPermissions.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Howell.UserPermissions.Information">
            <summary>
            系统信息
            </summary>
        </member>
        <member name="F:Howell.UserPermissions.System">
            <summary>
            系统设置
            </summary>
        </member>
        <member name="F:Howell.UserPermissions.User">
            <summary>
            用户管理控制
            </summary>
        </member>
        <member name="F:Howell.UserPermissions.Device">
            <summary>
            修改添加设备信息权限
            </summary>
        </member>
        <member name="F:Howell.UserPermissions.All">
            <summary>
            全功能
            </summary>
        </member>
        <member name="T:Howell.Numeric.ThresholdNumber`1">
            <summary>
            阀值数
            </summary>
            <typeparam name="T">阀值的类型</typeparam>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumber`1.#ctor(`0)">
            <summary>
            构造函数
            </summary>
            <param name="maxValue">作为阀值的数值, 用于指定数值的最大值</param>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumber`1.#ctor(`0,`0,`0)">
            <summary>
            构造函数
            </summary>
            <param name="maxValue">作为阀值的数值, 用于指定数值的最大值</param>
            <param name="minValue">作为阀值的数值, 用于指定数值的最小值</param>
            <param name="initialValue">初始值</param>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumber`1.Reset">
            <summary>
            重置初始值
            </summary>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumber`1.Exchange(`0)">
            <summary>
            将当前数值设置为指定的值并返回原始值。
            </summary>
            <param name="value">指定的新数值。</param>
            <returns>返回原始值。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">ThresholdNumber is out of range.</exception>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumber`1.TryExchange(`0,`0@)">
            <summary>
            尝试将当前数值设置为指定的值并输出原始值。
            </summary>
            <param name="value">新的数值</param>
            <param name="oldValue">原始值</param>
            <returns>如果尝试成功则返回true，否则返回false。</returns>
        </member>
        <member name="P:Howell.Numeric.ThresholdNumber`1.MaxValue">
            <summary>
            作为阀值的数值, 用于指定数值的最大值
            </summary>
        </member>
        <member name="P:Howell.Numeric.ThresholdNumber`1.MinValue">
            <summary>
            作为阀值的数值, 用于指定数值的最小值
            </summary>
        </member>
        <member name="P:Howell.Numeric.ThresholdNumber`1.Value">
            <summary>
            当前数值
            </summary>
        </member>
        <member name="T:Howell.Numeric.ThresholdNumberExtensions">
            <summary>
            ThresholdNumber泛型扩展方法
            </summary>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Increment(Howell.Numeric.ThresholdNumber{System.Int64})">
            <summary>
             增量数值，如果成功返回增量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <returns>返回增量后的数值</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">ThresholdNumber is out of range.</exception>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Increment(Howell.Numeric.ThresholdNumber{System.UInt64})">
            <summary>
             增量数值，如果成功返回增量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <returns>返回增量后的数值</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">ThresholdNumber is out of range.</exception>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Increment(Howell.Numeric.ThresholdNumber{System.Int32})">
            <summary>
             增量数值，如果成功返回增量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <returns>返回增量后的数值</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">ThresholdNumber is out of range.</exception>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Increment(Howell.Numeric.ThresholdNumber{System.UInt32})">
            <summary>
             增量数值，如果成功返回增量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <returns>返回增量后的数值</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">ThresholdNumber is out of range.</exception>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Increment(Howell.Numeric.ThresholdNumber{System.Int16})">
            <summary>
             增量数值，如果成功返回增量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <returns>返回增量后的数值</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">ThresholdNumber is out of range.</exception>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Increment(Howell.Numeric.ThresholdNumber{System.UInt16})">
            <summary>
             增量数值，如果成功返回增量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <returns>返回增量后的数值</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">ThresholdNumber is out of range.</exception>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Increment(Howell.Numeric.ThresholdNumber{System.Byte})">
            <summary>
             增量数值，如果成功返回增量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <returns>返回增量后的数值</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">ThresholdNumber is out of range.</exception>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Increment(Howell.Numeric.ThresholdNumber{System.Double})">
            <summary>
            增量数值，如果成功返回增量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <returns>返回增量后的数值</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">ThresholdNumber is out of range.</exception>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Increment(Howell.Numeric.ThresholdNumber{System.Single})">
            <summary>
            增量数值，如果成功返回增量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <returns>返回增量后的数值</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">ThresholdNumber is out of range.</exception>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryIncrement(Howell.Numeric.ThresholdNumber{System.Int64},System.Int64@)">
            <summary>
             尝试增量数值，如果成功输出增量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">输出增量后的数值</param>
            <returns>返回成功则返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryIncrement(Howell.Numeric.ThresholdNumber{System.UInt64},System.UInt64@)">
            <summary>
             尝试增量数值，如果成功输出增量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">输出增量后的数值</param>
            <returns>返回成功则返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryIncrement(Howell.Numeric.ThresholdNumber{System.Int32},System.Int32@)">
            <summary>
             尝试增量数值，如果成功输出增量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">输出增量后的数值</param>
            <returns>返回成功则返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryIncrement(Howell.Numeric.ThresholdNumber{System.UInt32},System.UInt32@)">
            <summary>
             尝试增量数值，如果成功输出增量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">输出增量后的数值</param>
            <returns>返回成功则返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryIncrement(Howell.Numeric.ThresholdNumber{System.Int16},System.Int16@)">
            <summary>
             尝试增量数值，如果成功输出增量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">输出增量后的数值</param>
            <returns>返回成功则返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryIncrement(Howell.Numeric.ThresholdNumber{System.UInt16},System.UInt16@)">
            <summary>
             尝试增量数值，如果成功输出增量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">输出增量后的数值</param>
            <returns>返回成功则返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryIncrement(Howell.Numeric.ThresholdNumber{System.Byte},System.Byte@)">
            <summary>
             尝试增量数值，如果成功输出增量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">输出增量后的数值</param>
            <returns>返回成功则返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryIncrement(Howell.Numeric.ThresholdNumber{System.Double},System.Double@)">
            <summary>
             尝试增量数值，如果成功输出增量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">输出增量后的数值</param>
            <returns>返回成功则返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryIncrement(Howell.Numeric.ThresholdNumber{System.Single},System.Single@)">
            <summary>
             尝试增量数值，如果成功输出增量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">输出增量后的数值</param>
            <returns>返回成功则返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Decrement(Howell.Numeric.ThresholdNumber{System.Int64})">
            <summary>
             减量数值，如果成功返回减量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <returns>返回减量后的数值</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">ThresholdNumber is out of range.</exception>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Decrement(Howell.Numeric.ThresholdNumber{System.UInt64})">
            <summary>
             减量数值，如果成功返回减量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <returns>返回减量后的数值</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">ThresholdNumber is out of range.</exception>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Decrement(Howell.Numeric.ThresholdNumber{System.Int32})">
            <summary>
             减量数值，如果成功返回减量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <returns>返回减量后的数值</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">ThresholdNumber is out of range.</exception>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Decrement(Howell.Numeric.ThresholdNumber{System.UInt32})">
            <summary>
             减量数值，如果成功返回减量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <returns>返回减量后的数值</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">ThresholdNumber is out of range.</exception>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Decrement(Howell.Numeric.ThresholdNumber{System.Int16})">
            <summary>
             减量数值，如果成功返回减量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <returns>返回减量后的数值</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">ThresholdNumber is out of range.</exception>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Decrement(Howell.Numeric.ThresholdNumber{System.UInt16})">
            <summary>
             减量数值，如果成功返回减量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <returns>返回减量后的数值</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">ThresholdNumber is out of range.</exception>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Decrement(Howell.Numeric.ThresholdNumber{System.Byte})">
            <summary>
             减量数值，如果成功返回减量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <returns>返回减量后的数值</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">ThresholdNumber is out of range.</exception>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Decrement(Howell.Numeric.ThresholdNumber{System.Double})">
            <summary>
            减量数值，如果成功返回减量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <returns>返回减量后的数值</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">ThresholdNumber is out of range.</exception>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Decrement(Howell.Numeric.ThresholdNumber{System.Single})">
            <summary>
            减量数值，如果成功返回减量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <returns>返回减量后的数值</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">ThresholdNumber is out of range.</exception>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryDecrement(Howell.Numeric.ThresholdNumber{System.Int64},System.Int64@)">
            <summary>
             尝试减量数值，如果成功输出减量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">输出减量后的数值</param>
            <returns>返回成功则返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryDecrement(Howell.Numeric.ThresholdNumber{System.UInt64},System.UInt64@)">
            <summary>
             尝试减量数值，如果成功输出减量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">输出减量后的数值</param>
            <returns>返回成功则返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryDecrement(Howell.Numeric.ThresholdNumber{System.Int32},System.Int32@)">
            <summary>
             尝试减量数值，如果成功输出减量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">输出减量后的数值</param>
            <returns>返回成功则返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryDecrement(Howell.Numeric.ThresholdNumber{System.UInt32},System.UInt32@)">
            <summary>
             尝试减量数值，如果成功输出减量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">输出减量后的数值</param>
            <returns>返回成功则返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryDecrement(Howell.Numeric.ThresholdNumber{System.Int16},System.Int16@)">
            <summary>
             尝试减量数值，如果成功输出减量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">输出减量后的数值</param>
            <returns>返回成功则返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryDecrement(Howell.Numeric.ThresholdNumber{System.UInt16},System.UInt16@)">
            <summary>
             尝试减量数值，如果成功输出减量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">输出减量后的数值</param>
            <returns>返回成功则返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryDecrement(Howell.Numeric.ThresholdNumber{System.Byte},System.Byte@)">
            <summary>
             尝试减量数值，如果成功输出减量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">输出减量后的数值</param>
            <returns>返回成功则返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryDecrement(Howell.Numeric.ThresholdNumber{System.Double},System.Double@)">
            <summary>
             尝试减量数值，如果成功输出减量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">输出减量后的数值</param>
            <returns>返回成功则返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryDecrement(Howell.Numeric.ThresholdNumber{System.Single},System.Single@)">
            <summary>
             尝试减量数值，如果成功输出减量后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">输出减量后的数值</param>
            <returns>返回成功则返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Add(Howell.Numeric.ThresholdNumber{System.Int64},System.Int64)">
            <summary>
            加值，如果成功返回计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要增加的差量数值。</param>
            <returns>返回计算后的新数值。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Add(Howell.Numeric.ThresholdNumber{System.UInt64},System.UInt64)">
            <summary>
            加值，如果成功返回计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要增加的差量数值。</param>
            <returns>返回计算后的新数值。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Add(Howell.Numeric.ThresholdNumber{System.Int32},System.Int32)">
            <summary>
            加值，如果成功返回计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要增加的差量数值。</param>
            <returns>返回计算后的新数值。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Add(Howell.Numeric.ThresholdNumber{System.UInt32},System.UInt32)">
            <summary>
            加值，如果成功返回计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要增加的差量数值。</param>
            <returns>返回计算后的新数值。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Add(Howell.Numeric.ThresholdNumber{System.Int16},System.Int16)">
            <summary>
            加值，如果成功返回计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要增加的差量数值。</param>
            <returns>返回计算后的新数值。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Add(Howell.Numeric.ThresholdNumber{System.UInt16},System.UInt16)">
            <summary>
            加值，如果成功返回计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要增加的差量数值。</param>
            <returns>返回计算后的新数值。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Add(Howell.Numeric.ThresholdNumber{System.Byte},System.Byte)">
            <summary>
            加值，如果成功返回计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要增加的差量数值。</param>
            <returns>返回计算后的新数值。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Add(Howell.Numeric.ThresholdNumber{System.Double},System.Double)">
            <summary>
            加值，如果成功返回计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要增加的差量数值。</param>
            <returns>返回计算后的新数值。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Add(Howell.Numeric.ThresholdNumber{System.Single},System.Single)">
            <summary>
            加值，如果成功返回计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要增加的差量数值。</param>
            <returns>返回计算后的新数值。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryAdd(Howell.Numeric.ThresholdNumber{System.Int64},System.Int64,System.Int64@)">
            <summary>
            加值，如果成功输出计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要增加的差量数值。</param>
            <param name="newValue">输出增加后的数值。</param>
            <returns>如果成功返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryAdd(Howell.Numeric.ThresholdNumber{System.UInt64},System.UInt64,System.UInt64@)">
            <summary>
            加值，如果成功输出计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要增加的差量数值。</param>
            <param name="newValue">输出增加后的数值。</param>
            <returns>如果成功返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryAdd(Howell.Numeric.ThresholdNumber{System.Int32},System.Int32,System.Int32@)">
            <summary>
            加值，如果成功输出计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要增加的差量数值。</param>
            <param name="newValue">输出增加后的数值。</param>
            <returns>如果成功返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryAdd(Howell.Numeric.ThresholdNumber{System.UInt32},System.UInt32,System.UInt32@)">
            <summary>
            加值，如果成功输出计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要增加的差量数值。</param>
            <param name="newValue">输出增加后的数值。</param>
            <returns>如果成功返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryAdd(Howell.Numeric.ThresholdNumber{System.Int16},System.Int16,System.Int16@)">
            <summary>
            加值，如果成功输出计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要增加的差量数值。</param>
            <param name="newValue">输出增加后的数值。</param>
            <returns>如果成功返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryAdd(Howell.Numeric.ThresholdNumber{System.UInt16},System.UInt16,System.UInt16@)">
            <summary>
            加值，如果成功输出计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要增加的差量数值。</param>
            <param name="newValue">输出增加后的数值。</param>
            <returns>如果成功返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryAdd(Howell.Numeric.ThresholdNumber{System.Byte},System.Byte,System.Byte@)">
            <summary>
            加值，如果成功输出计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要增加的差量数值。</param>
            <param name="newValue">输出增加后的数值。</param>
            <returns>如果成功返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryAdd(Howell.Numeric.ThresholdNumber{System.Double},System.Double,System.Double@)">
            <summary>
            加值，如果成功输出计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要增加的差量数值。</param>
            <param name="newValue">输出增加后的数值。</param>
            <returns>如果成功返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TryAdd(Howell.Numeric.ThresholdNumber{System.Single},System.Single,System.Single@)">
            <summary>
            加值，如果成功输出计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要增加的差量数值。</param>
            <param name="newValue">输出增加后的数值。</param>
            <returns>如果成功返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Subtract(Howell.Numeric.ThresholdNumber{System.Int64},System.Int64)">
            <summary>
            减值，如果成功返回计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要减的差量数值。</param>
            <returns>返回计算后的新数值。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Subtract(Howell.Numeric.ThresholdNumber{System.UInt64},System.UInt64)">
            <summary>
            减值，如果成功返回计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要减的差量数值。</param>
            <returns>返回计算后的新数值。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Subtract(Howell.Numeric.ThresholdNumber{System.Int32},System.Int32)">
            <summary>
            减值，如果成功返回计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要减的差量数值。</param>
            <returns>返回计算后的新数值。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Subtract(Howell.Numeric.ThresholdNumber{System.UInt32},System.UInt32)">
            <summary>
            减值，如果成功返回计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要减的差量数值。</param>
            <returns>返回计算后的新数值。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Subtract(Howell.Numeric.ThresholdNumber{System.Int16},System.Int16)">
            <summary>
            减值，如果成功返回计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要减的差量数值。</param>
            <returns>返回计算后的新数值。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Subtract(Howell.Numeric.ThresholdNumber{System.UInt16},System.UInt16)">
            <summary>
            减值，如果成功返回计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要减的差量数值。</param>
            <returns>返回计算后的新数值。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Subtract(Howell.Numeric.ThresholdNumber{System.Byte},System.Byte)">
            <summary>
            减值，如果成功返回计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要减的差量数值。</param>
            <returns>返回计算后的新数值。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Subtract(Howell.Numeric.ThresholdNumber{System.Double},System.Double)">
            <summary>
            减值，如果成功返回计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要减的差量数值。</param>
            <returns>返回计算后的新数值。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.Subtract(Howell.Numeric.ThresholdNumber{System.Single},System.Single)">
            <summary>
            减值，如果成功返回计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要减的差量数值。</param>
            <returns>返回计算后的新数值。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TrySubtract(Howell.Numeric.ThresholdNumber{System.Int64},System.Int64,System.Int64@)">
            <summary>
            减值，如果成功输出计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要减的差量数值。</param>
            <param name="newValue">输出减后的数值。</param>
            <returns>如果成功返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TrySubtract(Howell.Numeric.ThresholdNumber{System.UInt64},System.UInt64,System.UInt64@)">
            <summary>
            减值，如果成功输出计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要减的差量数值。</param>
            <param name="newValue">输出减后的数值。</param>
            <returns>如果成功返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TrySubtract(Howell.Numeric.ThresholdNumber{System.Int32},System.Int32,System.Int32@)">
            <summary>
            减值，如果成功输出计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要减的差量数值。</param>
            <param name="newValue">输出减后的数值。</param>
            <returns>如果成功返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TrySubtract(Howell.Numeric.ThresholdNumber{System.UInt32},System.UInt32,System.UInt32@)">
            <summary>
            减值，如果成功输出计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要减的差量数值。</param>
            <param name="newValue">输出减后的数值。</param>
            <returns>如果成功返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TrySubtract(Howell.Numeric.ThresholdNumber{System.Int16},System.Int16,System.Int16@)">
            <summary>
            减值，如果成功输出计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要减的差量数值。</param>
            <param name="newValue">输出减后的数值。</param>
            <returns>如果成功返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TrySubtract(Howell.Numeric.ThresholdNumber{System.UInt16},System.UInt16,System.UInt16@)">
            <summary>
            减值，如果成功输出计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要减的差量数值。</param>
            <param name="newValue">输出减后的数值。</param>
            <returns>如果成功返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TrySubtract(Howell.Numeric.ThresholdNumber{System.Byte},System.Byte,System.Byte@)">
            <summary>
            减值，如果成功输出计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要减的差量数值。</param>
            <param name="newValue">输出减后的数值。</param>
            <returns>如果成功返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TrySubtract(Howell.Numeric.ThresholdNumber{System.Double},System.Double,System.Double@)">
            <summary>
            减值，如果成功输出计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要减的差量数值。</param>
            <param name="newValue">输出减后的数值。</param>
            <returns>如果成功返回true，否则返回false。</returns>
        </member>
        <member name="M:Howell.Numeric.ThresholdNumberExtensions.TrySubtract(Howell.Numeric.ThresholdNumber{System.Single},System.Single,System.Single@)">
            <summary>
            减值，如果成功输出计算后的数值
            </summary>
            <param name="number">ThresholdNumber对象</param>
            <param name="value">要减的差量数值。</param>
            <param name="newValue">输出减后的数值。</param>
            <returns>如果成功返回true，否则返回false。</returns>
        </member>
        <member name="T:Howell.Schedules.PlanTime">
            <summary>
            计划时间, 注意PlanTime不等同于DateTime不可以直接来比较大小，必须转换为DateTime以后才可以。
            </summary>
        </member>
        <member name="M:Howell.Schedules.PlanTime.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            创建日重复的PlanTime对象
            </summary>
            <param name="hour">时</param>
            <param name="minute">分</param>
            <param name="second">秒</param>
        </member>
        <member name="M:Howell.Schedules.PlanTime.#ctor(System.Int32,System.Int32,System.Int32,System.DayOfWeek)">
            <summary>
            创建周重复的PlanTime对象
            </summary>
            <param name="hour">时</param>
            <param name="minute">分</param>
            <param name="second">秒</param>
            <param name="dayOfWeek">星期几</param>
        </member>
        <member name="M:Howell.Schedules.PlanTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            创建一次性的PlanTime对象
            </summary>
            <param name="year">年</param>
            <param name="month">月</param>
            <param name="day">日</param>
            <param name="hour">时</param>
            <param name="minute">分</param>
            <param name="second">秒</param>
        </member>
        <member name="M:Howell.Schedules.PlanTime.#ctor(System.DateTime)">
            <summary>
            创建一次性的PlanTime对象
            </summary>
            <param name="time">一次性计划的触发时间</param>
        </member>
        <member name="M:Howell.Schedules.PlanTime.#ctor(Howell.Schedules.PlanTime)">
            <summary>
            拷贝构造
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Howell.Schedules.PlanTime.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.Nullable{System.DayOfWeek})">
            <summary>
            内部构造函数 
            </summary>
            <param name="year">年</param>
            <param name="month">月</param>
            <param name="day">日</param>
            <param name="hour">时</param>
            <param name="minute">分</param>
            <param name="second">秒</param>
            <param name="dayOfWeek">星期几</param>
        </member>
        <member name="M:Howell.Schedules.PlanTime.ToDateTime(System.DateTime)">
            <summary>
            根据参照时间寻找计划的触发时间
            </summary>
            <param name="referenceTime">参照时间</param>
            <returns>返回触发时间</returns>
        </member>
        <member name="M:Howell.Schedules.PlanTime.ToDateTime">
            <summary>
            将PlanTime转换为DateTime。
            注意DateTime的值会以当前系统时间作为参照变更为当前最合适的时间
            </summary>
            <returns>返回DateTime对象</returns>        
        </member>
        <member name="M:Howell.Schedules.PlanTime.GetNextTime">
            <summary>
            获取根据当前计划时间所计算出来的下一次触发时间
            </summary>
            <returns>如果有下一次的触发时间则返回该值，否则将返回DateTime.MaxValue</returns>
        </member>
        <member name="M:Howell.Schedules.PlanTime.ToString">
            <summary>
            继承自System.Object 将PlanTime转换为时间字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.Schedules.PlanTime.Equals(System.Object)">
            <summary>
            Equals
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Schedules.PlanTime.GetHashCode">
            <summary>
            GetHashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.Schedules.PlanTime.Parse(System.String)">
            <summary>
            根据字符串解析PlanTime对象
            </summary>
            <param name="planTimeString">PlanTime的字符串</param>
            <returns>返回PlanTime对象。</returns>
        </member>
        <member name="M:Howell.Schedules.PlanTime.TryParse(System.String,Howell.Schedules.PlanTime@)">
            <summary>
            尝试根据字符串解析PlanTime对象
            </summary>
            <param name="planTimeString">PlanTime的字符串</param>
            <param name="planTime">如果成功则输出PlanTime对象</param>
            <returns>如果解析成功则返回true,否则返回false.</returns>
        </member>
        <member name="M:Howell.Schedules.PlanTime.op_Equality(Howell.Schedules.PlanTime,Howell.Schedules.PlanTime)">
            <summary>
            ==操作符重载
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Schedules.PlanTime.op_Inequality(Howell.Schedules.PlanTime,Howell.Schedules.PlanTime)">
            <summary>
            !=操作符重载
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Schedules.PlanTime.GetSchema">
            <summary>
            此方法是保留方法，请不要使用。在实现 IXmlSerializable 接口时，应从此方法返回 null（在 Visual Basic 中为 Nothing），如果需要指定自定义架构，应向该
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.Schedules.PlanTime.ReadXml(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Howell.Schedules.PlanTime.WriteXml(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Howell.Schedules.PlanTime.Equals(Howell.Schedules.PlanTime)">
            <summary>
            Equals
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Schedules.PlanTime.CopyFrom(Howell.Schedules.PlanTime)">
            <summary>
            将PlanTime对象的值拷贝到当前的PlanTime对象中
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Howell.Schedules.PlanTime.IsInRange(Howell.Schedules.PlanTime,Howell.Schedules.PlanTime)">
            <summary>
            判断计划时间是否处于某个时间段内
            </summary>
            <param name="beginTime">开始时间</param>
            <param name="endTime">结束时间</param>
            <returns>如果处于某个时间段内返回true,否则返回false。</returns>
        </member>
        <member name="M:Howell.Schedules.PlanTime.IsInRange(Howell.Schedules.PlanTime,Howell.Schedules.PlanTime,Howell.Numeric.Intervals)">
            <summary>
            判断计划时间是否处于某个时间段内
            </summary>
            <param name="beginTime">开始时间</param>
            <param name="endTime">结束时间</param>
            <param name="intervals">取值区间值</param>
            <returns>如果处于某个时间段内返回true,否则返回false。</returns>
        </member>
        <member name="P:Howell.Schedules.PlanTime.Year">
            <summary>
            年
            </summary>
        </member>
        <member name="P:Howell.Schedules.PlanTime.Month">
            <summary>
            月
            </summary>
        </member>
        <member name="P:Howell.Schedules.PlanTime.Day">
            <summary>
            日
            </summary>
        </member>
        <member name="P:Howell.Schedules.PlanTime.DayOfWeek">
            <summary>
            星期几
            </summary>
        </member>
        <member name="P:Howell.Schedules.PlanTime.Hour">
            <summary>
            时
            </summary>
        </member>
        <member name="P:Howell.Schedules.PlanTime.Minute">
            <summary>
            分
            </summary>
        </member>
        <member name="P:Howell.Schedules.PlanTime.Second">
            <summary>
            秒
            </summary>
        </member>
        <member name="P:Howell.Schedules.PlanTime.Type">
            <summary>
            计划类型，分别为OneOff,Weekly,Daily
            </summary>
        </member>
        <member name="T:Howell.OS.TimeZone">
            <summary>
            系统时区
            </summary>
        </member>
        <member name="M:Howell.OS.TimeZone.GetTimeZones">
            <summary>
            Get all time zone informations
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.OS.TimeZone.GetTimeZone(System.String,System.String@)">
            <summary>
            Get the Time zone by display name 
            </summary>
            <param name="displayName">part of display name</param>
            <param name="wholeDisplayName">whole display name</param>
            <returns>time zone</returns>
        </member>
        <member name="M:Howell.OS.TimeZone.GetCurrentTimeZone">
            <summary>
            Get current time zone
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.OS.TimeZone.GetCurrentTimeZoneDisplayName">
            <summary>
            Get current time zone display name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.OS.TimeZone.SetTimeZone(Howell.OS.TimeZone.TimeZoneInformation)">
            <summary>
            Set time zone
            </summary>
            <param name="tzi"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.OS.TimeZone.SetTimeZone(System.String,System.String@)">
            <summary>
            set time zone by display name
            </summary>
            <param name="displayName">part of display name</param>
            <param name="wholeDisplayName">whole display name</param>
            <returns></returns>
        </member>
        <member name="T:Howell.OS.TimeZone.SYSTEMTIME">
            <summary>
            系统时间
            </summary>
        </member>
        <member name="F:Howell.OS.TimeZone.SYSTEMTIME.wYear">
            <summary>
            年
            </summary>
        </member>
        <member name="F:Howell.OS.TimeZone.SYSTEMTIME.wMonth">
            <summary>
            月
            </summary>
        </member>
        <member name="F:Howell.OS.TimeZone.SYSTEMTIME.wDayOfWeek">
            <summary>
            星期几
            </summary>
        </member>
        <member name="F:Howell.OS.TimeZone.SYSTEMTIME.wDay">
            <summary>
            天
            </summary>
        </member>
        <member name="F:Howell.OS.TimeZone.SYSTEMTIME.wHour">
            <summary>
            时
            </summary>
        </member>
        <member name="F:Howell.OS.TimeZone.SYSTEMTIME.wMinute">
            <summary>
            分
            </summary>
        </member>
        <member name="F:Howell.OS.TimeZone.SYSTEMTIME.wSecond">
            <summary>
            秒
            </summary>
        </member>
        <member name="F:Howell.OS.TimeZone.SYSTEMTIME.wMilliseconds">
            <summary>
            毫秒
            </summary>
        </member>
        <member name="M:Howell.OS.TimeZone.SYSTEMTIME.#ctor(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="buf"></param>
            <param name="index"></param>
        </member>
        <member name="T:Howell.OS.TimeZone.TimeZoneInformation">
            <summary>
            时区信息
            </summary>
        </member>
        <member name="F:Howell.OS.TimeZone.TimeZoneInformation.bias">
            <summary>
            
            </summary>
        </member>
        <member name="F:Howell.OS.TimeZone.TimeZoneInformation.standardName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Howell.OS.TimeZone.TimeZoneInformation.standardDate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Howell.OS.TimeZone.TimeZoneInformation.standardBias">
            <summary>
            
            </summary>
        </member>
        <member name="F:Howell.OS.TimeZone.TimeZoneInformation.daylightName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Howell.OS.TimeZone.TimeZoneInformation.daylightDate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Howell.OS.TimeZone.TimeZoneInformation.daylightBias">
            <summary>
            
            </summary>
        </member>
        <member name="T:Howell.Interops.DayOfWeek">
            <summary>
            指定一周的某天。
            </summary>
        </member>
        <member name="F:Howell.Interops.DayOfWeek.Sunday">
            <summary>
            表示星期日。
            </summary>
        </member>
        <member name="F:Howell.Interops.DayOfWeek.Monday">
            <summary>
            表示星期一。
            </summary>
        </member>
        <member name="F:Howell.Interops.DayOfWeek.Tuesday">
            <summary>
            表示星期二。
            </summary>
        </member>
        <member name="F:Howell.Interops.DayOfWeek.Wednesday">
            <summary>
            表示星期三。
            </summary>
        </member>
        <member name="F:Howell.Interops.DayOfWeek.Thursday">
            <summary>
            表示星期四。
            </summary>
        </member>
        <member name="F:Howell.Interops.DayOfWeek.Friday">
            <summary>
            表示星期五。
            </summary>
        </member>
        <member name="F:Howell.Interops.DayOfWeek.Saturday">
            <summary>
            表示星期六。
            </summary>
        </member>
        <member name="T:Howell.Interops.SYSTEMTIME">
            <summary>
            系统时间
            </summary>
        </member>
        <member name="F:Howell.Interops.SYSTEMTIME.Year">
            <summary>
            年
            </summary>
        </member>
        <member name="F:Howell.Interops.SYSTEMTIME.Month">
            <summary>
            月
            </summary>
        </member>
        <member name="F:Howell.Interops.SYSTEMTIME.DayOfWeek">
            <summary>
            星期几
            </summary>
        </member>
        <member name="F:Howell.Interops.SYSTEMTIME.Day">
            <summary>
            日
            </summary>
        </member>
        <member name="F:Howell.Interops.SYSTEMTIME.Hour">
            <summary>
            时
            </summary>
        </member>
        <member name="F:Howell.Interops.SYSTEMTIME.Minute">
            <summary>
            分
            </summary>
        </member>
        <member name="F:Howell.Interops.SYSTEMTIME.Second">
            <summary>
            秒
            </summary>
        </member>
        <member name="F:Howell.Interops.SYSTEMTIME.Milliseconds">
            <summary>
            毫秒
            </summary>
        </member>
        <member name="T:Howell.Industry.VideoInterfaceType">
            <summary>
            视频接口类型
            </summary>    
        </member>
        <member name="F:Howell.Industry.VideoInterfaceType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Howell.Industry.VideoInterfaceType.BNC">
            <summary>
            同轴电缆接插件
            </summary>
        </member>
        <member name="F:Howell.Industry.VideoInterfaceType.HDMI">
            <summary>
            高清晰度多媒体接口 (High Definition Multimedia Interface)
            </summary>
        </member>
        <member name="F:Howell.Industry.VideoInterfaceType.VGA">
            <summary>
            视频图形阵列 (Video Graphics Array)
            </summary>
        </member>
        <member name="F:Howell.Industry.VideoInterfaceType.DVI">
            <summary>
            数字化视像接口 (Digital Visual Interface)
            </summary>
        </member>
        <member name="F:Howell.Industry.VideoInterfaceType.DisplayPort">
            <summary>
            高清数字显示接口 
            </summary>
        </member>
        <member name="F:Howell.Industry.VideoInterfaceType.Bus">
            <summary>
            数据总线
            </summary>
        </member>
        <member name="T:Howell.Industry.ChannelClassification">
            <summary>
            通道分类
            </summary>
        </member>
        <member name="F:Howell.Industry.ChannelClassification.None">
            <summary>
            非通道
            </summary>
        </member>
        <member name="F:Howell.Industry.ChannelClassification.VideoSource">
            <summary>
            音视频源
            </summary>
        </member>
        <member name="F:Howell.Industry.ChannelClassification.VideoCaptureInput">
            <summary>
            视频采集输入
            </summary>
        </member>
        <member name="F:Howell.Industry.ChannelClassification.VideoCaptureOutput">
            <summary>
            视频采集输出
            </summary>
        </member>
        <member name="F:Howell.Industry.ChannelClassification.VideoNetworkInput">
            <summary>
            视频网络输入
            </summary>
        </member>
        <member name="F:Howell.Industry.ChannelClassification.VideoNetworkOutput">
            <summary>
            视频网络输出
            </summary>
        </member>
        <member name="F:Howell.Industry.ChannelClassification.IODefenceZone">
            <summary>
            报警防区
            </summary>
        </member>
        <member name="F:Howell.Industry.ChannelClassification.IOInput">
            <summary>
            报警输入
            </summary>
        </member>
        <member name="F:Howell.Industry.ChannelClassification.IOOutput">
            <summary>
            报警输出
            </summary>
        </member>
        <member name="F:Howell.Industry.ChannelClassification.Decoding">
            <summary>
            解码
            </summary>
        </member>
        <member name="F:Howell.Industry.ChannelClassification.Storage">
            <summary>
            存储
            </summary>
        </member>
        <member name="F:Howell.Industry.ChannelClassification.VideoAnalytics">
            <summary>
            视频分析
            </summary>
        </member>
        <member name="F:Howell.Industry.ChannelClassification.NetworkInterface">
            <summary>
            网口
            </summary>
        </member>
        <member name="T:Howell.ComponentModel.AsyncProgressiveOperationEventBasedSkeleton`1">
            <summary>
            事件模型的异步步进操作实现类型 抽象类
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveOperationEventBasedSkeleton`1.#ctor">
            <summary>
            默认构造
            </summary>
        </member>
        <member name="T:Howell.ComponentModel.AsyncActionEventBased`1">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncActionEventBased`1.#ctor(System.Action{System.Object,System.Func{System.Object,System.Boolean}})">
            <summary>
            构造事件模型的异步操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncActionEventBased`1.Async(System.Object)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncActionEventBased`2">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncActionEventBased`2.#ctor(System.Action{System.Object,System.Func{System.Object,System.Boolean},`1})">
            <summary>
            构造事件模型的异步操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncActionEventBased`2.Async(System.Object,`1)">
            <summary>
            异步操作行为
            </summary>
            <param name="arg"></param>
            <param name="taskId"></param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncActionEventBased`3">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncActionEventBased`3.#ctor(System.Action{System.Object,System.Func{System.Object,System.Boolean},`1,`2})">
            <summary>
            构造事件模型的异步操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncActionEventBased`3.Async(System.Object,`1,`2)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncActionEventBased`4">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncActionEventBased`4.#ctor(System.Action{System.Object,System.Func{System.Object,System.Boolean},`1,`2,`3})">
            <summary>
            构造事件模型的异步操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncActionEventBased`4.Async(System.Object,`1,`2,`3)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncActionEventBased`5">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncActionEventBased`5.#ctor(System.Action{System.Object,System.Func{System.Object,System.Boolean},`1,`2,`3,`4})">
            <summary>
            构造事件模型的异步操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncActionEventBased`5.Async(System.Object,`1,`2,`3,`4)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
        </member>
        <member name="T:Howell.Capability.DateTimeCap">
            <summary>
            DateTime 能力
            </summary>
            <remarks>Format xs:datetime : 2004-05-03T17:30:08+08:00 </remarks>
        </member>
        <member name="M:Howell.Capability.DateTimeCap.op_Implicit(Howell.Capability.DateTimeCap)~System.DateTime">
            <summary>
            隐式转换
            </summary>
            <param name="val">转换对象</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Howell.Capability.DateTimeCap.op_Explicit(System.DateTime)~Howell.Capability.DateTimeCap">
            <summary>
            显式转换
            </summary>
            <param name="val">转换对象</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Howell.Capability.DateTimeCap.#ctor">
            <summary>
            创建 DateTimeCap对象
            </summary>
        </member>
        <member name="M:Howell.Capability.DateTimeCap.#ctor(System.DateTime)">
            <summary>
            创建 DateTimeCap对象
            </summary>
            <param name="val">数值</param>
        </member>
        <member name="M:Howell.Capability.DateTimeCap.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns>返回字符串。</returns>
        </member>
        <member name="P:Howell.Capability.DateTimeCap.Value">
            <summary>
            数值
            </summary>         
        </member>
        <member name="P:Howell.Capability.DateTimeCap.TextSpecified">
            <summary>
            是否包含Text XML属性
            </summary>
        </member>
        <member name="P:Howell.Capability.DateTimeCap.Text">
            <summary>
            文本内容
            </summary>
        </member>
        <member name="T:Howell.StringResource">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Howell.StringResource.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionContainsCurrently1Element">
            <summary>
              查找类似 {0} contains currently 1 element. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionContainsCurrentlyXElements">
            <summary>
              查找类似 {0} contains currently {1} elements. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionIsCurrentlyANullReference">
            <summary>
              查找类似 {0} is currently a null reference. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionShouldBeEmpty">
            <summary>
              查找类似 {0} should be empty 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionShouldContain1Element">
            <summary>
              查找类似 {0} should contain 1 element 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionShouldContainAllOfX">
            <summary>
              查找类似 {0} should contain all of {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionShouldContainAtLeastOneOfX">
            <summary>
              查找类似 {0} should contain at least one of {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionShouldContainLessThan1Element">
            <summary>
              查找类似 {0} should contain less than 1 element 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionShouldContainLessThanXElements">
            <summary>
              查找类似 {0} should contain less than {1} elements 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionShouldContainMoreThan1Element">
            <summary>
              查找类似 {0} should contain more than 1 element 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionShouldContainMoreThanXElements">
            <summary>
              查找类似 {0} should contain more than {1} elements 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionShouldContainX">
            <summary>
              查找类似 {0} should contain {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionShouldContainXElements">
            <summary>
              查找类似 {0} should contain {1} elements 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionShouldContainXOrLessElements">
            <summary>
              查找类似 {0} should contain {1} or less elements 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionShouldContainXOrMoreElements">
            <summary>
              查找类似 {0} should contain {1} or more elements 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionShouldNotBeEmpty">
            <summary>
              查找类似 {0} should not be empty 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionShouldNotContain1Element">
            <summary>
              查找类似 {0} should not contain 1 element 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionShouldNotContainAllOfX">
            <summary>
              查找类似 {0} should not contain all of {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionShouldNotContainAnyOfX">
            <summary>
              查找类似 {0} should not contain any of {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionShouldNotContainLessThan1Element">
            <summary>
              查找类似 {0} should not contain more than 1 element 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionShouldNotContainLessThanXElements">
            <summary>
              查找类似 {0} should not contain less than {1} elements 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionShouldNotContainMoreThan1Element">
            <summary>
              查找类似 {0} should not contain more than 1 element 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionShouldNotContainMoreThanXElements">
            <summary>
              查找类似 {0} should not contain more than {1} elements 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionShouldNotContainX">
            <summary>
              查找类似 {0} should not contain {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionShouldNotContainXElements">
            <summary>
              查找类似 {0} should not contain {1} elements 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionShouldNotContainXOrLessElements">
            <summary>
              查找类似 {0} should not contain {1} or less elements 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.CollectionShouldNotContainXOrMoreElements">
            <summary>
              查找类似 {0} should not contain {1} or more elements 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ExceptionTypeIsInvalid">
            <summary>
              查找类似 The specified type {0} is not supported. The type must be concrete and have a public constructor with a single string argument. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.LambdaXShouldHoldForValue">
            <summary>
              查找类似 &apos;{1}&apos; should hold for {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.PostconditionFailed">
            <summary>
              查找类似 Postcondition failed. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.PostconditionXFailed">
            <summary>
              查找类似 Postcondition &apos;{0}&apos; failed. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldBe1CharacterLong">
            <summary>
              查找类似 {0} should be 1 character long 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldBeEmpty">
            <summary>
              查找类似 {0} should be an empty string 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldBeLongerOrEqualTo1Character">
            <summary>
              查找类似 {0} should be longer or equal to 1 character 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldBeLongerOrEqualToXCharacters">
            <summary>
              查找类似 {0} should be longer or equal to {1} characters 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldBeLongerThan1Character">
            <summary>
              查找类似 {0} should be longer than 1 character 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldBeLongerThanXCharacters">
            <summary>
              查找类似 {0} should be longer than {1} characters 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldBeNullOrEmpty">
            <summary>
              查找类似 {0} should be null or an empty string 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldBeNullOrWhiteSpace">
            <summary>
              查找类似 {0} should be null, empty or consists only of white-space characters. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldBeShorterOrEqualTo1Character">
            <summary>
              查找类似 {0} should be shorter or equal to 1 character 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldBeShorterOrEqualToXCharacters">
            <summary>
              查找类似 {0} should be shorter or equal to {1} characters 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldBeShorterThan1Character">
            <summary>
              查找类似 {0} should be shorter than 1 character 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldBeShorterThanXCharacters">
            <summary>
              查找类似 {0} should be shorter than {1} characters 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldBeXCharactersLong">
            <summary>
              查找类似 {0} should be {1} characters long 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldContainX">
            <summary>
              查找类似 {0} should contain {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldEndWithX">
            <summary>
              查找类似 {0} should end with {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldMatchPatternX">
            <summary>
              查找类似 {0} should match pattern {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldNotBe1CharacterLong">
            <summary>
              查找类似 {0} should not be 1 character long 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldNotBeEmpty">
            <summary>
              查找类似 {0} should not be an empty string 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldNotBeNullOrEmpty">
            <summary>
              查找类似 {0} should not be null or an empty string 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldNotBeNullOrWhiteSpace">
            <summary>
              查找类似 {0} should not be null, and empty string or consists only of white-space characters. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldNotBeXCharactersLong">
            <summary>
              查找类似 {0} should not be {1} characters long 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldNotContainX">
            <summary>
              查找类似 {0} should not contain {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldNotEndWithX">
            <summary>
              查找类似 {0} should not end with {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldNotStartWithX">
            <summary>
              查找类似 {0} should not start with {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.StringShouldStartWithX">
            <summary>
              查找类似 {0} should start with {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.TheActualValueIs1CharacterLong">
            <summary>
              查找类似 The actual value is 1 character long. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.TheActualValueIsX">
            <summary>
              查找类似 The actual value is {1}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.TheActualValueIsXCharactersLong">
            <summary>
              查找类似 The actual value is {1} characters long. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldBeANumber">
            <summary>
              查找类似 {0} should be a number 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldBeBetweenXAndY">
            <summary>
              查找类似 {0} should be between {1} and {2} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldBeEqualToX">
            <summary>
              查找类似 {0} should be equal to {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldBeFalse">
            <summary>
              查找类似 {0} should be false 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldBeGreaterThanOrEqualToX">
            <summary>
              查找类似 {0} should be greater than or equal to {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldBeGreaterThanX">
            <summary>
              查找类似 {0} should be greater than {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldBeInfinity">
            <summary>
              查找类似 {0} should be infinity 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldBeNegativeInfinity">
            <summary>
              查找类似 {0} should be negative infinity 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldBeNull">
            <summary>
              查找类似 {0} should be null 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldBeOfTypeX">
            <summary>
              查找类似 {0} should be of type {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldBePositiveInfinity">
            <summary>
              查找类似 {0} should be positive infinity 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldBeSmallerThanOrEqualToX">
            <summary>
              查找类似 {0} should be smaller than or equal to {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldBeSmallerThanX">
            <summary>
              查找类似 {0} should be smaller than {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldBeTrue">
            <summary>
              查找类似 {0} should be true 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldBeUnequalToX">
            <summary>
              查找类似 {0} should be unequal to {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldBeValid">
            <summary>
              查找类似 {0} should be valid 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldNotBeANumber">
            <summary>
              查找类似 {0} should not be a number 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldNotBeBetweenXAndY">
            <summary>
              查找类似 {0} should not be between {1} and {2} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldNotBeGreaterThanOrEqualToX">
            <summary>
              查找类似 {0} should not be greater than or equal to {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldNotBeGreaterThanX">
            <summary>
              查找类似 {0} should not be greater than {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldNotBeInfinity">
            <summary>
              查找类似 {0} should not be infinity 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldNotBeNegativeInfinity">
            <summary>
              查找类似 {0} should not be negative infinity 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldNotBeNull">
            <summary>
              查找类似 {0} should not be null 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldNotBeOfTypeX">
            <summary>
              查找类似 {0} should not be of type {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldNotBePositiveInfinity">
            <summary>
              查找类似 {0} should not be positive infinity 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldNotBeSmallerThanOrEqualToX">
            <summary>
              查找类似 {0} should not be smaller than or equal to {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Howell.StringResource.ValueShouldNotBeSmallerThanX">
            <summary>
              查找类似 {0} should not be smaller than {1} 的本地化字符串。
            </summary>
        </member>
        <member name="T:Howell.Drawing.D2.PolylineD">
            <summary>
            折线
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.PolylineD.RegularExpressionString">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.PolylineD.Empty">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:Howell.Drawing.D2.PolylineD.#ctor(System.Collections.Generic.IList{Howell.Drawing.D2.PointD})">
            <summary>
            Constructor
            </summary>
            <param name="points">折线的拐点</param>        
        </member>
        <member name="M:Howell.Drawing.D2.PolylineD.#ctor(Howell.Drawing.D2.PointD[])">
            <summary>
            Constructor
            </summary>
            <param name="points">折线的拐点</param>        
        </member>
        <member name="M:Howell.Drawing.D2.PolylineD.Parse(System.String)">
            <summary>
            解析多线段的字符串形式
            </summary>
            <param name="value">字符串</param>
            <returns>如果解析成功，返回PolylineD类型，否则将抛出异常</returns>
            <exception cref="T:System.FormatException">非法的字符串格式。</exception>
        </member>
        <member name="M:Howell.Drawing.D2.PolylineD.ToString">
            <summary>
            获取多线段类型的字符串型式
            </summary>
            <returns>返回多线段类型的字符串型式。</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolylineD.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:Howell.Drawing.D2.PolygonD"/> equal to the specified one.
            </summary>
            <param name="obj">Another point to check equalty to.</param>
            <returns>Return <see langword="true"/> if objects are equal.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolylineD.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            <returns>Returns the hash code for this instance.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolylineD.op_Equality(Howell.Drawing.D2.PolylineD,Howell.Drawing.D2.PolylineD)">
            <summary>
            equals operator - checks if two polygon is the same.
            </summary>
            <param name="p1">PolylineD object 1.</param>
            <param name="p2">PolylineD object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolylineD.op_Inequality(Howell.Drawing.D2.PolylineD,Howell.Drawing.D2.PolylineD)">
            <summary>
            equals operator - checks if two polygon is not the same.
            </summary>
            <param name="p1">PolylineD object 1.</param>
            <param name="p2">PolylineD object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolylineD.op_Explicit(Howell.Drawing.D2.PolylineD)~Howell.Drawing.D2.PolylineI">
            <summary>
            显式转换PolylineD To PolygonI
            </summary>
            <param name="polyline">折线</param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolylineD.Equals(Howell.Drawing.D2.PolylineD)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolylineD.GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolylineD.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="P:Howell.Drawing.D2.PolylineD.Points">
            <summary>
            折线的拐点
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.PolylineD.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="T:Howell.Drawing.D2.LineD">
            <summary>
            线2D
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.LineD.RegularExpressionString">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.LineD.Empty">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:Howell.Drawing.D2.LineD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x1">起点的X轴坐标</param>
            <param name="y1">起点的Y轴坐标</param>
            <param name="x2">终点的X轴坐标</param>
            <param name="y2">终点的X轴坐标</param>
        </member>
        <member name="M:Howell.Drawing.D2.LineD.#ctor(Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD)">
            <summary>
            Constructor
            </summary>
            <param name="starting">开始</param>
            <param name="end">结束</param>
        </member>
        <member name="M:Howell.Drawing.D2.LineD.Parse(System.String)">
            <summary>
            解析线段的字符串形式
            </summary>
            <param name="value">字符串</param>
            <returns>如果解析成功，返回LineD类型，否则将抛出异常</returns>
            <exception cref="T:System.FormatException">非法的字符串格式。</exception>
        </member>
        <member name="M:Howell.Drawing.D2.LineD.ToString">
            <summary>
            获取线段的字符串形式
            </summary>
            <returns>返回字符串形式</returns>
        </member>
        <member name="M:Howell.Drawing.D2.LineD.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:Howell.Drawing.D2.LineD"/> equal to the specified one.
            </summary>
            <param name="obj">Another point to check equalty to.</param>
            <returns>Return <see langword="true"/> if objects are equal.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.LineD.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            <returns>Returns the hash code for this instance.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.LineD.op_Equality(Howell.Drawing.D2.LineD,Howell.Drawing.D2.LineD)">
            <summary>
            equals operator - checks if two line is the same.
            </summary>
            <param name="l1">LineD object 1.</param>
            <param name="l2">LineD object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.LineD.op_Inequality(Howell.Drawing.D2.LineD,Howell.Drawing.D2.LineD)">
            <summary>
            equals operator - checks if two line is not the same.
            </summary>
            <param name="l1">LineD object 1.</param>
            <param name="l2">LineD object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.LineD.op_Explicit(Howell.Drawing.D2.LineD)~Howell.Drawing.D2.LineI">
            <summary>
            隐式转换
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.LineD.Ceiling(Howell.Drawing.D2.LineD)">
            <summary>
            向上取整转换
            </summary>
            <param name="value">LineD对象</param>
            <returns>返回LineI对象</returns>
        </member>
        <member name="M:Howell.Drawing.D2.LineD.Truncate(Howell.Drawing.D2.LineD)">
            <summary>
            向下取整转换
            </summary>
            <param name="value">LineD对象</param>
            <returns>返回LineI对象</returns>
        </member>
        <member name="M:Howell.Drawing.D2.LineD.Round(Howell.Drawing.D2.LineD)">
            <summary>
            四舍五入取整转换
            </summary>
            <param name="value">PointD对象</param>
            <returns>返回PointI对象</returns>
        </member>
        <member name="M:Howell.Drawing.D2.LineD.Equals(Howell.Drawing.D2.LineD)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Howell.Drawing.D2.LineD.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.LineD.Starting">
            <summary>
            起点
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.LineD.End">
            <summary>
            终点
            </summary>
        </member>
        <member name="T:Howell.Math.Algorithm.CircleAlgorithm">
            <summary>
            圆计算方法
            </summary>
        </member>
        <member name="F:Howell.Math.Algorithm.CircleAlgorithm.PI">
            <summary>
            PI值
            </summary>
        </member>
        <member name="M:Howell.Math.Algorithm.CircleAlgorithm.OnCircle(Howell.Drawing.D2.CircleD,Howell.Drawing.D2.PointD)">
            <summary>
            判断点P是否在圆边界上
            </summary>
            <param name="C">圆C</param>
            <param name="P">点P</param>
            <returns>如果在圆边界上返回True，否则返回False。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.CircleAlgorithm.OnCircle(Howell.Drawing.D2.CircleI,Howell.Drawing.D2.PointI)">
            <summary>
            判断点P是否在圆边界上
            </summary>
            <param name="C">圆C</param>
            <param name="P">点P</param>
            <returns>如果在圆边界上返回True，否则返回False。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.CircleAlgorithm.InCircle(Howell.Drawing.D2.CircleD,Howell.Drawing.D2.PointD)">
            <summary>
            判断点P是否在圆内
            </summary>
            <param name="C">圆C</param>
            <param name="P">点P</param>
            <returns>如果在圆内返回True，否则返回False。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.CircleAlgorithm.InCircle(Howell.Drawing.D2.CircleI,Howell.Drawing.D2.PointI)">
            <summary>
            判断点P是否在圆内
            </summary>
            <param name="C">圆C</param>
            <param name="P">点P</param>
            <returns>如果在圆内返回True，否则返回False。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.CircleAlgorithm.InCircle(Howell.Drawing.D2.CircleD,Howell.Drawing.D2.LineD)">
            <summary>
            判断线段L是否在圆内
            </summary>
            <param name="C">圆C</param>
            <param name="L">线段L</param>
            <returns>如果在圆内返回True，否则返回False。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.CircleAlgorithm.InCircle(Howell.Drawing.D2.CircleI,Howell.Drawing.D2.LineI)">
            <summary>
            判断线段L是否在圆内
            </summary>
            <param name="C">圆C</param>
            <param name="L">线段L</param>
            <returns>如果在圆内返回True，否则返回False。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.CircleAlgorithm.InCircle(Howell.Drawing.D2.CircleD,Howell.Drawing.D2.PolygonD)">
            <summary>
            判断多边形PG是否在圆内
            </summary>
            <param name="C">圆C</param>
            <param name="PG">多边形PG</param>
            <returns>如果在圆内返回True，否则返回False。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.CircleAlgorithm.InCircle(Howell.Drawing.D2.CircleI,Howell.Drawing.D2.PolygonI)">
            <summary>
            判断多边形PG是否在圆内
            </summary>
            <param name="C">圆C</param>
            <param name="PG">多边形PG</param>
            <returns>如果在圆内返回True，否则返回False。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.CircleAlgorithm.InCircle(Howell.Drawing.D2.CircleD,Howell.Drawing.D2.PolylineD)">
            <summary>
            判断折线PL是否在圆内
            </summary>
            <param name="C">圆C</param>
            <param name="PL">折线PL</param>
            <returns>如果在圆内返回True，否则返回False。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.CircleAlgorithm.InCircle(Howell.Drawing.D2.CircleI,Howell.Drawing.D2.PolylineI)">
            <summary>
            判断折线PL是否在圆内
            </summary>
            <param name="C">圆C</param>
            <param name="PL">折线PL</param>
            <returns>如果在圆内返回True，否则返回False。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.CircleAlgorithm.InCircle(Howell.Drawing.D2.CircleD,Howell.Drawing.D2.RectangleD)">
            <summary>
            判断矩形R是否在圆内
            </summary>
            <param name="C">圆C</param>
            <param name="R">矩形R</param>
            <returns>如果在圆内返回True，否则返回False。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.CircleAlgorithm.InCircle(Howell.Drawing.D2.CircleI,Howell.Drawing.D2.RectangleI)">
            <summary>
            判断折线PL是否在圆内
            </summary>
            <param name="C">圆C</param>
            <param name="R">矩形R</param>
            <returns>如果在圆内返回True，否则返回False。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.CircleAlgorithm.InCircle(Howell.Drawing.D2.CircleD,Howell.Drawing.D2.CircleD)">
            <summary>
            判断圆C2是否在圆C1内
            </summary>
            <param name="C1">圆C1</param>
            <param name="C2">圆C2</param>
            <returns>如果在圆内返回True，否则返回False。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.CircleAlgorithm.InCircle(Howell.Drawing.D2.CircleI,Howell.Drawing.D2.CircleI)">
            <summary>
            判断圆C2是否在圆C1内
            </summary>
            <param name="C1">圆C1</param>
            <param name="C2">圆C2</param>
            <returns>如果在圆内返回True，否则返回False。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.CircleAlgorithm.Distance(Howell.Drawing.D2.CircleD,Howell.Drawing.D2.PointD)">
            <summary>
            计算点到圆的距离
            </summary>
            <param name="C">圆C</param>
            <param name="P">点P</param>
            <returns>返回点到圆周的距离。</returns>
            <remarks>
            返回值小于0 表示点在圆内。
            返回值等于0 表示点在圆周上。
            返回值大于0 表示点在圆外。
            </remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.CircleAlgorithm.Distance(Howell.Drawing.D2.CircleI,Howell.Drawing.D2.PointI)">
            <summary>
            计算点到圆的距离
            </summary>
            <param name="C">圆C</param>
            <param name="P">点P</param>
            <returns>返回点到圆周的距离。</returns>
            <remarks>
            返回值小于0 表示点在圆内。
            返回值等于0 表示点在圆周上。
            返回值大于0 表示点在圆外。
            </remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.CircleAlgorithm.Distance(Howell.Drawing.D2.CircleD,Howell.Drawing.D2.LineD)">
            <summary>
            计算线L到圆C的距离
            </summary>
            <param name="C">圆C</param>
            <param name="L">线L</param>
            <returns>返回线到圆周的距离。</returns>
            <remarks>
            返回值小于0 表示线在圆内或与圆周相交。
            返回值等于0 表示线在圆周上与圆周相切。
            返回值大于0 表示线在圆外与圆周没有交点。
            </remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.CircleAlgorithm.Distance(Howell.Drawing.D2.CircleI,Howell.Drawing.D2.LineI)">
            <summary>
            计算线L到圆C的距离
            </summary>
            <param name="C">圆C</param>
            <param name="L">线L</param>
            <returns>返回线到圆周的距离。</returns>
            <remarks>
            返回值小于0 表示线在圆内或与圆周相交。
            返回值等于0 表示线在圆周上与圆周相切。
            返回值大于0 表示线在圆外与圆周没有交点。
            </remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.CircleAlgorithm.CreateCircle(Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD)">
            <summary>
            根据点P,Q,R三点确定一个圆,注意三点不能共线
            </summary>
            <param name="P">点P</param>
            <param name="Q">点Q</param>
            <param name="R">点R</param>
            <returns>返回圆，如果圆不存在则返回null.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.CircleAlgorithm.CreateCircle(Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI)">
            <summary>
            根据点P,Q,R三点确定一个圆,注意三点不能共线
            </summary>
            <param name="P">点P</param>
            <param name="Q">点Q</param>
            <param name="R">点R</param>
            <returns>返回圆，如果圆不存在则返回null.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.CircleAlgorithm.Area(Howell.Drawing.D2.CircleI)">
            <summary>
            计算圆形面积
            </summary>
            <param name="C">圆形C</param>
            <returns>返回面积。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.CircleAlgorithm.Area(Howell.Drawing.D2.CircleD)">
            <summary>
            计算圆形面积
            </summary>
            <param name="C">圆形C</param>
            <returns>返回面积。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.CircleAlgorithm.Offset(Howell.Drawing.D2.CircleD,Howell.Drawing.D2.PointD)">
            <summary>
            计算圆形的偏移
            </summary>
            <param name="C">圆形C</param>
            <param name="velocity">偏移速度。</param>
            <returns>返回偏移后的圆形。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.CircleAlgorithm.Offset(Howell.Drawing.D2.CircleI,Howell.Drawing.D2.PointI)">
            <summary>
            计算圆形的偏移
            </summary>
            <param name="C">圆形C</param>
            <param name="velocity">偏移速度。</param>
            <returns>返回偏移后的圆形。</returns>
        </member>
        <member name="T:Howell.Industry.DeviceClassification">
            <summary>
            设备类别
            </summary>
        </member>
        <member name="F:Howell.Industry.DeviceClassification.None">
            <summary>
            非设备
            </summary>
        </member>
        <member name="F:Howell.Industry.DeviceClassification.IPCamera">
            <summary>
            IP摄像机(IP Camera)
            </summary>
        </member>
        <member name="F:Howell.Industry.DeviceClassification.DVS">
            <summary>
            数字视频服务器(Digital Video Server)
            </summary>
        </member>
        <member name="F:Howell.Industry.DeviceClassification.NVR">
            <summary>
            网络视频录像机(Net Video Recorder)
            </summary>
        </member>
        <member name="F:Howell.Industry.DeviceClassification.DVR">
            <summary>
            数字硬盘录像机(Digital Video Recorder)
            </summary>
        </member>
        <member name="F:Howell.Industry.DeviceClassification.DigitalMatrix">
            <summary>
            数字矩阵(Digital Matrix)
            </summary>
        </member>
        <member name="F:Howell.Industry.DeviceClassification.HDDecoder">
            <summary>
            高清解码器(HD Decoder)
            </summary>
        </member>
        <member name="F:Howell.Industry.DeviceClassification.AnalogMatrix">
            <summary>
            模拟矩阵(Analog Matrix)
            </summary>
        </member>
        <member name="F:Howell.Industry.DeviceClassification.VAS">
            <summary>
            视频分析服务器(Video Analytics Server)
            </summary>
        </member>
        <member name="F:Howell.Industry.DeviceClassification.AAM">
            <summary>
            模拟报警主机(Analog Alarm Mainframe)
            </summary>
        </member>
        <member name="F:Howell.Industry.DeviceClassification.NAM">
            <summary>
            网络报警主机(Net Alarm Mainframe)
            </summary>
        </member>
        <member name="F:Howell.Industry.DeviceClassification.VPS">
            <summary>
            视频处理服务器(Video Process Server)
            </summary>
        </member>
        <member name="F:Howell.Industry.DeviceClassification.IntegratedMatrix">
            <summary>
            综合矩阵(Integrated Matrix)
            </summary>
        </member>
        <member name="F:Howell.Industry.DeviceClassification.MatrixControlUnit">
            <summary>
            数字矩阵控制单元(Matrix Control Unit)
            </summary>
        </member>
        <member name="F:Howell.Industry.DeviceClassification.StreamingMediaServer">
            <summary>
            流媒体服务器 (Streaming Media Server)
            </summary>
        </member>
        <member name="F:Howell.Industry.DeviceClassification.DecodingUnit">
            <summary>
            解码单元
            </summary>
        </member>
        <member name="F:Howell.Industry.DeviceClassification.EncodingUnit">
            <summary>
            编码单元
            </summary>
        </member>
        <member name="F:Howell.Industry.DeviceClassification.NVS">
            <summary>
            网络视频服务器(Net Video Server)
            </summary>
        </member>
        <member name="T:Howell.Industry.CameraType">
            <summary>
            摄像机类型
            </summary>
        </member>
        <member name="F:Howell.Industry.CameraType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Howell.Industry.CameraType.Gun">
            <summary>
            枪机
            </summary>
        </member>
        <member name="F:Howell.Industry.CameraType.Ball">
            <summary>
            球
            </summary>
        </member>
        <member name="F:Howell.Industry.CameraType.HalfBall">
            <summary>
            半球
            </summary>
        </member>
        <member name="T:Howell.Drawing.D2.PointSetD">
            <summary>
            点集合
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.PointSetD.RegularExpressionString">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.PointSetD.Empty">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:Howell.Drawing.D2.PointSetD.#ctor(System.Collections.Generic.IList{Howell.Drawing.D2.PointD})">
            <summary>
            Constructor
            </summary>
            <param name="points">点集</param>        
        </member>
        <member name="M:Howell.Drawing.D2.PointSetD.#ctor(Howell.Drawing.D2.PointD[])">
            <summary>
            Constructor
            </summary>
            <param name="points">点集</param>        
        </member>
        <member name="M:Howell.Drawing.D2.PointSetD.Parse(System.String)">
            <summary>
            解析点集的字符串形式
            </summary>
            <param name="value">字符串</param>
            <returns>如果解析成功，返回PolylineD类型，否则将抛出异常</returns>
            <exception cref="T:System.FormatException">非法的字符串格式。</exception>
        </member>
        <member name="M:Howell.Drawing.D2.PointSetD.ToString">
            <summary>
            获取点集的字符串型式
            </summary>
            <returns>返回点集的字符串型式。</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointSetD.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:Howell.Drawing.D2.PolygonD"/> equal to the specified one.
            </summary>
            <param name="obj">Another point to check equalty to.</param>
            <returns>Return <see langword="true"/> if objects are equal.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointSetD.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            <returns>Returns the hash code for this instance.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointSetD.op_Equality(Howell.Drawing.D2.PointSetD,Howell.Drawing.D2.PointSetD)">
            <summary>
            equals operator - checks if two polygon is the same.
            </summary>
            <param name="p1">PointSetD object 1.</param>
            <param name="p2">PointSetD object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointSetD.op_Inequality(Howell.Drawing.D2.PointSetD,Howell.Drawing.D2.PointSetD)">
            <summary>
            equals operator - checks if two polygon is not the same.
            </summary>
            <param name="p1">PointSetD object 1.</param>
            <param name="p2">PointSetD object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointSetD.op_Explicit(Howell.Drawing.D2.PointSetD)~Howell.Drawing.D2.PointSetI">
            <summary>
            显式转换PointSetD To PointSetI
            </summary>
            <param name="pointSet">点集</param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointSetD.Equals(Howell.Drawing.D2.PointSetD)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointSetD.GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointSetD.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="P:Howell.Drawing.D2.PointSetD.Points">
            <summary>
            点集
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.PointSetD.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="T:Howell.Conditions.Throw">
            <summary>
            All throw logic is factored out of the public extension methods and put in this helper class. This 
            allows more methods to be a candidate for inlining by the JIT compiler.
            </summary>
        </member>
        <member name="T:Howell.CommonStrings">
            <summary>
             CommonString class
            </summary>
        </member>
        <member name="F:Howell.CommonStrings.LIBVLC_DLLS_PATH_DEFAULT_VALUE_AMD64">
            <summary>
            "C:\Program Files (x86)\Howell\Device\"
            </summary>
        </member>
        <member name="F:Howell.CommonStrings.LIBVLC_DLLS_PATH_DEFAULT_VALUE_X86">
            <summary>
            "C:\Program Files\Howell\Device\"
            </summary>
        </member>
        <member name="F:Howell.CommonStrings.PLUGINS_PATH_DEFAULT_VALUE_AMD64">
            <summary>
            "C:\Program Files (x86)\Howell\Device\plugins\"
            </summary>
        </member>
        <member name="F:Howell.CommonStrings.PLUGINS_PATH_DEFAULT_VALUE_X86">
            <summary>
            "C:\Program Files\Howell\Device\plugins\"
            </summary>
        </member>
        <member name="T:Howell.Time.DateTimeExtensions">
            <summary>
            DateTime type's extensions function class
            </summary>
        </member>
        <member name="M:Howell.Time.DateTimeExtensions.GetAge(System.DateTime)">
            <summary>
            Get age by date of birth. The default reference date is today.
            </summary>
            <param name="dateOfBirth">Date of birth.</param>
            <returns>return the age calculate by date of birth. </returns>
        </member>
        <member name="M:Howell.Time.DateTimeExtensions.GetAge(System.DateTime,System.DateTime)">
            <summary>
            Calculate age by date of birth.
            </summary>
            <param name="dateOfBirth">Date of birth</param>
            <param name="referenceDate">Reference date which is used to calculate age.</param>
            <returns>return the age calculate by date of birth and reference date. </returns>
        </member>
        <member name="M:Howell.Time.DateTimeExtensions.GetDaysOfMonth(System.DateTime)">
            <summary>
            Get the days of the month.
            </summary>
            <param name="date">The date value.</param>
            <returns>return the total number of days of the month.</returns>
        </member>
        <member name="M:Howell.Time.DateTimeExtensions.GetFirstDayOfMonth(System.DateTime)">
            <summary>
            Get the first day of the month.
            </summary>
            <param name="date">The date value.</param>
            <returns>return the date of first day of the month.</returns>
        </member>
        <member name="M:Howell.Time.DateTimeExtensions.GetFirstDayOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            Get the first day of the month, and the day of week is equals to the parameter.
            </summary>
            <param name="date">The date value.</param>
            <param name="dayOfWeek">Day of week.</param>
            <returns>return the date of first day of the month, and the day of week is equals to the parameter.</returns>
        </member>
        <member name="M:Howell.Time.DateTimeExtensions.GetLastDayOfMonth(System.DateTime)">
            <summary>
            Get the last day of the month.
            </summary>
            <param name="date">The date value.</param>
            <returns>return the last day of the month.</returns>
        </member>
        <member name="M:Howell.Time.DateTimeExtensions.GetLastDayOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            Get the last day of the month, and the day of week is equals to the parameter.
            </summary>
            <param name="date">The date value.</param>
            <param name="dayOfWeek">Day of week.</param>
            <returns>return the last day of the month, and the day of week is equals to the parameter.</returns>
        </member>
        <member name="M:Howell.Time.DateTimeExtensions.IsToday(System.DateTime)">
            <summary>
            Indicates whether  this instance of DateTime is today.
            </summary>
            <param name="date">The date value.</param>
            <returns>If the date is today,then returns true, otherwise it returns false.</returns>
        </member>
        <member name="M:Howell.Time.DateTimeExtensions.IsToday(System.DateTimeOffset)">
            <summary>
            Indicates whether  this instance of DateTime is today.
            </summary>
            <param name="dateTimeOffset">The date time offset value.</param>
            <returns>If the date is today,then returns true, otherwise it returns false.</returns>
        </member>
        <member name="M:Howell.Time.DateTimeExtensions.GetFirstDayOfWeek(System.DateTime)">
            <summary>
            Get the first day of this week
            </summary>
            <param name="date">The date value to demonstrate week value.</param>
            <returns>return the first day's date of this week.</returns>
        </member>
        <member name="M:Howell.Time.DateTimeExtensions.GetFirstDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Get the first day of this week
            </summary>
            <param name="date">The date value to demonstrate week value.</param>
            <param name="cultureInfo"></param>
            <returns>return the first day's date of this week.</returns>
        </member>
        <member name="M:Howell.Time.DateTimeExtensions.GetLastDayOfWeek(System.DateTime)">
            <summary>
            Get the last day of this week
            </summary>
            <param name="date">The date value to demonstrate week value.</param>
            <returns>return the last day's date of this week.</returns>
        </member>
        <member name="M:Howell.Time.DateTimeExtensions.GetLastDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Get the last day of this week
            </summary>
            <param name="date">The date value to demonstrate week value.</param>
            <param name="cultureInfo"></param>
            <returns>return the last day's date of this week.</returns>
        </member>
        <member name="M:Howell.Time.DateTimeExtensions.GetWeekOfYear(System.DateTime)">
            <summary>
            Get the week of year.
            </summary>
            <param name="date">The date value</param>
            <returns>return the week of year.</returns>
        </member>
        <member name="M:Howell.Time.DateTimeExtensions.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule)">
            <summary>
            Get the week of year.
            </summary>
            <param name="date">The date value.</param>
            <param name="rule">The calendar week rule.</param>
            <returns>return the week of year.</returns>
        </member>
        <member name="M:Howell.Time.DateTimeExtensions.GetWeekOfYear(System.DateTime,System.DayOfWeek)">
            <summary>
            Get the week of year.
            </summary>
            <param name="date">The date value.</param>
            <param name="firstDayOfWeek">The day of week for the first date in week.</param>
            <returns>return the week of year.</returns>
        </member>
        <member name="M:Howell.Time.DateTimeExtensions.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
            <summary>
            Get the week of year.
            </summary>
            <param name="date">The date value.</param>
            <param name="rule">The calendar week rule.</param>
            <param name="firstDayOfWeek">The day of week for the first date in week.</param>
            <returns>return the week of year.</returns>
        </member>
        <member name="M:Howell.Time.DateTimeExtensions.IsWeekDay(System.DateTime)">
            <summary>
            Indicates whether this instance of DateTime is weekday.
            </summary>
            <param name="date">Instance of date.</param>
            <returns>If the instance of date is weekday, then returns true, otherwise returns false.</returns>
        </member>
        <member name="M:Howell.Time.DateTimeExtensions.IsWeekend(System.DateTime)">
            <summary>
            Indicates whether this instance of DateTime is weekend.
            </summary>
            <param name="date">Instance of date.</param>
            <returns>If the instance of date is weekend, then returns true, otherwise returns false.</returns>
        </member>
        <member name="M:Howell.Time.DateTimeExtensions.IsInRange(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Indicates whether this instance of DateTime is in time range. The default Intervals is all closed.
            </summary>
            <param name="time">The instance of DateTime.</param>
            <param name="beginTime">The instance of begin DateTime.</param>
            <param name="endTime">The instance of end DateTime.</param>
            <returns>If the instance of date is in time range, then returns true, otherwise returns false.</returns>
        </member>
        <member name="M:Howell.Time.DateTimeExtensions.IsInRange(System.DateTime,System.DateTime,System.DateTime,Howell.Numeric.Intervals)">
            <summary>
            Indicates whether this instance of DateTime is in time range.
            </summary>
            <param name="time">The instance of DateTime.</param>
            <param name="beginTime">The instance of begin DateTime.</param>
            <param name="endTime">The instance of end DateTime.</param>
            <param name="intervals">Intervals of DateTime range.</param>
            <returns>If the instance of date is in time range, then returns true, otherwise returns false.</returns>
        </member>
        <member name="T:Howell.Sex">
            <summary>
            性别
            </summary>
        </member>
        <member name="F:Howell.Sex.None">
            <summary>
            保密
            </summary>
        </member>
        <member name="F:Howell.Sex.Male">
            <summary>
            男性
            </summary>
        </member>
        <member name="F:Howell.Sex.Female">
            <summary>
            女性
            </summary>
        </member>
        <member name="T:Howell.IO.FIFOBuffer">
            <summary>
            Implements FIFO(first in - first out) buffer.
            </summary>
        </member>
        <member name="M:Howell.IO.FIFOBuffer.#ctor(System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="maxSize">Maximum number of bytes can buffer in FIFO.</param>
            <exception cref="T:System.ArgumentException">Is raised when </exception>
        </member>
        <member name="M:Howell.IO.FIFOBuffer.SeekReadOffset(System.Int32)">
            <summary>
            Seek read offset
            </summary>
            <param name="offset">read offset</param>
        </member>
        <member name="M:Howell.IO.FIFOBuffer.ReadByte">
            <summary>
            Read a byte from buffer
            </summary>
            <returns>return a readed byte,if reach the end of buffer then return -1.</returns>
        </member>
        <member name="M:Howell.IO.FIFOBuffer.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads up to specified count of bytes from the FIFO buffer.
            </summary>
            <param name="buffer">Buffer where to store data.</param>
            <param name="offset">Index in the buffer.</param>
            <param name="count">Maximum number of bytes to read.</param>
            <returns>Returns number of bytes readed. Returns 0 if no data in the buffer.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of allowed range.</exception>
        </member>
        <member name="M:Howell.IO.FIFOBuffer.Write(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Writes specified number of bytes to the FIFO buffer.
            </summary>
            <param name="buffer">Data buffer.</param>
            <param name="offset">Index in the buffer.</param>
            <param name="count">Number of bytes to wrtite.</param>
            <param name="ignoreBufferFull">If true, disables excption raising when FIFO full.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of allowed range.</exception>
            <exception cref="T:Howell.IO.DataSizeExceededException">Is raised when ignoreBufferFull = false and FIFO buffer has no room to store data.</exception>
        </member>
        <member name="M:Howell.IO.FIFOBuffer.Clear">
            <summary>
            Clears buffer data.
            </summary>
        </member>
        <member name="M:Howell.IO.FIFOBuffer.TrimStart">
            <summary>
            Removes unused space from the buffer beginning.
            </summary>
        </member>
        <member name="M:Howell.IO.FIFOBuffer.ToArray">
            <summary>
            ToArray
            </summary>
            <returns>return Byte Array.</returns>
        </member>
        <member name="P:Howell.IO.FIFOBuffer.ReadOffset">
            <summary>
            Read Offset
            </summary>
        </member>
        <member name="P:Howell.IO.FIFOBuffer.WriteOffset">
            <summary>
            Write Offset
            </summary>
        </member>
        <member name="P:Howell.IO.FIFOBuffer.MaxSize">
            <summary>
            Gets maximum number of bytes can buffer in FIFO.
            </summary>
        </member>
        <member name="P:Howell.IO.FIFOBuffer.Available">
            <summary>
            Gets number of bytes avialable in FIFO.
            </summary>
        </member>
        <member name="T:Howell.IO.ByteOrder">
            <summary>
            字节序
            </summary>
        </member>
        <member name="F:Howell.IO.ByteOrder.Network">
            <summary>
            网络字节序 Big-Endian
            </summary>
        </member>
        <member name="F:Howell.IO.ByteOrder.Host">
            <summary>
            主机字节序 Little-Endian
            </summary>
        </member>
        <member name="T:Howell.Drawing.D2.PointD">
            <summary>
            点
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.PointD.RegularExpressionString">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.PointD.Empty">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:Howell.Drawing.D2.PointD.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x">X轴</param>
            <param name="y">Y轴</param>
        </member>
        <member name="M:Howell.Drawing.D2.PointD.Offset(System.Double,System.Double)">
            <summary>
            偏移点的坐标
            </summary>
            <param name="dx">偏移的X轴值</param>
            <param name="dy">偏移的Y轴值</param>
        </member>
        <member name="M:Howell.Drawing.D2.PointD.Offset(Howell.Drawing.D2.PointD)">
            <summary>
            偏移点的坐标
            </summary>
            <param name="point">偏移的坐标</param>
        </member>
        <member name="M:Howell.Drawing.D2.PointD.Offset(Howell.Drawing.D2.SizeD)">
            <summary>
            偏移点的坐标
            </summary>
            <param name="size">偏移的大小</param>
        </member>
        <member name="M:Howell.Drawing.D2.PointD.Parse(System.String)">
            <summary>
            解析点的字符串形式
            </summary>
            <param name="value">字符串</param>
            <returns>如果解析成功，返回PointD类型，否则将抛出异常</returns>
            <exception cref="T:System.FormatException">非法的字符串格式。</exception>
        </member>
        <member name="M:Howell.Drawing.D2.PointD.ToString">
            <summary>
            获取点的字符串形式
            </summary>
            <returns>返回字符串形式</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointD.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:Howell.Drawing.D2.PointD"/> equal to the specified one.
            </summary>
            <param name="obj">Another point to check equalty to.</param>
            <returns>Return <see langword="true"/> if objects are equal.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointD.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            <returns>Returns the hash code for this instance.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointD.op_Explicit(Howell.Drawing.D2.PointD)~Howell.Drawing.D2.PointI">
            <summary>
            隐式转换PointD To PointI
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointD.op_Explicit(Howell.Drawing.D2.SizeD)~Howell.Drawing.D2.PointD">
            <summary>
            显示转换Size 2 Point
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointD.op_Explicit(Howell.Drawing.D2.PointD)~System.Drawing.PointF">
            <summary>
            隐式转换PointD To PointF
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointD.op_Equality(Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD)">
            <summary>
            equals operator - checks if two point is the same.
            </summary>
            <param name="p1">PointD object 1.</param>
            <param name="p2">PointD object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointD.op_Inequality(Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD)">
            <summary>
            equals operator - checks if two point is not the same.
            </summary>
            <param name="p1">PointD object 1.</param>
            <param name="p2">PointD object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointD.op_Addition(Howell.Drawing.D2.PointD,Howell.Drawing.D2.SizeD)">
            <summary>
            加运算
            </summary>
            <param name="pt">点</param>
            <param name="sz">大小</param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointD.op_Subtraction(Howell.Drawing.D2.PointD,Howell.Drawing.D2.SizeD)">
            <summary>
            减运算
            </summary>
            <param name="pt">点</param>
            <param name="sz">大小</param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointD.op_Subtraction(Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD)">
            <summary>
            减运算
            </summary>
            <param name="pt1">点1</param>
            <param name="pt2">点2</param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointD.op_Addition(Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD)">
            <summary>
            加运算
            </summary>
            <param name="pt1">点1</param>
            <param name="pt2">点2</param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointD.Ceiling(Howell.Drawing.D2.PointD)">
            <summary>
            向上取整转换
            </summary>
            <param name="value">PointD对象</param>
            <returns>返回PointI对象</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointD.Truncate(Howell.Drawing.D2.PointD)">
            <summary>
            向下取整转换
            </summary>
            <param name="value">PointD对象</param>
            <returns>返回PointI对象</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointD.Round(Howell.Drawing.D2.PointD)">
            <summary>
            四舍五入取整转换
            </summary>
            <param name="value">PointD对象</param>
            <returns>返回PointI对象</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointD.Equals(Howell.Drawing.D2.PointD)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointD.CompareTo(Howell.Drawing.D2.PointD)">
            <summary>
            CompareTo X1>X2 >0 Or （X1=X2 And Y1>Y2 >0）
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PointD.CompareTo(System.Object)">
            <summary>
            CompareTo
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Howell.Drawing.D2.PointD.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.PointD.X">
            <summary>
            X轴坐标
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.PointD.Y">
            <summary>
            Y轴坐标
            </summary>
        </member>
        <member name="T:Howell.Drawing.D2.EllipseD">
            <summary>
            椭圆
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.EllipseD.RegularExpressionString">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.EllipseD.Empty">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:Howell.Drawing.D2.EllipseD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x">中心点X</param>
            <param name="y">中心点Y</param>
            <param name="major">主轴长度</param>
            <param name="minor">副轴长度</param>
        </member>
        <member name="M:Howell.Drawing.D2.EllipseD.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x">中心点X</param>
            <param name="y">中心点Y</param>
            <param name="major">主轴长度</param>
            <param name="minor">副轴长度</param>
            <param name="angle">椭圆旋转角度</param>
        </member>
        <member name="M:Howell.Drawing.D2.EllipseD.Parse(System.String)">
            <summary>
            解析椭圆的字符串形式
            </summary>
            <param name="value">字符串</param>
            <returns>如果解析成功，返回EllipseD类型，否则将抛出异常</returns>
            <exception cref="T:System.FormatException">非法的字符串格式。</exception>
        </member>
        <member name="M:Howell.Drawing.D2.EllipseD.ToString">
            <summary>
            获取椭圆的字符串形式
            </summary>
            <returns>返回椭圆字符串形式</returns>
        </member>
        <member name="M:Howell.Drawing.D2.EllipseD.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:Howell.Drawing.D2.EllipseD"/> equal to the specified one.
            </summary>
            <param name="obj">Another point to check equalty to.</param>
            <returns>Return <see langword="true"/> if objects are equal.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.EllipseD.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            <returns>Returns the hash code for this instance.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.EllipseD.op_Equality(Howell.Drawing.D2.EllipseD,Howell.Drawing.D2.EllipseD)">
            <summary>
            equals operator - checks if two ellipse is the same.
            </summary>
            <param name="e1">Ellipse2D object 1.</param>
            <param name="e2">Ellipse2D object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.EllipseD.op_Inequality(Howell.Drawing.D2.EllipseD,Howell.Drawing.D2.EllipseD)">
            <summary>
            equals operator - checks if two ellipse is not the same.
            </summary>
            <param name="e1">Ellipse2D object 1.</param>
            <param name="e2">Ellipse2D object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.EllipseD.op_Explicit(Howell.Drawing.D2.EllipseD)~Howell.Drawing.D2.EllipseI">
            <summary>
            隐式转换 EllipseD To EllipseI
            </summary>
            <param name="ellipse"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.EllipseD.Equals(Howell.Drawing.D2.EllipseD)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Howell.Drawing.D2.EllipseD.X">
            <summary>
            中心点X轴坐标
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.EllipseD.Y">
            <summary>
            中心点Y轴坐标
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.EllipseD.Center">
            <summary>
            中心点
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.EllipseD.Major">
            <summary>
            主轴长度
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.EllipseD.Minor">
            <summary>
            副轴长度
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.EllipseD.Angle">
            <summary>
            椭圆旋转角度
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.EllipseD.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="T:Howell.Math.Algorithm.PolygonAlgorithm">
            <summary>
            多边形算法
            </summary>
        </member>
        <member name="M:Howell.Math.Algorithm.PolygonAlgorithm.InPolygon(Howell.Drawing.D2.PolygonD,Howell.Drawing.D2.PointD)">
            <summary>
            点P是否在多边形区域内
            </summary>
            <param name="PG">多边形PL</param>
            <param name="P">点P</param>
            <returns>如果点P在区域内返回True,否则返回False.</returns>
            <remarks>此处不考虑平行边的情况</remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.PolygonAlgorithm.InPolygon(Howell.Drawing.D2.PolygonI,Howell.Drawing.D2.PointI)">
            <summary>
            点P是否在多边形区域内
            </summary>
            <param name="PG">多边形PL</param>
            <param name="P">点P</param>
            <returns>如果点P在区域内返回True,否则返回False.</returns>
            <remarks>此处不考虑平行边的情况</remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.PolygonAlgorithm.InPolygon(Howell.Drawing.D2.PolygonD,Howell.Drawing.D2.LineD)">
            <summary>
            线段L是否在多边形区域内
            </summary>
            <param name="PG">多边形PG</param>
            <param name="L">线段L</param>
            <returns>如果线段L在区域内返回True,否则返回False.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PolygonAlgorithm.InPolygon(Howell.Drawing.D2.PolygonI,Howell.Drawing.D2.LineI)">
            <summary>
            线段L是否在多边形区域内
            </summary>
            <param name="PG">多边形PG</param>
            <param name="L">线段L</param>
            <returns>如果线段L在区域内返回True,否则返回False.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PolygonAlgorithm.InPolygon(Howell.Drawing.D2.PolygonD,Howell.Drawing.D2.PolylineD)">
            <summary>
            判断折线PL是否在多边形内
            </summary>
            <param name="PG">PG多边形</param>
            <param name="PL">PL折线</param>
            <returns>如果PL折线在区域内返回True,否则返回False.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PolygonAlgorithm.InPolygon(Howell.Drawing.D2.PolygonI,Howell.Drawing.D2.PolylineI)">
            <summary>
            判断折线PL是否在多边形内
            </summary>
            <param name="PG">PG多边形</param>
            <param name="PL">PL折线</param>
            <returns>如果PL折线在区域内返回True,否则返回False.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PolygonAlgorithm.InPolygon(Howell.Drawing.D2.PolygonD,Howell.Drawing.D2.PolygonD)">
            <summary>
            判断多边形PL是否在多边形内
            </summary>
            <param name="PG">PG多边形</param>
            <param name="PL">PL多边形</param>
            <returns>如果PL多边形在区域内返回True,否则返回False.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PolygonAlgorithm.InPolygon(Howell.Drawing.D2.PolygonI,Howell.Drawing.D2.PolygonI)">
            <summary>
            判断多边形PL是否在多边形内
            </summary>
            <param name="PG">PG多边形</param>
            <param name="PL">PL多边形</param>
            <returns>如果PL多边形在区域内返回True,否则返回False.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PolygonAlgorithm.InPolygon(Howell.Drawing.D2.PolygonD,Howell.Drawing.D2.RectangleD)">
            <summary>
            判断矩形R是否在多边形内
            </summary>
            <param name="PG">PG多边形</param>
            <param name="R">R矩形</param>
            <returns>如果R矩形在区域内返回True,否则返回False.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PolygonAlgorithm.InPolygon(Howell.Drawing.D2.PolygonI,Howell.Drawing.D2.RectangleI)">
            <summary>
            判断矩形R是否在多边形内
            </summary>
            <param name="PG">PG多边形</param>
            <param name="R">R矩形</param>
            <returns>如果R矩形在区域内返回True,否则返回False.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PolygonAlgorithm.InPolygon(Howell.Drawing.D2.PolygonD,Howell.Drawing.D2.CircleD)">
            <summary>
            判断圆C是否在多边形PG内
            </summary>
            <param name="PG">多边形PG</param>
            <param name="C">圆C</param>
            <returns>如果圆C在区域内返回True,否则返回False.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PolygonAlgorithm.InPolygon(Howell.Drawing.D2.PolygonI,Howell.Drawing.D2.CircleI)">
            <summary>
            判断圆C是否在多边形PG内
            </summary>
            <param name="PG">PG多边形</param>
            <param name="C">圆C</param>
            <returns>如果圆C在区域内返回True,否则返回False.</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PolygonAlgorithm.IsConvexPolygon(Howell.Drawing.D2.PolygonD)">
            <summary>
            判断是否为凸多边形
            </summary>
            <param name="PG">PG多边形</param>
            <returns>如果是凸多边形返回True，否则返回False。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PolygonAlgorithm.IsConvexPolygon(Howell.Drawing.D2.PolygonI)">
            <summary>
            判断是否为凸多边形
            </summary>
            <param name="PG">PG多边形</param>
            <returns>如果是凸多边形返回True，否则返回False。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PolygonAlgorithm.Area(Howell.Drawing.D2.PolygonD)">
            <summary>
            计算多边形PG面积
            </summary>
            <param name="PG">多边形PG</param>
            <returns>返回面积。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PolygonAlgorithm.Area(Howell.Drawing.D2.PolygonI)">
            <summary>
            计算多边形PG面积
            </summary>
            <param name="PG">多边形PG</param>
            <returns>返回面积。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PolygonAlgorithm.Offset(Howell.Drawing.D2.PolygonD,Howell.Drawing.D2.PointD)">
            <summary>
            计算偏移多边形PG
            </summary>
            <param name="PG">多边形PG</param>
            <param name="velocity">偏移速度</param>
            <returns>返回偏移多边形</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PolygonAlgorithm.Offset(Howell.Drawing.D2.PolygonI,Howell.Drawing.D2.PointI)">
            <summary>
            计算偏移多边形PG
            </summary>
            <param name="PG">多边形PG</param>
            <param name="velocity">偏移速度</param>
            <returns>返回偏移多边形</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PolygonAlgorithm.GetValidatePolygon(Howell.Drawing.D2.PolygonD)">
            <summary>
            获取有效的多边形
            </summary>
            <param name="PG">多边形PG</param>
            <returns>返回多边形</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PolygonAlgorithm.GetValidatePolygon(Howell.Drawing.D2.PolygonI)">
            <summary>
            获取有效的多边形
            </summary>
            <param name="PG">多边形PG</param>
            <returns>返回多边形</returns>
        </member>
        <member name="T:Howell.Math.Algorithm.PointAlgorithm">
            <summary>
            点计算工具
            </summary>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.Equals(Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD)">
            <summary>
            判断点P,Q是否重合
            </summary>
            <param name="P">点P</param>
            <param name="Q">点Q</param>
            <returns>如果重合则返回True，否则返回False。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.Equals(Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI)">
            <summary>
            判断点P,Q是否重合
            </summary>
            <param name="P">点P</param>
            <param name="Q">点Q</param>
            <returns>如果重合则返回True，否则返回False。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.MidPoint(Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD)">
            <summary>
            计算点P,Q的中点 
            </summary>
            <param name="P">点P</param>
            <param name="Q">点Q</param>
            <returns>返回点P,Q的中点</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.MidPoint(Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI)">
            <summary>
            计算点P,Q的中点 
            </summary>
            <param name="P">点P</param>
            <param name="Q">点Q</param>
            <returns>返回点P,Q的中点</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.Multiple(Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD)">
            <summary>
            计算点 (0,0),P,Q,P+Q组成的平行四边形的带符号的面积
            P*Q = -(Q*P)
            </summary>
            <param name="P">点P</param>
            <param name="Q">点Q</param>
            <returns>返回面积值</returns>
            <remarks>
            返回值 大于 0 , 则P在Q的顺时针方向。
            返回值 等于 0 , 则P在Q的逆时针方向。
            返回值 小于 0 , 则P与Q共线，但可能同向也可能反向。
            </remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.Multiple(Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI)">
            <summary>
            计算点 (0,0),P,Q,P+Q组成的平行四边形的带符号的面积
            P*Q = -(Q*P)
            </summary>
            <param name="P">点P</param>
            <param name="Q">点Q</param>
            <returns>返回面积值</returns>
            <remarks>
            返回值 大于 0 , 则P在Q的顺时针方向。
            返回值 小于 0 , 则P在Q的逆时针方向。
            返回值 等于 0 , 则P与Q共线，但可能同向也可能反向。
            </remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.Multiple(Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD)">
            <summary>
            计算(R-P)和(Q-P)的叉积 
            </summary>
            <param name="P">点P</param>
            <param name="Q">点Q</param>
            <param name="R">点R</param>
            <returns>返回叉积值</returns>
            <remarks>
            返回值 大于0 R在矢量PQ的逆时针方向 
            返回值 等于0 R,P,Q 三点共线
            返回值 小于0 R在矢量PQ的顺时针方向
            </remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.Multiple(Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI)">
            <summary>
            计算(R-P)和(Q-P)的叉积 
            </summary>
            <param name="P">点P</param>
            <param name="Q">点Q</param>
            <param name="R">点R</param>
            <returns>返回叉积值</returns>
            <remarks>
            返回值 大于0 R在矢量PQ的逆时针方向 
            返回值 等于0 R,P,Q 三点共线
            返回值 小于0 R在矢量PQ的顺时针方向
            </remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.DotMultiple(Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD)">
            <summary>
            得到矢量(Q-P)和(R-P)的点积，如果两个矢量都非零矢量 
            </summary>
            <param name="P">点P</param>
            <param name="Q">点Q</param>
            <param name="R">点R</param>
            <returns>返回点积值。</returns>
            <remarks>
            返回值小于0，两矢量夹角为锐角
            返回值等于0，两矢量夹角为直角
            返回值大于0，两矢量夹角为钝角
            </remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.DotMultiple(Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI)">
            <summary>
            得到矢量(Q-P)和(R-P)的点积，如果两个矢量都非零矢量 
            </summary>
            <param name="P">点P</param>
            <param name="Q">点Q</param>
            <param name="R">点R</param>
            <returns>返回点积值。</returns>
            <remarks>
            返回值小于0，两矢量夹角为锐角
            返回值等于0，两矢量夹角为直角
            返回值大于0，两矢量夹角为钝角
            </remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.Substract(Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD)">
            <summary>
            计算点P-Q的值
            </summary>
            <param name="P">点P</param>
            <param name="Q">点Q</param>
            <returns>返回P-Q的值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.Substract(Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI)">
            <summary>
            计算点P-Q的值
            </summary>
            <param name="P">点P</param>
            <param name="Q">点Q</param>
            <returns>返回P-Q的值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.Distance(Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD)">
            <summary>
            计算两点间的距离
            </summary>
            <param name="P">点P</param>
            <param name="Q">点Q</param>
            <returns>返回距离</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.Distance(Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI)">
            <summary>
            计算两点间的距离
            </summary>
            <param name="P">点P</param>
            <param name="Q">点Q</param>
            <returns>返回距离</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.Distance(Howell.Drawing.D2.PointD,Howell.Drawing.D2.LineD)">
            <summary>
            计算点P到线段L所在直线的距离
            </summary>
            <param name="P">点P</param>
            <param name="L">线段L</param>
            <returns>返回距离</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.Distance(Howell.Drawing.D2.PointI,Howell.Drawing.D2.LineI)">
            <summary>
            计算点P到线段L所在直线的距离
            </summary>
            <param name="P">点P</param>
            <param name="L">线段L</param>
            <returns>返回距离</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.Rotate(Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD,System.Double)">
            <summary>
            计算点P以点O为轴心旋转Radian弧度后的点坐标。
            </summary>
            <param name="P">点P</param>
            <param name="O">点0</param>
            <param name="Radian">弧度</param>
            <returns>返回旋转后的点值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.Rotate(Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI,System.Double)">
            <summary>
            计算点P以点O为轴心旋转Radian弧度后的点坐标。
            </summary>
            <param name="P">点P</param>
            <param name="O">点0</param>
            <param name="Radian">弧度</param>
            <returns>返回旋转后的点值</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.Angle(Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD)">
            <summary>
            计算矢量Q->P与矢量R->P的夹角弧度
            </summary>
            <param name="P">点P</param>
            <param name="Q">点Q</param>
            <param name="R">点R</param>
            <returns>返回弧度值</returns>
            <remarks>
            角度小于PI，返回正值 说明矢量QP在矢量RP的顺时针方向
            角度大于PI，返回负值 说明矢量QP在矢量RP的逆时针方向
            </remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.Angle(Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI)">
            <summary>
            计算矢量Q->P与矢量R->P的夹角弧度
            </summary>
            <param name="P">点P</param>
            <param name="Q">点Q</param>
            <param name="R">点R</param>
            <returns>返回弧度值</returns>
            <remarks>
            角度小于PI，返回正值 说明矢量QP在矢量RP的顺时针方向
            角度大于PI，返回负值 说明矢量QP在矢量RP的逆时针方向
            </remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.PerpendicularPosition(Howell.Drawing.D2.PointD,Howell.Drawing.D2.LineD)">
            <summary>
            计算点P在线L的垂足位置
            </summary>
            <param name="P">点P</param>
            <param name="L">线L</param>
            <returns>返回垂足位置</returns>
            <remarks>
            返回值 等于0 垂足=L.End
            返回值 等于1 垂足=L.Starting
            返回值 小于0 垂足在线L的反向延长线上
            返回值 大于1 垂足在线L的正向延长线上
            返回值 (0,1) 垂足在线L上
            </remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.PerpendicularPosition(Howell.Drawing.D2.PointI,Howell.Drawing.D2.LineI)">
            <summary>
            计算点P在线L的垂足位置
            </summary>
            <param name="P">点P</param>
            <param name="L">线L</param>
            <returns>返回垂足位置</returns>
            <remarks>
            返回值 等于0 垂足=L.End
            返回值 等于1 垂足=L.Starting
            返回值 小于0 垂足在线L的反向延长线上
            返回值 大于1 垂足在线L的正向延长线上
            返回值 (0,1) 垂足在线L上
            </remarks>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.Perpendicular(Howell.Drawing.D2.PointD,Howell.Drawing.D2.LineD)">
            <summary>
            计算点P到线L垂足
            </summary>
            <param name="P">线P</param>
            <param name="L">点L</param>
            <returns>返回垂足点</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.Perpendicular(Howell.Drawing.D2.PointI,Howell.Drawing.D2.LineI)">
            <summary>
            计算点P到线L垂足
            </summary>
            <param name="P">线P</param>
            <param name="L">点L</param>
            <returns>返回垂足点</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.ClosestPoint(Howell.Drawing.D2.PointD,Howell.Drawing.D2.LineD)">
            <summary>
            计算点P到线L的最近点,该点在线上。不一定是垂足,应为垂足不一定在线上。 
            </summary>
            <param name="P">点P</param>
            <param name="L">线L</param>
            <returns>返回最近点</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.ClosestPoint(Howell.Drawing.D2.PointI,Howell.Drawing.D2.LineI)">
            <summary>
            计算点P到线L的最近点,该点在线上。不一定是垂足,应为垂足不一定在线上。 
            </summary>
            <param name="P">点P</param>
            <param name="L">线L</param>
            <returns>返回最近点</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.ClosestDistance(Howell.Drawing.D2.PointD,Howell.Drawing.D2.LineD)">
            <summary>
            计算点P到线L的最近距离
            </summary>
            <param name="P">点P</param>
            <param name="L">线L</param>
            <returns>返回最近距离</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.ClosestDistance(Howell.Drawing.D2.PointI,Howell.Drawing.D2.LineI)">
            <summary>
            计算点P到线L的最近距离
            </summary>
            <param name="P">点P</param>
            <param name="L">线L</param>
            <returns>返回最近距离</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.ClosestDistance(Howell.Drawing.D2.PointD,Howell.Drawing.D2.PolylineD)">
            <summary>
            计算点P到折线PL的最近距离
            </summary>
            <param name="P">点P</param>
            <param name="PL">折线PL</param>
            <returns>返回最近距离</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.ClosestDistance(Howell.Drawing.D2.PointI,Howell.Drawing.D2.PolylineI)">
            <summary>
            计算点P到折线PL的最近距离
            </summary>
            <param name="P">点P</param>
            <param name="PL">折线PL</param>
            <returns>返回最近距离</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.ClosestDistance(Howell.Drawing.D2.PointD,Howell.Drawing.D2.PolygonD)">
            <summary>
            计算点P到多边形PG的最近距离
            </summary>
            <param name="P">点P</param>
            <param name="PG">多边形PG</param>
            <returns>返回最近距离</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.ClosestDistance(Howell.Drawing.D2.PointI,Howell.Drawing.D2.PolygonI)">
            <summary>
            计算点P到多边形PG的最近距离
            </summary>
            <param name="P">点P</param>
            <param name="PG">多边形PG</param>
            <returns>返回最近距离</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.Offset(Howell.Drawing.D2.PointD,Howell.Drawing.D2.PointD)">
            <summary>
            偏移点计算
            </summary>
            <param name="P">点P</param>
            <param name="velocity">偏移速度</param>
            <returns>返回偏移点。</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.PointAlgorithm.Offset(Howell.Drawing.D2.PointI,Howell.Drawing.D2.PointI)">
            <summary>
            偏移点计算
            </summary>
            <param name="P">点P</param>
            <param name="velocity">偏移速度</param>
            <returns>返回偏移点。</returns>
        </member>
        <member name="T:Howell.Applications">
            <summary>
            应用程序工具类
            </summary>
        </member>
        <member name="M:Howell.Applications.IsFirstInstance">
            <summary>
            判断是否是第一个运行起来的实例
            </summary>
            <returns>如果是第一个实例则返回True，否则返回False。</returns>
        </member>
        <member name="M:Howell.Applications.IsFirstInstance(System.String)">
            <summary>
            判断是否是第一个运行起来的实例
            </summary>
            <param name="processName">实例名称</param>
            <returns>如果是第一个实例则返回True，否则返回False。</returns>
        </member>
        <member name="M:Howell.Applications.Dispose">
            <summary>
            销毁Application类创建的资源
            </summary>
        </member>
        <member name="T:Howell.Industry.NetworkSpeedDuplex">
            <summary>
            网口连接速率和双工模式
            </summary>
        </member>
        <member name="F:Howell.Industry.NetworkSpeedDuplex.Auto">
            <summary>
            自适应
            </summary>
        </member>
        <member name="F:Howell.Industry.NetworkSpeedDuplex.Half10MBase">
            <summary>
            10Mbps 半双工
            </summary>
        </member>
        <member name="F:Howell.Industry.NetworkSpeedDuplex.Full10MBase">
            <summary>
            10Mbps 全双工
            </summary>
        </member>
        <member name="F:Howell.Industry.NetworkSpeedDuplex.Half100MBase">
            <summary>
            100Mbps 半双工
            </summary>
        </member>
        <member name="F:Howell.Industry.NetworkSpeedDuplex.Full100MBase">
            <summary>
            100Mbps 全双工
            </summary>
        </member>
        <member name="F:Howell.Industry.NetworkSpeedDuplex.Half1000MBase">
            <summary>
            1000Mbps 半双工
            </summary>
        </member>
        <member name="F:Howell.Industry.NetworkSpeedDuplex.Full1000MBase">
            <summary>
            1000Mbps 全双工
            </summary>
        </member>
        <member name="T:Howell.Conditions.RequiresWithCustomExceptionValidator`2">
            <summary>
            The RequiresValidator can be used for precondition checks.
            </summary>
            <typeparam name="T">The type of the argument to be validated</typeparam>
            <typeparam name="TException">The exception type to throw in case of a failure.</typeparam>
        </member>
        <member name="T:Howell.Conditions.EnsuresValidator`1">
            <summary>
            The EnsuresValidator can be used for postcondition checks.
            </summary>
            <typeparam name="T">The type of the argument to be validated</typeparam>
        </member>
        <member name="M:Howell.Conditions.EnsuresValidator`1.ThrowExceptionCore(System.String,System.String,Howell.Conditions.ConstraintViolationType)">
            <summary>Throws an exception.</summary>
            <param name="condition">Describes the condition that doesn't hold, e.g., "Value should not be
            null".</param>
            <param name="additionalMessage">An additional message that will be appended to the exception
            message, e.g. "The actual value is 3.". This value may be null or empty.</param>
            <param name="type">Gives extra information on the exception type that must be build. The actual
            implementation of the validator may ignore some or all values.</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveReferenceFunctionDelegate`2">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="TRef">此委托封装的方法的第一个引用参数类型。</typeparam>
            <typeparam name="TResult">返回结果的类型</typeparam>
            <param name="progressPercentage">引用参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
            <param name="refArg">此委托封装的方法的第一个引用参数。</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveReferenceFunctionDelegate`3">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="TRef">此委托封装的方法的第一个引用参数类型。</typeparam>
            <typeparam name="TResult">返回结果的类型</typeparam>
            <param name="arg">此委托封装的方法的第一个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
            <param name="refArg">此委托封装的方法的第一个引用参数。</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveReferenceFunctionDelegate`4">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="TRef">此委托封装的方法的第一个引用参数类型。</typeparam>
            <typeparam name="TResult">返回结果的类型</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
            <param name="refArg">此委托封装的方法的第一个引用参数。</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveReferenceFunctionDelegate`5">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="TRef">此委托封装的方法的第一个引用参数类型。</typeparam>
            <typeparam name="TResult">返回结果的类型</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
            <param name="refArg">此委托封装的方法的第一个引用参数。</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveReferenceFunctionDelegate`6">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="TRef">此委托封装的方法的第一个引用参数类型。</typeparam>
            <typeparam name="TResult">返回结果的类型</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
            <param name="refArg">此委托封装的方法的第一个引用参数。</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveReferenceFunctionDelegate`7">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数类型。</typeparam>
            <typeparam name="TRef">此委托封装的方法的第一个引用参数类型。</typeparam>
            <typeparam name="TResult">返回结果的类型</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
            <param name="refArg">此委托封装的方法的第一个引用参数。</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveReferenceFunctionDelegate`8">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数类型。</typeparam>
            <typeparam name="TRef">此委托封装的方法的第一个引用参数类型。</typeparam>
            <typeparam name="TResult">返回结果的类型</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
            <param name="refArg">此委托封装的方法的第一个引用参数。</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveReferenceFunctionDelegate`9">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数类型。</typeparam>
            <typeparam name="TRef">此委托封装的方法的第一个引用参数类型。</typeparam>
            <typeparam name="TResult">返回结果的类型</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
            <param name="refArg">此委托封装的方法的第一个引用参数。</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveReferenceFunctionDelegate`10">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数类型。</typeparam>
            <typeparam name="TRef">此委托封装的方法的第一个引用参数类型。</typeparam>
            <typeparam name="TResult">返回结果的类型</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
            <param name="refArg">此委托封装的方法的第一个引用参数。</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveReferenceFunctionDelegate`11">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数类型。</typeparam>
            <typeparam name="TRef">此委托封装的方法的第一个引用参数类型。</typeparam>
            <typeparam name="TResult">返回结果的类型</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
            <param name="refArg">此委托封装的方法的第一个引用参数。</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveReferenceFunctionDelegate`12">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数类型。</typeparam>
            <typeparam name="TRef">此委托封装的方法的第一个引用参数类型。</typeparam>
            <typeparam name="TResult">返回结果的类型</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
            <param name="refArg">此委托封装的方法的第一个引用参数。</param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncProgressiveReferenceFunctionEventBased`4">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="TProgressChangedEventArgs"></typeparam>
            <typeparam name="TRef"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveReferenceFunctionEventBased`4.#ctor(Howell.ComponentModel.ProgressiveReferenceFunctionDelegate{System.Object,System.Func{System.Object,System.Boolean},`2,`3})">
            <summary>
            构造事件模型的异步进度操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled,ref progressPercentage);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveReferenceFunctionEventBased`4.Async(System.Object)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncProgressiveReferenceFunctionEventBased`5">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="TProgressChangedEventArgs"></typeparam>
            <typeparam name="T"></typeparam>
            <typeparam name="TRef"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveReferenceFunctionEventBased`5.#ctor(Howell.ComponentModel.ProgressiveReferenceFunctionDelegate{System.Object,System.Func{System.Object,System.Boolean},`2,`3,`4})">
            <summary>
            构造事件模型的异步进度操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled,ref progressPercentage);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveReferenceFunctionEventBased`5.Async(System.Object,`2)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
            <param name="arg"></param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncProgressiveReferenceFunctionEventBased`6">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="TProgressChangedEventArgs"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TRef"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveReferenceFunctionEventBased`6.#ctor(Howell.ComponentModel.ProgressiveReferenceFunctionDelegate{System.Object,System.Func{System.Object,System.Boolean},`2,`3,`4,`5})">
            <summary>
            构造事件模型的异步进度操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled,ref progressPercentage);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveReferenceFunctionEventBased`6.Async(System.Object,`2,`3)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncProgressiveReferenceFunctionEventBased`7">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="TProgressChangedEventArgs"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TRef"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveReferenceFunctionEventBased`7.#ctor(Howell.ComponentModel.ProgressiveReferenceFunctionDelegate{System.Object,System.Func{System.Object,System.Boolean},`2,`3,`4,`5,`6})">
            <summary>
            构造事件模型的异步进度操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled,ref progressPercentage);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveReferenceFunctionEventBased`7.Async(System.Object,`2,`3,`4)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncProgressiveReferenceFunctionEventBased`8">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="TProgressChangedEventArgs"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TRef"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveReferenceFunctionEventBased`8.#ctor(Howell.ComponentModel.ProgressiveReferenceFunctionDelegate{System.Object,System.Func{System.Object,System.Boolean},`2,`3,`4,`5,`6,`7})">
            <summary>
            构造事件模型的异步进度操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled,ref progressPercentage);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveReferenceFunctionEventBased`8.Async(System.Object,`2,`3,`4,`5)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveActionDelegate">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveActionDelegate`1">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T">此委托封装的方法的第一个参数类型。</typeparam>
            <param name="arg">此委托封装的方法的第一个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveActionDelegate`2">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveActionDelegate`3">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveActionDelegate`4">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveActionDelegate`5">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveActionDelegate`6">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveActionDelegate`7">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveActionDelegate`8">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveActionDelegate`9">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveActionDelegate`10">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncProgressiveActionEventBased`1">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveActionEventBased`1.#ctor(Howell.ComponentModel.ProgressiveActionDelegate{System.Object,System.Func{System.Object,System.Boolean}})">
            <summary>
            构造事件模型的异步进度操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled,ref progressPercentage);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveActionEventBased`1.Async(System.Object)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncProgressiveActionEventBased`2">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveActionEventBased`2.#ctor(Howell.ComponentModel.ProgressiveActionDelegate{System.Object,System.Func{System.Object,System.Boolean},`1})">
            <summary>
            构造事件模型的异步进度操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled,ref progressPercentage);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveActionEventBased`2.Async(System.Object,`1)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
            <param name="arg"></param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncProgressiveActionEventBased`3">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveActionEventBased`3.#ctor(Howell.ComponentModel.ProgressiveActionDelegate{System.Object,System.Func{System.Object,System.Boolean},`1,`2})">
            <summary>
            构造事件模型的异步进度操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled,ref progressPercentage);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveActionEventBased`3.Async(System.Object,`1,`2)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncProgressiveActionEventBased`4">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveActionEventBased`4.#ctor(Howell.ComponentModel.ProgressiveActionDelegate{System.Object,System.Func{System.Object,System.Boolean},`1,`2,`3})">
            <summary>
            构造事件模型的异步进度操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled,ref progressPercentage);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveActionEventBased`4.Async(System.Object,`1,`2,`3)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncProgressiveActionEventBased`5">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveActionEventBased`5.#ctor(Howell.ComponentModel.ProgressiveActionDelegate{System.Object,System.Func{System.Object,System.Boolean},`1,`2,`3,`4})">
            <summary>
            构造事件模型的异步进度操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled,ref progressPercentage);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveActionEventBased`5.Async(System.Object,`1,`2,`3,`4)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
        </member>
        <member name="T:Howell.Capability.TimeSpanCap">
            <summary>
            时间段
            </summary>
        </member>
        <member name="M:Howell.Capability.TimeSpanCap.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Howell.Capability.TimeSpanCap.#ctor(Howell.Capability.DateTimeCap,Howell.Capability.DateTimeCap)">
            <summary>
            Constructor
            </summary>
            <param name="beginTime">开始</param>
            <param name="endTime">结束</param>
        </member>
        <member name="P:Howell.Capability.TimeSpanCap.beginTime">
            <summary>
            开始时间
            </summary>
            <remarks>required</remarks>
        </member>
        <member name="P:Howell.Capability.TimeSpanCap.endTime">
            <summary>
            结束时间
            </summary>
            <remarks>required</remarks>
        </member>
        <member name="T:Howell.Time.ISO8601DateFormats">
            <summary>
            ISO8601 日期格式
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601DateFormats.BasicCalendarDate">
            <summary>
            基本日历日期格式
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601DateFormats.ExtendedCalendarDate">
            <summary>
            扩展日历日期格式
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601DateFormats.BasicOrdinalDate">
            <summary>
            基本序列日期格式
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601DateFormats.ExtendedOrdinalDate">
            <summary>
            扩展序列日期格式
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601DateFormats.BasicWeekDate">
            <summary>
            基本周日期格式
            </summary>
        </member>
        <member name="F:Howell.Time.ISO8601DateFormats.ExtendedWeekDate">
            <summary>
            扩展周日期格式
            </summary>
        </member>
        <member name="T:Howell.Time.ISO8601Date">
            <summary>
            ISO8601 标准的日期
            </summary>
        </member>
        <member name="M:Howell.Time.ISO8601Date.Parse(System.String)">
            <summary>
            解析日期字符串
            </summary>
            <param name="s">日期字符串</param>
            <returns>返回ISO8601Date实例</returns>
        </member>
        <member name="M:Howell.Time.ISO8601Date.TryParse(System.String,Howell.Time.ISO8601Date@)">
            <summary>
            尝试解析日期字符串
            </summary>
            <param name="s">日期字符串</param>
            <param name="date">输出ISO8601Date实例</param>
            <returns>解析成功返回true,失败返回false.</returns>
        </member>
        <member name="M:Howell.Time.ISO8601Date.Match2DateTime(System.Text.RegularExpressions.Match,Howell.Time.ISO8601DateFormats)">
            <summary>
            Regular.Match Group 2 DateTime
            </summary>
            <param name="m">Regular.Match</param>
            <param name="format">ISO8601DateFormats</param>
            <returns>return DateTime</returns>
        </member>
        <member name="M:Howell.Time.ISO8601Date.#ctor(System.DateTime)">
            <summary>
            创建ISO8601Date对象
            </summary>
            <param name="datetime">日期和时间数据</param>
        </member>
        <member name="M:Howell.Time.ISO8601Date.#ctor(System.DateTime,Howell.Time.ISO8601DateFormats)">
            <summary>
            创建ISO8601Date对象
            </summary>
            <param name="datetime">日期和时间数据</param>
            <param name="format">格式化方式</param>
        </member>
        <member name="M:Howell.Time.ISO8601Date.ToString">
            <summary>
            转换为ISO8601规范的日期字符串 默认格式YYYYMMDD
            </summary>
            <returns>返回ISO8601规范的日期字符串</returns>
        </member>
        <member name="P:Howell.Time.ISO8601Date.Value">
            <summary>
            日期数值
            </summary>
        </member>
        <member name="P:Howell.Time.ISO8601Date.Format">
            <summary>
            日期的格式
            </summary>
        </member>
        <member name="T:Howell.Schedules.ProgrammeItem">
            <summary>
            节目项
            </summary>
        </member>
        <member name="M:Howell.Schedules.ProgrammeItem.#ctor(System.String,Howell.Schedules.PlanTime)">
            <summary>
            创建 Howell.Schedules.ProgrammeItem 对象
            </summary>
            <param name="key">建</param>
            <param name="plannedTime">计划时间</param>
        </member>
        <member name="M:Howell.Schedules.ProgrammeItem.#ctor(System.String,Howell.Schedules.PlanTime,System.String)">
            <summary>
            创建 Howell.Schedules.ProgrammeItem 对象
            </summary>
            <param name="key">建</param>
            <param name="plannedTime">计划时间</param>
            <param name="content">节目内容</param>
        </member>
        <member name="E:Howell.Schedules.ProgrammeItem.ProgrammeItemReminding">
            <summary>
            提示事件
            </summary>
        </member>
        <member name="P:Howell.Schedules.ProgrammeItem.Plan">
            <summary>
            计划对象
            </summary>
        </member>
        <member name="P:Howell.Schedules.ProgrammeItem.Key">
            <summary>
            键值
            </summary>
        </member>
        <member name="P:Howell.Schedules.ProgrammeItem.PlannedTime">
            <summary>
            计划时间
            </summary>
        </member>
        <member name="P:Howell.Schedules.ProgrammeItem.Content">
            <summary>
            节目内容
            </summary>
        </member>
        <member name="T:Howell.Schedules.WorkSheet">
            <summary>
            日重复工作表
            </summary>
        </member>
        <member name="M:Howell.Schedules.WorkSheet.#ctor">
            <summary>
            创建Programme对象
            </summary>
        </member>
        <member name="M:Howell.Schedules.WorkSheet.Dispose">
            <summary>
            释放由 WorkSheet 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
        </member>
        <member name="P:Howell.Schedules.WorkSheet.Items">
            <summary>
            获取包含节目表中所有项的集合。
            </summary>
        </member>
        <member name="E:Howell.Schedules.WorkSheet.WorkSheetItemBeginning">
            <summary>
            工作表项开始提醒事件
            </summary>
        </member>
        <member name="E:Howell.Schedules.WorkSheet.WorkSheetItemEnding">
            <summary>
            工作表项结束提醒事件
            </summary>
        </member>
        <member name="T:Howell.Schedules.WorkSheet.WorkSheetItemCollection">
            <summary>
            工作表项的集合
            </summary>
        </member>
        <member name="M:Howell.Schedules.WorkSheet.WorkSheetItemCollection.#ctor(Howell.Schedules.WorkSheet)">
            <summary>
            构造
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Howell.Schedules.WorkSheet.WorkSheetItemCollection.IndexOf(Howell.Schedules.WorkSheetItem)">
            <summary>
            返回指定的项在集合中的索引
            </summary>
            <param name="item">Howell.Schedules.WorkSheetItem，表示要在集合中查找的项。</param>
            <returns>项在集合中的位置的从零开始的索引；如果项不在集合中，则为 -1。</returns>
        </member>
        <member name="M:Howell.Schedules.WorkSheet.WorkSheetItemCollection.Insert(System.Int32,Howell.Schedules.WorkSheetItem)">
            <summary>
            将现有的 Howell.Schedules.WorkSheetItem 插入到集合中的指定索引处。
            </summary>
            <param name="index">插入项的从零开始的索引位置。</param>
            <param name="item">Howell.Schedules.WorkSheetItem，表示要插入的项。</param>
        </member>
        <member name="M:Howell.Schedules.WorkSheet.WorkSheetItemCollection.RemoveAt(System.Int32)">
            <summary>
            移除集合中指定索引处的项。
            </summary>
            <param name="index">从零开始的索引（属于要移除的项）。</param>
        </member>
        <member name="M:Howell.Schedules.WorkSheet.WorkSheetItemCollection.Add(Howell.Schedules.WorkSheetItem)">
            <summary>
            将现有的 Howell.Schedules.WorkSheetItem 添加到集合中。
            </summary>
            <param name="item">要添加到集合中的 Howell.Schedules.WorkSheetItem。</param>
        </member>
        <member name="M:Howell.Schedules.WorkSheet.WorkSheetItemCollection.Clear">
            <summary>
            从集合中移除所有项。
            </summary>
        </member>
        <member name="M:Howell.Schedules.WorkSheet.WorkSheetItemCollection.Contains(Howell.Schedules.WorkSheetItem)">
            <summary>
            确定指定项是否位于集合内。
            </summary>
            <param name="item">Howell.Schedules.WorkSheetItem，表示要在集合中查找的项。</param>
            <returns>如果集合中包含该项，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Howell.Schedules.WorkSheet.WorkSheetItemCollection.CopyTo(Howell.Schedules.WorkSheetItem[],System.Int32)">
            <summary>
            将整个集合复制到现有数组中，从该数组内的指定位置开始复制。
            </summary>
            <param name="array">System.Array，表示要将该集合的内容复制到的数组。</param>
            <param name="arrayIndex"> 集合中的项将复制到的目标数组中的位置。</param>
        </member>
        <member name="M:Howell.Schedules.WorkSheet.WorkSheetItemCollection.Remove(Howell.Schedules.WorkSheetItem)">
            <summary>
            从集合中移除指定的项。
            </summary>
            <param name="item">Howell.Schedules.WorkSheetItem，表示要从集合中移除的项。</param>
            <returns>移除成功返回true,否则返回false。</returns>
        </member>
        <member name="M:Howell.Schedules.WorkSheet.WorkSheetItemCollection.GetEnumerator">
            <summary>
            返回一个枚举数，将使用该枚举数循环访问项集合。
            </summary>
            <returns> System.Collections.IEnumerator，表示项集合。</returns>
        </member>
        <member name="M:Howell.Schedules.WorkSheet.WorkSheetItemCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个枚举数，将使用该枚举数循环访问项集合
            </summary>
            <returns> System.Collections.IEnumerator，表示项集合。</returns>
        </member>
        <member name="P:Howell.Schedules.WorkSheet.WorkSheetItemCollection.Item(System.Int32)">
            <summary>
            获取或设置集合中指定索引处的项。
            </summary>
            <param name="index">集合中要获取或设置的项的索引。</param>
            <returns>Howell.Schedules.WorkSheetItem，表示位于集合内指定索引处的项。</returns>
        </member>
        <member name="P:Howell.Schedules.WorkSheet.WorkSheetItemCollection.Count">
            <summary>
            获取集合中项的数目。
            </summary>
        </member>
        <member name="P:Howell.Schedules.WorkSheet.WorkSheetItemCollection.IsReadOnly">
            <summary>
            获取一个值，该值指示集合是否为只读。
            </summary>
        </member>
        <member name="E:Howell.Schedules.WorkSheet.WorkSheetItemCollection.WorkSheetItemBeginning">
            <summary>
            工作表项开始事件
            </summary>
        </member>
        <member name="E:Howell.Schedules.WorkSheet.WorkSheetItemCollection.WorkSheetItemEnding">
            <summary>
            工作表项结束事件
            </summary>
        </member>
        <member name="T:Howell.Schedules.WeeklyWorkSheet">
            <summary>
            周工作表对象
            </summary>
        </member>
        <member name="M:Howell.Schedules.WeeklyWorkSheet.#ctor">
            <summary>
            创建 Howell.Schedules.WeeklyWorkSheet 对象
            </summary>
        </member>
        <member name="M:Howell.Schedules.WeeklyWorkSheet.CopyToAll(System.DayOfWeek)">
            <summary>
            将一周内的某一天的工作表项，拷贝到一周内的其他日期中。
            </summary>
            <param name="dayOfWeek">星期几</param>
        </member>
        <member name="M:Howell.Schedules.WeeklyWorkSheet.Dispose">
            <summary>
            销毁 Howell.Schedules.WeeklyWorkSheet 对象
            </summary>
        </member>
        <member name="P:Howell.Schedules.WeeklyWorkSheet.AllowConflict">
            <summary>
            是否允许时间段冲突，默认是 false即不允许。
            </summary>
        </member>
        <member name="P:Howell.Schedules.WeeklyWorkSheet.Sunday">
            <summary>
            星期日的工作表项信息
            </summary>
        </member>
        <member name="P:Howell.Schedules.WeeklyWorkSheet.Monday">
            <summary>
            星期一的工作表项信息
            </summary>
        </member>
        <member name="P:Howell.Schedules.WeeklyWorkSheet.Tuesday">
            <summary>
            星期二的工作表项信息
            </summary>
        </member>
        <member name="P:Howell.Schedules.WeeklyWorkSheet.Wednesday">
            <summary>
            星期三的工作表项信息
            </summary>
        </member>
        <member name="P:Howell.Schedules.WeeklyWorkSheet.Thursday">
            <summary>
            星期四的工作表项信息
            </summary>
        </member>
        <member name="P:Howell.Schedules.WeeklyWorkSheet.Friday">
            <summary>
            星期五的工作表项信息
            </summary>
        </member>
        <member name="P:Howell.Schedules.WeeklyWorkSheet.Saturday">
            <summary>
            星期六的工作表项信息
            </summary>
        </member>
        <member name="P:Howell.Schedules.WeeklyWorkSheet.Item(System.Int32)">
            <summary>
            获取星期几的工作表项值
            </summary>
            <param name="index">获取项的的项的索引，该值与System.DayOfWeek的枚举值相同</param>
            <returns>返回对应一周内某一天的工作表项信息。</returns>
        </member>
        <member name="P:Howell.Schedules.WeeklyWorkSheet.Item(System.DayOfWeek)">
            <summary>
            获取星期几的工作表项值
            </summary>
            <param name="dayOfWeek">获取项的的项的索引，该值与System.DayOfWeek的枚举值相同</param>
            <returns>返回对应一周内某一天的工作表项信息。</returns>
        </member>
        <member name="E:Howell.Schedules.WeeklyWorkSheet.DayOfWeekWorkSheetItemBeginning">
            <summary>
            开始提示事件
            </summary>
        </member>
        <member name="E:Howell.Schedules.WeeklyWorkSheet.DayOfWeekWorkSheetItemEnding">
            <summary>
            结束提示事件
            </summary>
        </member>
        <member name="T:Howell.Net.FtpClient">
            <summary>
            FTP 客户端
            </summary>
        </member>
        <member name="M:Howell.Net.FtpClient.#ctor(System.String)">
            <summary>
            创建FTP客户端
            </summary>
            <param name="uriString">FTP 服务器地址</param>
        </member>
        <member name="M:Howell.Net.FtpClient.#ctor(System.Uri)">
            <summary>
            创建FTP客户端
            </summary>
            <param name="uri">FTP 服务器地址</param>
        </member>
        <member name="M:Howell.Net.FtpClient.CreateDirectory(System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="path">FTP下的相对路径</param>        
        </member>
        <member name="M:Howell.Net.FtpClient.DeleteDirectory(System.String)">
            <summary>
            删除文件夹
            </summary>
            <param name="path">FTP下的相对路径</param>
        </member>
        <member name="M:Howell.Net.FtpClient.RenameDirectory(System.String,System.String)">
            <summary>
            重命名文件夹
            </summary>
            <param name="path">FTP下的相对路径</param>
            <param name="renameTo">FTP下重命名的相对路径</param>
        </member>
        <member name="M:Howell.Net.FtpClient.DirectoryExists(System.String)">
            <summary>
            判断指定的文件夹是否已存在
            </summary>
            <param name="path">FTP路径</param>
            <returns>已存在返回True，否则返回False。</returns>
        </member>
        <member name="M:Howell.Net.FtpClient.UploadFile(System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="filePath">本地文件路径</param>
            <param name="ftpPath">FTP文件路径</param>
        </member>
        <member name="M:Howell.Net.FtpClient.DownloadFile(System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="filePath">本地文件路径</param>
            <param name="ftpPath">FTP文件路径</param>
        </member>
        <member name="M:Howell.Net.FtpClient.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="path">FTP文件路径</param>
        </member>
        <member name="M:Howell.Net.FtpClient.GetFileSize(System.String)">
            <summary>
            获取FTP文件长度
            </summary>
            <param name="path">FTP文件路径</param>
            <returns>返回文件长度。</returns>
        </member>
        <member name="M:Howell.Net.FtpClient.FileExists(System.String)">
            <summary>
            判断FTP文件是否存在
            </summary>
            <param name="path">FTP文件路径</param>
            <returns>已存在返回True，否则返回False。</returns>
        </member>
        <member name="P:Howell.Net.FtpClient.Uri">
            <summary>
            FTP服务器地址
            </summary>
        </member>
        <member name="P:Howell.Net.FtpClient.Credentials">
            <summary>
            获取或设置用于与 FTP 服务器通信的凭据。
            </summary>
        </member>
        <member name="T:Howell.Net.FtpException">
            <summary>
            FTP 服务器异常
            </summary>
        </member>
        <member name="M:Howell.Net.FtpException.#ctor(System.Net.FtpStatusCode)">
            <summary>
            创建Ftp服务器异常对象信息
            </summary>
            <param name="statusCode">FTP 服务器上发送的最新状态代码</param>
        </member>
        <member name="M:Howell.Net.FtpException.#ctor(System.Net.FtpStatusCode,System.String)">
            <summary>
            创建Ftp服务器异常对象信息
            </summary>
            <param name="statusCode">FTP 服务器上发送的最新状态代码</param>
            <param name="message">FTP 服务器发送的状态代码的文本。</param>
        </member>
        <member name="M:Howell.Net.FtpException.#ctor(System.Net.FtpStatusCode,System.String,System.Exception)">
            <summary>
            创建Ftp服务器异常对象信息
            </summary>
            <param name="statusCode">FTP 服务器上发送的最新状态代码</param>
            <param name="message">FTP 服务器发送的状态代码的文本。</param>
            <param name="innerException">内部错误信息</param>
        </member>
        <member name="P:Howell.Net.FtpException.StatusCode">
            <summary>
            获取从 FTP 服务器上发送的最新状态代码。
            </summary>
        </member>
        <member name="T:Howell.IO.Serialization.IBitSerializable">
            <summary>
            Bit序列化接口
            </summary>
        </member>
        <member name="M:Howell.IO.Serialization.IBitSerializable.ReadBitFormat(Howell.IO.BitReader)">
            <summary>
            从对象的 Bit 表示形式生成该对象。
            </summary>
            <param name="reader">对象从中进行反序列化的 Howell.IO..BitReader 流。</param>
        </member>
        <member name="M:Howell.IO.Serialization.IBitSerializable.WriteBitFormat(Howell.IO.BitWriter)">
            <summary>
            将对象转换为其 Bit 表示形式。
            </summary>
            <param name="writer">对象要序列化为的 Howell.IO.BitWriter 流。</param>
        </member>
        <member name="T:Howell.Industry.Severity">
            <summary>
            事件的重要性，枚举值的数值越大，越重要
            </summary>
        </member>
        <member name="F:Howell.Industry.Severity.None">
            <summary>
            无，或普通
            </summary>
        </member>
        <member name="F:Howell.Industry.Severity.Information">
            <summary>
            普通信息
            </summary>
        </member>
        <member name="F:Howell.Industry.Severity.Warning">
            <summary>
            告警
            </summary>
        </member>
        <member name="F:Howell.Industry.Severity.Emergency">
            <summary>
            紧急
            </summary>
        </member>
        <member name="T:Howell.Industry.NetworkCableType">
            <summary>
            网口线缆类型
            </summary>
        </member>
        <member name="F:Howell.Industry.NetworkCableType.RJ45">
            <summary>
            RJ45接口
            </summary>
        </member>
        <member name="F:Howell.Industry.NetworkCableType.Fiber">
            <summary>
            光纤接口
            </summary>
        </member>
        <member name="F:Howell.Industry.NetworkCableType.Wireless">
            <summary>
            无线设备
            </summary>
        </member>
        <member name="T:Howell.Industry.IOState">
            <summary>
            IO状态类型
            </summary>
        </member>
        <member name="F:Howell.Industry.IOState.Inactive">
            <summary>
            未激活
            </summary>
        </member>
        <member name="F:Howell.Industry.IOState.Active">
            <summary>
            激活
            </summary>
        </member>
        <member name="T:Howell.Collections.Generic.SynchronizedReadOnlyCollection`1">
            <summary>
            提供一个线程安全只读集合，该集合包含泛型参数所指定的类型的对象作为元素。
            </summary>
            <typeparam name="T">包含在线程安全只读集合中作为项的对象的类型。</typeparam>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor">
            <summary>
            初始化 Howell.Collections.Generic.SynchronizedReadOnlyCollection&lt;T&gt; 类的新实例。
            </summary>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object)">
            <summary>
            使用对线程安全只读集合的访问进行同步的对象，初始化 Howell.Collections.Generic.SynchronizedReadOnlyCollection&lt;T&gt; 类的新实例。
            </summary>
            <param name="syncRoot"> 用于对线程安全只读集合的访问进行同步的对象。</param>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            使用指定的可枚举元素列表和用于对线程安全只读集合的访问进行同步的对象，初始化 Howell.Collections.Generic.SynchronizedReadOnlyCollection&lt;T&gt; 类的新实例。
            </summary>
            <param name="syncRoot">用于对线程安全只读集合的访问进行同步的对象。</param>
            <param name="list">元素的 System.Collections.Generic.IEnumerable&lt;T&gt; 集合，用于初始化线程安全只读集合。</param>
            <exception cref="T:System.ArgumentNullException">syncRoot 或 list 为 null。</exception>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,`0[])">
            <summary>
            使用指定的元素数组和用于对线程安全只读集合的访问进行同步的对象，初始化 Howell.Collections.Generic.SynchronizedReadOnlyCollection&lt;T&gt;类的新实例。
            </summary>
            <param name="syncRoot">用于对线程安全只读集合的访问进行同步的对象。</param>
            <param name="list">类型 T 元素的 System.Array，用于初始化线程安全只读集合。</param>
            <exception cref="T:System.ArgumentNullException">syncRoot 或 list 为 null。</exception>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
            
            </summary>
            <param name="syncRoot"></param>
            <param name="list"></param>
            <param name="makeCopy"></param>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)">
            <summary>
            确定集合是否包含具有特定值的元素。
            </summary>
            <param name="value">要在集合中定位的对象。</param>
            <returns>如果在集合中找到元素 value，则为 true；否则为 false。</returns>
            <exception cref="T:System.ArgumentException">value 不是集合所含类型的对象。</exception>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            从特定索引处开始，将集合中的元素复制到指定的数组。
            </summary>
            <param name="array">System.Array，它是从集合中复制的元素的目标位置。</param>
            <param name="index">数组中从零开始的索引，在此处开始复制。</param>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator">
            <summary>
            返回一个枚举数，该枚举数循环访问同步只读集合。
            </summary>
            <returns>一个 System.Collections.Generic.IEnumerator&lt;T&gt;，用于集合中存储的类型的对象。</returns>
        </member>
        <member name="M:Howell.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)">
            <summary>
            返回某个值在集合中的第一个匹配项的索引。
            </summary>
            <param name="value">要检索其索引的元素。</param>
            <returns>value 在集合中的第一个匹配项的从零开始的索引。</returns>
        </member>
        <member name="P:Howell.Collections.Generic.SynchronizedReadOnlyCollection`1.Count">
            <summary>
            获取线程安全只读集合中所含元素的数目。
            </summary>
            <returns>线程安全只读集合中所含元素的数目。</returns>
        </member>
        <member name="P:Howell.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)">
            <summary>
             获取线程安全只读集合中具有指定索引的元素。
            </summary>
            <param name="index">要从集合中检索的元素的从零开始的索引。</param>
            <returns>集合中具有指定 index 的对象。</returns>
        </member>
        <member name="P:Howell.Collections.Generic.SynchronizedReadOnlyCollection`1.Items">
            <summary>
            获取线程安全只读集合中所含元素的列表。
            </summary>
        </member>
        <member name="T:Howell.Capability.Constants">
            <summary>
            内部常量
            </summary>
        </member>
        <member name="F:Howell.Capability.Constants.Namespace">
            <summary>
            协议名空间
            </summary>
        </member>
        <member name="T:Howell.Time.NTP64">
            <summary>
            NTP64时间
            </summary>
        </member>
        <member name="F:Howell.Time.NTP64.Origin">
            <summary>
            起点时间
            </summary>
        </member>
        <member name="M:Howell.Time.NTP64.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Howell.Time.NTP64.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="seconds">秒数</param>
            <param name="fraction">小数部分</param>
        </member>
        <member name="M:Howell.Time.NTP64.#ctor(System.UInt64)">
            <summary>
            Constructor
            </summary>
            <param name="ntp64">NTP64时间</param>
        </member>
        <member name="M:Howell.Time.NTP64.#ctor(System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="datetime">系统时间</param>
        </member>
        <member name="M:Howell.Time.NTP64.ToUInt64">
            <summary>
            转换为UInt64 NTP64
            </summary>
            <returns>返回NTP64</returns>
        </member>
        <member name="P:Howell.Time.NTP64.Seconds">
            <summary>
            1900-1-1 到现在的秒数
            </summary>
        </member>
        <member name="P:Howell.Time.NTP64.Fraction">
            <summary>
            2的-32次方秒
            </summary>
        </member>
        <member name="P:Howell.Time.NTP64.Now">
            <summary>
            当前时间
            </summary>
        </member>
        <member name="T:Howell.Text.ConnectionPrivacyStringBuilder">
            <summary>
            私有信息的连接字符串构造器
            </summary>
        </member>
        <member name="M:Howell.Text.ConnectionPrivacyStringBuilder.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:Howell.Text.ConnectionPrivacyStringBuilder.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="connectionString">连接字符</param>
        </member>
        <member name="P:Howell.Text.ConnectionPrivacyStringBuilder.PrivacyConnectionString">
            <summary>
            私有信息的连接字符串
            </summary>
        </member>
        <member name="T:Howell.Schedules.PlanType">
            <summary>
            计划类型
            </summary>
        </member>
        <member name="F:Howell.Schedules.PlanType.OneOff">
            <summary>
            一次性的
            </summary>
        </member>
        <member name="F:Howell.Schedules.PlanType.Weekly">
            <summary>
            每周重复
            </summary>
        </member>
        <member name="F:Howell.Schedules.PlanType.Daily">
            <summary>
            每日重复
            </summary>
        </member>
        <member name="T:System.Reflection.AssemblyExtensions">
            <summary>
            Assembly extension functions.
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.GetFileVersion(System.Reflection.Assembly)">
            <summary>
            获取System.Reflection.Assembly对象的文件版本号
            </summary>
            <param name="assembly">System.Reflection.Assembly对象</param>
            <returns>返回System.Reflection.Assembly对象的文件版本号.</returns>
            <exception cref="T:System.InvalidOperationException">Assembly does not contain file version attribute.</exception>
        </member>
        <member name="T:System.Linq.EnumerableExtensions">
            <summary>
            Enumerable extension functions.
            </summary>
        </member>
        <member name="M:System.Linq.EnumerableExtensions.ToList``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            从 System.Collections.Generic.IEnumerable 创建一个 System.Collections.Generic.List 并将类型转换为 TResult。
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TResult">目标类型</typeparam>
            <param name="source">源枚举器</param>
            <param name="converter">转换器</param>
            <returns>返回新的IList对象</returns>
        </member>
        <member name="M:System.Linq.EnumerableExtensions.ToArray``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            从 System.Collections.Generic.IEnumerable 创建一个 Array 数组， 并将类型转换为 TResult。
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TResult">目标类型</typeparam>
            <param name="source">源枚举器</param>
            <param name="converter">转换器</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.EnumerableExtensions.Page``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            从 System.Collections.Generic.IEnumerable 创建一个分页的 System.Collections.Generic.IEnumerable。
            </summary>
            <param name="source">源枚举器</param>
            <param name="pageNo">页码从1开始计数的正整数,</param>
            <param name="pageSize">页大小，必须大于0.</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.EnumerableExtensions.PageCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            从 System.Collections.Generic.IEnumerable 根据指定分页大小，可以分页
            </summary>
            <param name="source">源枚举器</param>
            <param name="pageSize">分页最大记录条数</param>
            <returns>返回分页数目。</returns>
        </member>
        <member name="T:Howell.IO.Serialization.BinarySerializer">
            <summary>
            二进制序列化器
            </summary>
        </member>
        <member name="F:Howell.IO.Serialization.BinarySerializer.m_Type">
            <summary>
            可序列化的对象的类型.
            </summary>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.#ctor">
            <summary>
            初始化 BinarySerializer 类的新实例。
            </summary>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.#ctor(System.Type)">
            <summary>
            初始化 BinarySerializer 类的新实例。
            </summary>
            <param name="type">此 BinarySerializer 可序列化的对象的类型。</param>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.TypeIsString(System.Type)">
            <summary>
            是否是字符串
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.TypeIsStruct(System.Type)">
            <summary>
            是否是结构
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.GetProperties(System.Object,System.Type[]@,System.Object[]@)">
            <summary>
            获取对象下所有属性
            </summary>
            <param name="o"></param>
            <param name="types"></param>
            <param name="values"></param>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.GetProperties">
            <summary>
            获取序列化类型下所有属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.GetEnumValue(System.Type,System.Object)">
            <summary>
            获取枚举值
            </summary>
            <param name="type">枚举类型</param>
            <param name="value">数值</param>
            <returns>枚举值</returns>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.IsBinarySerializable(System.IO.BinaryWriter,System.Object)">
            <summary>
            是否继承自IBinarySerializable
            </summary>
            <param name="writer">写入器</param>
            <param name="o">序列化对象</param>
            <returns>是/否</returns>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.IsBinarySerializable(System.IO.BinaryReader,System.Object)">
            <summary>
            是否继承自IBinarySerializable
            </summary>
            <param name="reader">读取器</param>
            <param name="o">触发对象</param>
            <returns>是/否</returns>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.SerializeClass(System.Type,System.Object,System.IO.BinaryWriter)">
            <summary>
            序列化Class对象
            </summary>
            <param name="type"></param>
            <param name="o"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.SerializeString(System.Object,System.IO.BinaryWriter)">
            <summary>
            序列化String对象
            </summary>
            <param name="value"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.SerializeArray(System.Object,System.IO.BinaryWriter)">
            <summary>
            序列化数组
            </summary>
            <param name="value"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.SerializeValue(System.Type,System.Object,System.IO.BinaryWriter)">
            <summary>
            序列化值类型
            </summary>
            <param name="type">序列化类型</param>
            <param name="value">值</param>
            <param name="writer">写入器</param>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.SerializeAnalyse(System.Type,System.Object,System.IO.BinaryWriter)">
            <summary>
            分析需要哪种序列化
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.DeserializeClass(System.Type,System.IO.BinaryReader)">
            <summary>
            反序列化类
            </summary>
            <param name="type">类型</param>
            <param name="reader">读取器</param>
            <returns>反序列化对象</returns>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.DeserializeString(System.IO.BinaryReader)">
            <summary>
            反序列化字符串
            </summary>
            <param name="reader">读取器</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.DeserializeArray(System.Type,System.IO.BinaryReader)">
            <summary>
            反序列化数组
            </summary>
            <param name="type">序列化类型</param>
            <param name="reader">读取器</param>
            <returns>数组</returns>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.DeserializeValue(System.Type,System.IO.BinaryReader)">
            <summary>
            反序列化值类型
            </summary>
            <param name="type">类型</param>
            <param name="reader">读取器</param>
            <returns>获得值对象</returns>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.DeserializeAnalyse(System.Type,System.IO.BinaryReader)">
            <summary>
            反序列化分析
            </summary>
            <param name="type"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.FromTypes(System.Type[])">
            <summary>
            返回从类型数组创建的 BinarySerializer 对象的数组。
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.Serialize(System.IO.BinaryWriter,System.Object)">
            <summary>
            使用指定的 BinaryWriter 序列化指定的 System.Object。
            </summary>
            <param name="writer">写入器</param>
            <param name="o">将要序列化的 System.Object。</param>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.Serialize(System.IO.Stream,System.Object)">
            <summary>
            使用指定的 System.IO.Stream 序列化指定的 System.Object。
            </summary>
            <param name="stream">数据流</param>
            <param name="o">将要序列化的 System.Object。</param>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.Serialize(System.IO.Stream,System.Object,System.Text.Encoding)">
            <summary>
            使用指定的 System.IO.Stream 序列化指定的 System.Object。
            </summary>
            <param name="stream">数据流</param>
            <param name="o">将要序列化的 System.Object。</param>
            <param name="encoding">编码类型(默认UTF8)</param>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.Deserialize(System.IO.BinaryReader)">
            <summary>
            反序列化指定 System.IO.Stream 包含的 Binary 数据。
            </summary>
            <param name="reader">包含要反序列化的 XML 文档的 BinaryReader。</param>
            <returns>正被反序列化的 System.Object。</returns>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.Deserialize(System.IO.Stream,System.Text.Encoding)">
            <summary>
            反序列化指定 System.IO.Stream 包含的 Binary 数据。
            </summary>
            <param name="stream">包含要反序列化的 Binary 数据的 System.IO.Stream。</param>
            <param name="encoding">序列化的编码样式。</param>
            <returns>正被反序列化的 System.Object。</returns>
        </member>
        <member name="M:Howell.IO.Serialization.BinarySerializer.Deserialize(System.IO.Stream)">
            <summary>
            反序列化指定 System.IO.Stream 包含的 Binary 数据。
            </summary>
            <param name="stream">包含要反序列化的 Binary 数据的 System.IO.Stream。</param>
            <returns>正被反序列化的 System.Object。</returns>
        </member>
        <member name="T:Howell.IO.BitFormatElementAttribute">
            <summary>
            位格式化元素特性
            </summary>    
        </member>
        <member name="M:Howell.IO.BitFormatElementAttribute.#ctor(Howell.IO.BitType)">
            <summary>
            
            </summary>
            <param name="type">格式化属性类型</param>
        </member>
        <member name="P:Howell.IO.BitFormatElementAttribute.IsNullable">
            <summary>
            是否可以为空
            </summary>
        </member>
        <member name="P:Howell.IO.BitFormatElementAttribute.Order">
            <summary>
            序列化顺序
            </summary>
        </member>
        <member name="P:Howell.IO.BitFormatElementAttribute.Type">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:Howell.IO.BitFormatElementAttribute.Length">
            <summary>
            长度
            </summary>
        </member>
        <member name="T:Howell.IO.BitSerializableAttribute">
            <summary>
             
            </summary>
        </member>
        <member name="T:Howell.IO.BitType">
            <summary>
            位对象类型
            </summary>
        </member>
        <member name="F:Howell.IO.BitType.Object">
            <summary>
            用户自定义类型
            </summary>
        </member>
        <member name="F:Howell.IO.BitType.Bit">
            <summary>
            位
            </summary>
        </member>
        <member name="F:Howell.IO.BitType.Bits">
            <summary>
            多个位
            </summary>
        </member>
        <member name="F:Howell.IO.BitType.Byte">
            <summary>
            1个字节的无符号整数
            </summary>
        </member>
        <member name="F:Howell.IO.BitType.Int16">
            <summary>
            2个字节的有符号整数
            </summary>
        </member>
        <member name="F:Howell.IO.BitType.Int32">
            <summary>
            4个字节的有符号整数
            </summary>
        </member>
        <member name="F:Howell.IO.BitType.Int64">
            <summary>
            8个字节的有符号整数
            </summary>
        </member>
        <member name="F:Howell.IO.BitType.UInt16">
            <summary>
            2个字节的无符号整数
            </summary>
        </member>
        <member name="F:Howell.IO.BitType.UInt32">
            <summary>
            4个字节的无符号整数
            </summary>
        </member>
        <member name="F:Howell.IO.BitType.UInt64">
            <summary>
            8个字节的无符号整数
            </summary>
        </member>
        <member name="F:Howell.IO.BitType.String">
            <summary>
            字符串对象
            </summary>
        </member>
        <member name="F:Howell.IO.BitType.ByteArray">
            <summary>
            字节数组
            </summary>
        </member>
        <member name="F:Howell.IO.BitType.GolombUE32">
            <summary>
            无符号指数哥伦布编码
            </summary>
        </member>
        <member name="F:Howell.IO.BitType.GolombSE32">
            <summary>
            有符号指数哥伦布编码
            </summary>
        </member>
        <member name="T:Howell.Interops.RECT">
            <summary>
            矩形数据结构
            </summary>
        </member>
        <member name="F:Howell.Interops.RECT.Left">
            <summary>
            左
            </summary>
        </member>
        <member name="F:Howell.Interops.RECT.Top">
            <summary>
            上
            </summary>
        </member>
        <member name="F:Howell.Interops.RECT.Right">
            <summary>
            右
            </summary>
        </member>
        <member name="F:Howell.Interops.RECT.Bottom">
            <summary>
            下
            </summary>
        </member>
        <member name="T:Howell.Drawing.D2.PolygonI">
            <summary>
            多边形
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.PolygonI.RegularExpressionString">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="F:Howell.Drawing.D2.PolygonI.Empty">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:Howell.Drawing.D2.PolygonI.#ctor(System.Collections.Generic.IList{Howell.Drawing.D2.PointI})">
            <summary>
            Constructor
            </summary>
            <param name="vertex">多边形的顶点</param>        
        </member>
        <member name="M:Howell.Drawing.D2.PolygonI.#ctor(Howell.Drawing.D2.PointI[])">
            <summary>
            Constructor
            </summary>
            <param name="vertex">多边形的顶点</param>        
        </member>
        <member name="M:Howell.Drawing.D2.PolygonI.Parse(System.String)">
            <summary>
            解析多边形的字符串形式
            </summary>
            <param name="value">字符串</param>
            <returns>如果解析成功，返回PolygonI类型，否则将抛出异常</returns>
            <exception cref="T:System.FormatException">非法的字符串格式。</exception>
        </member>
        <member name="M:Howell.Drawing.D2.PolygonI.ToString">
            <summary>
            获取多边形类型的字符串型式
            </summary>
            <returns>返回多边形类型的字符串型式。</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolygonI.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:Howell.Drawing.D2.PolygonI"/> equal to the specified one.
            </summary>
            <param name="obj">Another point to check equalty to.</param>
            <returns>Return <see langword="true"/> if objects are equal.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolygonI.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            <returns>Returns the hash code for this instance.</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolygonI.op_Equality(Howell.Drawing.D2.PolygonI,Howell.Drawing.D2.PolygonI)">
            <summary>
            equals operator - checks if two polygon is the same.
            </summary>
            <param name="p1">Polygon object 1.</param>
            <param name="p2">Polygon object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolygonI.op_Inequality(Howell.Drawing.D2.PolygonI,Howell.Drawing.D2.PolygonI)">
            <summary>
            equals operator - checks if two polygon is not the same.
            </summary>
            <param name="p1">Polygon2D object 1.</param>
            <param name="p2">Polygon2D object 2.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolygonI.op_Implicit(Howell.Drawing.D2.PolygonI)~Howell.Drawing.D2.PolygonD">
            <summary>
            显式转换PolygonD To PolygonI
            </summary>
            <param name="polygon">多边形</param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolygonI.Equals(Howell.Drawing.D2.PolygonI)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolygonI.GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Howell.Drawing.D2.PolygonI.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="P:Howell.Drawing.D2.PolygonI.Vertex">
            <summary>
            多边形顶点
            </summary>
        </member>
        <member name="P:Howell.Drawing.D2.PolygonI.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="T:Howell.Math.Algorithm.Stabilizer.CentroidStabilizer">
            <summary>
            质心稳定器
            </summary>
        </member>
        <member name="M:Howell.Math.Algorithm.Stabilizer.CentroidStabilizer.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Howell.Math.Algorithm.Stabilizer.CentroidStabilizer.#ctor(System.Double,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="threshold">加速阀值</param>
            <param name="step">速度步进</param>
        </member>
        <member name="M:Howell.Math.Algorithm.Stabilizer.CentroidStabilizer.Stabilize(Howell.Drawing.D2.PointD)">
            <summary>
            稳定质心
            </summary>
            <param name="newPoint">新目标质心</param>
            <returns>返回稳定后的质心</returns>
        </member>
        <member name="M:Howell.Math.Algorithm.Stabilizer.CentroidStabilizer.Reset">
            <summary>
            复位数据
            </summary>
        </member>
        <member name="M:Howell.Math.Algorithm.Stabilizer.CentroidStabilizer.correct0(System.Double@,System.Double,System.Double@)">
            <summary>
            矫正速度 - 低加速度
            </summary>
            <param name="previous"></param>
            <param name="current"></param>
            <param name="velocity"></param>
        </member>
        <member name="P:Howell.Math.Algorithm.Stabilizer.CentroidStabilizer.Threshold">
            <summary>
            加速阀值
            </summary>
        </member>
        <member name="P:Howell.Math.Algorithm.Stabilizer.CentroidStabilizer.Step">
            <summary>
            加速阀值
            </summary>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveFunctionDelegate`1">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="TResult">返回结果的类型</typeparam>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveFunctionDelegate`2">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="TResult">返回结果的类型</typeparam>
            <param name="arg">此委托封装的方法的第一个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveFunctionDelegate`3">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="TResult">返回结果的类型</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveFunctionDelegate`4">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="TResult">返回结果的类型</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveFunctionDelegate`5">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="TResult">返回结果的类型</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveFunctionDelegate`6">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数类型。</typeparam>
            <typeparam name="TResult">返回结果的类型</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveFunctionDelegate`7">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数类型。</typeparam>
            <typeparam name="TResult">返回结果的类型</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveFunctionDelegate`8">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数类型。</typeparam>
            <typeparam name="TResult">返回结果的类型</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveFunctionDelegate`9">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数类型。</typeparam>
            <typeparam name="TResult">返回结果的类型</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveFunctionDelegate`10">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数类型。</typeparam>
            <typeparam name="TResult">返回结果的类型</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
        </member>
        <member name="T:Howell.ComponentModel.ProgressiveFunctionDelegate`11">
            <summary>
            封装一个异步操作实现的方法。在进度没有等于1或操作被取消并且进度没有等于0时将继续调用该操作
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数类型。</typeparam>
            <typeparam name="TResult">返回结果的类型</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="progressPercentage">输入输出参数用于传递异步操作的进度，取值范围0-100，0表示尚未开始，100表示完成异步操作</param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncProgressiveFunctionEventBased`2">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveFunctionEventBased`2.#ctor(Howell.ComponentModel.ProgressiveFunctionDelegate{System.Object,System.Func{System.Object,System.Boolean},`1})">
            <summary>
            构造事件模型的异步进度操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled,ref progressPercentage);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveFunctionEventBased`2.Async(System.Object)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncProgressiveFunctionEventBased`3">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>    
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveFunctionEventBased`3.#ctor(Howell.ComponentModel.ProgressiveFunctionDelegate{System.Object,System.Func{System.Object,System.Boolean},`1,`2})">
            <summary>
            构造事件模型的异步进度操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled,ref progressPercentage);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveFunctionEventBased`3.Async(System.Object,`1)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
            <param name="arg"></param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncProgressiveFunctionEventBased`4">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>    
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveFunctionEventBased`4.#ctor(Howell.ComponentModel.ProgressiveFunctionDelegate{System.Object,System.Func{System.Object,System.Boolean},`1,`2,`3})">
            <summary>
            构造事件模型的异步进度操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled,ref progressPercentage);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveFunctionEventBased`4.Async(System.Object,`1,`2)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncProgressiveFunctionEventBased`5">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>    
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveFunctionEventBased`5.#ctor(Howell.ComponentModel.ProgressiveFunctionDelegate{System.Object,System.Func{System.Object,System.Boolean},`1,`2,`3,`4})">
            <summary>
            构造事件模型的异步进度操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled,ref progressPercentage);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveFunctionEventBased`5.Async(System.Object,`1,`2,`3)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="T:Howell.ComponentModel.AsyncProgressiveFunctionEventBased`6">
            <summary>
            事件模型的异步操作实现类型，此类型的同步实现方案为 void 函数名();
            </summary>
            <typeparam name="TCompletedEventArgs"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>    
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveFunctionEventBased`6.#ctor(Howell.ComponentModel.ProgressiveFunctionDelegate{System.Object,System.Func{System.Object,System.Boolean},`1,`2,`3,`4,`5})">
            <summary>
            构造事件模型的异步进度操作
            </summary>
            <param name="implFunction">
            异步操作的同步实现函数
            函数原型: <!--void 函数名(Object taskId,Func<Object, Boolean> isCancelled,ref progressPercentage);-->
            </param>
        </member>
        <member name="M:Howell.ComponentModel.AsyncProgressiveFunctionEventBased`6.Async(System.Object,`1,`2,`3,`4)">
            <summary>
            异步操作行为
            </summary>
            <param name="taskId"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
        </member>
        <member name="T:Howell.Capability.BooleanCap">
            <summary>
            Boolean 能力
            </summary>
        </member>
        <member name="M:Howell.Capability.BooleanCap.op_Implicit(Howell.Capability.BooleanCap)~System.Boolean">
            <summary>
            隐式转换
            </summary>
            <param name="val">转换对象</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Howell.Capability.BooleanCap.op_Explicit(System.Boolean)~Howell.Capability.BooleanCap">
            <summary>
            显式转换
            </summary>
            <param name="val">转换对象</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Howell.Capability.BooleanCap.#ctor">
            <summary>
            创建 BooleanCap对象
            </summary>
        </member>
        <member name="M:Howell.Capability.BooleanCap.#ctor(System.Boolean)">
            <summary>
            创建 BooleanCap对象
            </summary>
            <param name="val">数值</param>
        </member>
        <member name="M:Howell.Capability.BooleanCap.#ctor(Howell.Capability.BooleanCap)">
            <summary>
            拷贝构造
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Howell.Capability.BooleanCap.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns>返回字符串。</returns>
        </member>
        <member name="P:Howell.Capability.BooleanCap.Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="P:Howell.Capability.BooleanCap.TextSpecified">
            <summary>
            是否包含Text XML属性
            </summary>
        </member>
        <member name="P:Howell.Capability.BooleanCap.Text">
            <summary>
            文本内容
            </summary>
        </member>
    </members>
</doc>
